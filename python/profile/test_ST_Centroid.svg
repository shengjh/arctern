<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>test_ST_Centroid (profile_geo.py:161) (18 samples, 1.57%)</title><rect x="1.4783%" y="68" width="1.5652%" height="15" fill="rgb(227,0,7)"/><text x="1.7283%" y="78.50"></text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (28 samples, 2.43%)</title><rect x="4.3478%" y="196" width="2.4348%" height="15" fill="rgb(217,0,24)"/><text x="4.5978%" y="206.50">OG..</text></g><g><title>0x7f7f9bd4c80a (libc-2.27.so) (14 samples, 1.22%)</title><rect x="16.5217%" y="244" width="1.2174%" height="15" fill="rgb(221,193,54)"/><text x="16.7717%" y="254.50"></text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (116 samples, 10.09%)</title><rect x="10.4348%" y="228" width="10.0870%" height="15" fill="rgb(248,212,6)"/><text x="10.6848%" y="238.50">CPLStrtodDelim ..</text></g><g><title>CPLReplacePointByLocalePoint (libgdal.so.26.0.4) (25 samples, 2.17%)</title><rect x="18.3478%" y="244" width="2.1739%" height="15" fill="rgb(208,68,35)"/><text x="18.5978%" y="254.50">C..</text></g><g><title>localeconv (libc-2.27.so) (22 samples, 1.91%)</title><rect x="18.6087%" y="260" width="1.9130%" height="15" fill="rgb(232,128,0)"/><text x="18.8587%" y="270.50">l..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (136 samples, 11.83%)</title><rect x="9.3043%" y="212" width="11.8261%" height="15" fill="rgb(207,160,47)"/><text x="9.5543%" y="222.50">OGRWktReadPointsM ..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (166 samples, 14.43%)</title><rect x="6.7826%" y="196" width="14.4348%" height="15" fill="rgb(228,23,34)"/><text x="7.0326%" y="206.50">OGRPolygon::importFrom..</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (200 samples, 17.39%)</title><rect x="4.0870%" y="180" width="17.3913%" height="15" fill="rgb(218,30,26)"/><text x="4.3370%" y="190.50">OGRPolygon::importFromWkt (..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (212 samples, 18.43%)</title><rect x="3.3913%" y="148" width="18.4348%" height="15" fill="rgb(220,122,19)"/><text x="3.6413%" y="158.50">OGRGeometryFactory::createFro..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (212 samples, 18.43%)</title><rect x="3.3913%" y="164" width="18.4348%" height="15" fill="rgb(250,228,42)"/><text x="3.6413%" y="174.50">OGRGeometryFactory::createFro..</text></g><g><title>CPLGetConfigOption (libgdal.so.26.0.4) (18 samples, 1.57%)</title><rect x="24.4348%" y="196" width="1.5652%" height="15" fill="rgb(240,193,28)"/><text x="24.6848%" y="206.50"></text></g><g><title>CPLsnprintf (libgdal.so.26.0.4) (76 samples, 6.61%)</title><rect x="26.1739%" y="196" width="6.6087%" height="15" fill="rgb(216,20,37)"/><text x="26.4239%" y="206.50">CPLsnprin..</text></g><g><title>CPLvsnprintf (libgdal.so.26.0.4) (75 samples, 6.52%)</title><rect x="26.2609%" y="212" width="6.5217%" height="15" fill="rgb(206,188,39)"/><text x="26.5109%" y="222.50">CPLvsnpri..</text></g><g><title>__snprintf_chk (libc-2.27.so) (71 samples, 6.17%)</title><rect x="26.6087%" y="228" width="6.1739%" height="15" fill="rgb(217,207,13)"/><text x="26.8587%" y="238.50">__snprin..</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (71 samples, 6.17%)</title><rect x="26.6087%" y="244" width="6.1739%" height="15" fill="rgb(231,73,38)"/><text x="26.8587%" y="254.50">__vsnpri..</text></g><g><title>_IO_vfprintf (libc-2.27.so) (66 samples, 5.74%)</title><rect x="27.0435%" y="260" width="5.7391%" height="15" fill="rgb(225,20,46)"/><text x="27.2935%" y="270.50">_IO_vfp..</text></g><g><title>0x7f7f9bd5b098 (libc-2.27.so) (52 samples, 4.52%)</title><rect x="28.2609%" y="276" width="4.5217%" height="15" fill="rgb(210,31,41)"/><text x="28.5109%" y="286.50">0x7f7..</text></g><g><title>OGRFormatDouble (libgdal.so.26.0.4) (161 samples, 14.00%)</title><rect x="23.7391%" y="180" width="14.0000%" height="15" fill="rgb(221,200,47)"/><text x="23.9891%" y="190.50">OGRFormatDouble (libg..</text></g><g><title>__snprintf_chk (libc-2.27.so) (57 samples, 4.96%)</title><rect x="32.7826%" y="196" width="4.9565%" height="15" fill="rgb(226,26,5)"/><text x="33.0326%" y="206.50">__snpr..</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (56 samples, 4.87%)</title><rect x="32.8696%" y="212" width="4.8696%" height="15" fill="rgb(249,33,26)"/><text x="33.1196%" y="222.50">__vsnp..</text></g><g><title>_IO_vfprintf (libc-2.27.so) (52 samples, 4.52%)</title><rect x="33.2174%" y="228" width="4.5217%" height="15" fill="rgb(235,183,28)"/><text x="33.4674%" y="238.50">_IO_v..</text></g><g><title>OGRMakeWktCoordinateM (libgdal.so.26.0.4) (206 samples, 17.91%)</title><rect x="22.5217%" y="164" width="17.9130%" height="15" fill="rgb(221,5,38)"/><text x="22.7717%" y="174.50">OGRMakeWktCoordinateM (libgd..</text></g><g><title>__snprintf_chk (libc-2.27.so) (31 samples, 2.70%)</title><rect x="37.7391%" y="180" width="2.6957%" height="15" fill="rgb(247,18,42)"/><text x="37.9891%" y="190.50">__..</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (31 samples, 2.70%)</title><rect x="37.7391%" y="196" width="2.6957%" height="15" fill="rgb(241,131,45)"/><text x="37.9891%" y="206.50">__..</text></g><g><title>_IO_vfprintf (libc-2.27.so) (26 samples, 2.26%)</title><rect x="38.1739%" y="212" width="2.2609%" height="15" fill="rgb(249,31,29)"/><text x="38.4239%" y="222.50">_..</text></g><g><title>OGRPoint::exportToWkt (libgdal.so.26.0.4) (231 samples, 20.09%)</title><rect x="21.9130%" y="148" width="20.0870%" height="15" fill="rgb(225,111,53)"/><text x="22.1630%" y="158.50">OGRPoint::exportToWkt (libgdal.s..</text></g><g><title>__snprintf_chk (libc-2.27.so) (18 samples, 1.57%)</title><rect x="40.4348%" y="164" width="1.5652%" height="15" fill="rgb(238,160,17)"/><text x="40.6848%" y="174.50"></text></g><g><title>__vsnprintf_chk (libc-2.27.so) (17 samples, 1.48%)</title><rect x="40.5217%" y="180" width="1.4783%" height="15" fill="rgb(214,148,48)"/><text x="40.7717%" y="190.50"></text></g><g><title>_IO_vfprintf (libc-2.27.so) (15 samples, 1.30%)</title><rect x="40.6957%" y="196" width="1.3043%" height="15" fill="rgb(232,36,49)"/><text x="40.9457%" y="206.50"></text></g><g><title>OGRCurvePolygon::~OGRCurvePolygon (libgdal.so.26.0.4) (14 samples, 1.22%)</title><rect x="42.1739%" y="164" width="1.2174%" height="15" fill="rgb(209,103,24)"/><text x="42.4239%" y="174.50"></text></g><g><title>OGRCurveCollection::empty (libgdal.so.26.0.4) (13 samples, 1.13%)</title><rect x="42.2609%" y="180" width="1.1304%" height="15" fill="rgb(229,88,8)"/><text x="42.5109%" y="190.50"></text></g><g><title>OGRPolygon::~OGRPolygon (libgdal.so.26.0.4) (16 samples, 1.39%)</title><rect x="42.0870%" y="148" width="1.3913%" height="15" fill="rgb(213,181,19)"/><text x="42.3370%" y="158.50"></text></g><g><title>geos::algorithm::Centroid::addLineSegments (libgeos-3.8.0.so) (15 samples, 1.30%)</title><rect x="46.7826%" y="260" width="1.3043%" height="15" fill="rgb(254,191,54)"/><text x="47.0326%" y="270.50"></text></g><g><title>geos::algorithm::Centroid::addTriangle (libgeos-3.8.0.so) (16 samples, 1.39%)</title><rect x="48.1739%" y="276" width="1.3913%" height="15" fill="rgb(241,83,37)"/><text x="48.4239%" y="286.50"></text></g><g><title>geos::algorithm::Centroid::addShell (libgeos-3.8.0.so) (32 samples, 2.78%)</title><rect x="48.0870%" y="260" width="2.7826%" height="15" fill="rgb(233,36,39)"/><text x="48.3370%" y="270.50">ge..</text></g><g><title>geos::algorithm::Orientation::isCCW (libgeos-3.8.0.so) (15 samples, 1.30%)</title><rect x="49.5652%" y="276" width="1.3043%" height="15" fill="rgb(226,3,54)"/><text x="49.8152%" y="286.50"></text></g><g><title>geos::algorithm::Centroid::add (libgeos-3.8.0.so) (65 samples, 5.65%)</title><rect x="45.3913%" y="244" width="5.6522%" height="15" fill="rgb(245,192,40)"/><text x="45.6413%" y="254.50">geos::a..</text></g><g><title>geos::algorithm::Centroid::getCentroid (libgeos-3.8.0.so) (68 samples, 5.91%)</title><rect x="45.3043%" y="228" width="5.9130%" height="15" fill="rgb(238,167,29)"/><text x="45.5543%" y="238.50">geos::al..</text></g><g><title>geos::geom::Geometry::getCentroid (libgeos-3.8.0.so) (73 samples, 6.35%)</title><rect x="45.1304%" y="212" width="6.3478%" height="15" fill="rgb(232,182,51)"/><text x="45.3804%" y="222.50">geos::ge..</text></g><g><title>GEOSGetCentroid_r (libgeos_c.so.1.13.1) (84 samples, 7.30%)</title><rect x="44.6087%" y="180" width="7.3043%" height="15" fill="rgb(231,60,39)"/><text x="44.8587%" y="190.50">GEOSGetCen..</text></g><g><title>geos::geom::Geometry::getCentroid (libgeos-3.8.0.so) (80 samples, 6.96%)</title><rect x="44.9565%" y="196" width="6.9565%" height="15" fill="rgb(208,69,12)"/><text x="45.2065%" y="206.50">geos::geo..</text></g><g><title>geos::geom::GeometryFactory::createLinearRing (libgeos-3.8.0.so) (12 samples, 1.04%)</title><rect x="55.3043%" y="292" width="1.0435%" height="15" fill="rgb(235,93,37)"/><text x="55.5543%" y="302.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (23 samples, 2.00%)</title><rect x="60.2609%" y="324" width="2.0000%" height="15" fill="rgb(213,116,39)"/><text x="60.5109%" y="334.50">s..</text></g><g><title>geos::io::WKBReader::readCoordinateSequence (libgeos-3.8.0.so) (71 samples, 6.17%)</title><rect x="56.3478%" y="292" width="6.1739%" height="15" fill="rgb(222,207,29)"/><text x="56.5978%" y="302.50">geos::io..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.0.so) (56 samples, 4.87%)</title><rect x="57.6522%" y="308" width="4.8696%" height="15" fill="rgb(206,96,30)"/><text x="57.9022%" y="318.50">geos::..</text></g><g><title>geos::io::WKBReader::readLinearRing (libgeos-3.8.0.so) (87 samples, 7.57%)</title><rect x="55.1304%" y="276" width="7.5652%" height="15" fill="rgb(218,138,4)"/><text x="55.3804%" y="286.50">geos::io::..</text></g><g><title>geos::io::WKBReader::readPolygon (libgeos-3.8.0.so) (91 samples, 7.91%)</title><rect x="54.8696%" y="260" width="7.9130%" height="15" fill="rgb(250,191,14)"/><text x="55.1196%" y="270.50">geos::io::W..</text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.0.so) (120 samples, 10.43%)</title><rect x="53.3913%" y="228" width="10.4348%" height="15" fill="rgb(239,60,40)"/><text x="53.6413%" y="238.50">geos::io::WKBRe..</text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.0.so) (119 samples, 10.35%)</title><rect x="53.4783%" y="244" width="10.3478%" height="15" fill="rgb(206,27,48)"/><text x="53.7283%" y="254.50">geos::io::WKBRe..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:159) (23 samples, 2.00%)</title><rect x="65.1304%" y="244" width="2.0000%" height="15" fill="rgb(225,35,8)"/><text x="65.3804%" y="254.50">s..</text></g><g><title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (locale_classes.tcc:110) (13 samples, 1.13%)</title><rect x="66.0000%" y="260" width="1.1304%" height="15" fill="rgb(250,213,24)"/><text x="66.2500%" y="270.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (51 samples, 4.43%)</title><rect x="65.1304%" y="228" width="4.4348%" height="15" fill="rgb(247,123,22)"/><text x="65.3804%" y="238.50">std::..</text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.1) (206 samples, 17.91%)</title><rect x="52.6957%" y="212" width="17.9130%" height="15" fill="rgb(231,138,38)"/><text x="52.9457%" y="222.50">GEOSGeomFromWKB_buf_r (libge..</text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (237 samples, 20.61%)</title><rect x="51.9130%" y="180" width="20.6087%" height="15" fill="rgb(231,145,46)"/><text x="52.1630%" y="190.50">OGRGeometry::exportToGEOS (libgd..</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (231 samples, 20.09%)</title><rect x="52.4348%" y="196" width="20.0870%" height="15" fill="rgb(251,118,11)"/><text x="52.6848%" y="206.50">convertToGEOSGeom (libgdal.so.26..</text></g><g><title>OGRPolygon::exportToWkb (libgdal.so.26.0.4) (19 samples, 1.65%)</title><rect x="70.8696%" y="212" width="1.6522%" height="15" fill="rgb(217,147,25)"/><text x="71.1196%" y="222.50"></text></g><g><title>OGRLinearRing::_exportToWkb (libgdal.so.26.0.4) (14 samples, 1.22%)</title><rect x="71.3043%" y="228" width="1.2174%" height="15" fill="rgb(247,81,37)"/><text x="71.5543%" y="238.50"></text></g><g><title>std::ostream::write (ostream.tcc:196) (16 samples, 1.39%)</title><rect x="75.7391%" y="260" width="1.3913%" height="15" fill="rgb(209,12,38)"/><text x="75.9891%" y="270.50"></text></g><g><title>std::ostream::_M_write (ostream:320) (15 samples, 1.30%)</title><rect x="75.8261%" y="276" width="1.3043%" height="15" fill="rgb(227,1,9)"/><text x="76.0761%" y="286.50"></text></g><g><title>geos::io::WKBWriter::writeCoordinateSequence (libgeos-3.8.0.so) (23 samples, 2.00%)</title><rect x="75.3043%" y="228" width="2.0000%" height="15" fill="rgb(248,47,43)"/><text x="75.5543%" y="238.50">g..</text></g><g><title>geos::io::WKBWriter::writeCoordinate (libgeos-3.8.0.so) (23 samples, 2.00%)</title><rect x="75.3043%" y="244" width="2.0000%" height="15" fill="rgb(221,10,30)"/><text x="75.5543%" y="254.50">g..</text></g><g><title>geos::io::WKBWriter::writePoint (libgeos-3.8.0.so) (41 samples, 3.57%)</title><rect x="74.9565%" y="212" width="3.5652%" height="15" fill="rgb(210,229,1)"/><text x="75.2065%" y="222.50">geos..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (39 samples, 3.39%)</title><rect x="79.1304%" y="212" width="3.3913%" height="15" fill="rgb(222,148,37)"/><text x="79.3804%" y="222.50">std..</text></g><g><title>GEOSWKBWriter_write_r (libgeos_c.so.1.13.1) (105 samples, 9.13%)</title><rect x="74.0870%" y="196" width="9.1304%" height="15" fill="rgb(234,67,33)"/><text x="74.3370%" y="206.50">GEOSWKBWriter..</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (25 samples, 2.17%)</title><rect x="83.2174%" y="196" width="2.1739%" height="15" fill="rgb(247,98,35)"/><text x="83.4674%" y="206.50">O..</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (23 samples, 2.00%)</title><rect x="83.3913%" y="212" width="2.0000%" height="15" fill="rgb(247,138,52)"/><text x="83.6413%" y="222.50">O..</text></g><g><title>OGRGeometryFactory::createFromGEOS (libgdal.so.26.0.4) (154 samples, 13.39%)</title><rect x="72.6087%" y="180" width="13.3913%" height="15" fill="rgb(213,79,30)"/><text x="72.8587%" y="190.50">OGRGeometryFactory::..</text></g><g><title>OGRGeometry::Centroid (libgdal.so.26.0.4) (507 samples, 44.09%)</title><rect x="43.8261%" y="164" width="44.0870%" height="15" fill="rgb(246,177,23)"/><text x="44.0761%" y="174.50">OGRGeometry::Centroid (libgdal.so.26.0.4)</text></g><g><title>arctern::gis::gdal::Wrapper_OGR_G_Centroid (gis_functions.cpp:194) (513 samples, 44.61%)</title><rect x="43.6522%" y="148" width="44.6087%" height="15" fill="rgb(230,62,27)"/><text x="43.9022%" y="158.50">arctern::gis::gdal::Wrapper_OGR_G_Centroid (gis_functions.cpp:194)</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (22 samples, 1.91%)</title><rect x="89.1304%" y="164" width="1.9130%" height="15" fill="rgb(216,154,8)"/><text x="89.3804%" y="174.50">n..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::to_string&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:917) (19 samples, 1.65%)</title><rect x="89.3913%" y="180" width="1.6522%" height="15" fill="rgb(244,35,45)"/><text x="89.6413%" y="190.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*, void&gt; (basic_string.h:607) (16 samples, 1.39%)</title><rect x="89.6522%" y="196" width="1.3913%" height="15" fill="rgb(251,115,12)"/><text x="89.9022%" y="206.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.h:255) (16 samples, 1.39%)</title><rect x="89.6522%" y="212" width="1.3913%" height="15" fill="rgb(240,54,50)"/><text x="89.9022%" y="222.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (basic_string.h:236) (15 samples, 1.30%)</title><rect x="89.7391%" y="228" width="1.3043%" height="15" fill="rgb(233,84,52)"/><text x="89.9891%" y="238.50"></text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (34 samples, 2.96%)</title><rect x="88.2609%" y="148" width="2.9565%" height="15" fill="rgb(207,117,47)"/><text x="88.5109%" y="158.50">arr..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:56) (16 samples, 1.39%)</title><rect x="91.4783%" y="180" width="1.3913%" height="15" fill="rgb(249,43,39)"/><text x="91.7283%" y="190.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:57) (29 samples, 2.52%)</title><rect x="92.8696%" y="180" width="2.5217%" height="15" fill="rgb(209,38,44)"/><text x="93.1196%" y="190.50">ar..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:73) (67 samples, 5.83%)</title><rect x="91.3913%" y="148" width="5.8261%" height="15" fill="rgb(236,212,23)"/><text x="91.6413%" y="158.50">arrow::..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:69) (67 samples, 5.83%)</title><rect x="91.3913%" y="164" width="5.8261%" height="15" fill="rgb(242,79,21)"/><text x="91.6413%" y="174.50">arrow::..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:64) (15 samples, 1.30%)</title><rect x="95.9130%" y="180" width="1.3043%" height="15" fill="rgb(211,96,35)"/><text x="96.1630%" y="190.50"></text></g><g><title>all (1,150 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(253,215,40)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (1,133 samples, 98.52%)</title><rect x="1.4783%" y="52" width="98.5217%" height="15" fill="rgb(211,81,21)"/><text x="1.7283%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_Centroid (profile_geo.py:162) (1,115 samples, 96.96%)</title><rect x="3.0435%" y="68" width="96.9565%" height="15" fill="rgb(208,190,38)"/><text x="3.2935%" y="78.50">test_ST_Centroid (profile_geo.py:162)</text></g><g><title>ST_Centroid (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6013) (1,114 samples, 96.87%)</title><rect x="3.1304%" y="84" width="96.8696%" height="15" fill="rgb(235,213,38)"/><text x="3.3804%" y="94.50">ST_Centroid (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6013)</text></g><g><title>ST_Centroid (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6034) (1,114 samples, 96.87%)</title><rect x="3.1304%" y="100" width="96.8696%" height="15" fill="rgb(237,122,38)"/><text x="3.3804%" y="110.50">ST_Centroid (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6034)</text></g><g><title>arctern::gis::ST_Centroid (gis_functions.cpp:132) (1,114 samples, 96.87%)</title><rect x="3.1304%" y="116" width="96.8696%" height="15" fill="rgb(244,218,35)"/><text x="3.3804%" y="126.50">arctern::gis::ST_Centroid (gis_functions.cpp:132)</text></g><g><title>arctern::gis::gdal::ST_Centroid (gis_functions.cpp:531) (1,114 samples, 96.87%)</title><rect x="3.1304%" y="132" width="96.8696%" height="15" fill="rgb(240,68,47)"/><text x="3.3804%" y="142.50">arctern::gis::gdal::ST_Centroid (gis_functions.cpp:531)</text></g></svg></svg>