<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (profile_geo.py:15) (6 samples, 1.88%)</title><rect x="0.0000%" y="52" width="1.8750%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="62.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.88%)</title><rect x="0.0000%" y="68" width="1.8750%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.88%)</title><rect x="0.0000%" y="84" width="1.8750%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.88%)</title><rect x="0.0000%" y="100" width="1.8750%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.88%)</title><rect x="0.0000%" y="116" width="1.8750%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.88%)</title><rect x="0.0000%" y="132" width="1.8750%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="142.50">_..</text></g><g><title>&lt;module&gt; (pyarrow/__init__.py:47) (6 samples, 1.88%)</title><rect x="0.0000%" y="148" width="1.8750%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.88%)</title><rect x="0.0000%" y="164" width="1.8750%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.88%)</title><rect x="0.0000%" y="180" width="1.8750%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.88%)</title><rect x="0.0000%" y="196" width="1.8750%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.88%)</title><rect x="0.0000%" y="212" width="1.8750%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.88%)</title><rect x="0.0000%" y="228" width="1.8750%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="238.50">_..</text></g><g><title>&lt;module&gt; (pyarrow/compat.py:24) (6 samples, 1.88%)</title><rect x="0.0000%" y="244" width="1.8750%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="254.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.88%)</title><rect x="0.0000%" y="260" width="1.8750%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="270.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.88%)</title><rect x="0.0000%" y="276" width="1.8750%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="286.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.88%)</title><rect x="0.0000%" y="292" width="1.8750%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="302.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.88%)</title><rect x="0.0000%" y="308" width="1.8750%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="318.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.88%)</title><rect x="0.0000%" y="324" width="1.8750%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="334.50">_..</text></g><g><title>&lt;module&gt; (profile_geo.py:16) (9 samples, 2.81%)</title><rect x="1.8750%" y="52" width="2.8125%" height="15" fill="rgb(221,200,47)"/><text x="2.1250%" y="62.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 2.81%)</title><rect x="1.8750%" y="68" width="2.8125%" height="15" fill="rgb(226,26,5)"/><text x="2.1250%" y="78.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 2.81%)</title><rect x="1.8750%" y="84" width="2.8125%" height="15" fill="rgb(249,33,26)"/><text x="2.1250%" y="94.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 2.81%)</title><rect x="1.8750%" y="100" width="2.8125%" height="15" fill="rgb(235,183,28)"/><text x="2.1250%" y="110.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 2.81%)</title><rect x="1.8750%" y="116" width="2.8125%" height="15" fill="rgb(221,5,38)"/><text x="2.1250%" y="126.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 2.81%)</title><rect x="1.8750%" y="132" width="2.8125%" height="15" fill="rgb(247,18,42)"/><text x="2.1250%" y="142.50">_c..</text></g><g><title>&lt;module&gt; (pandas/__init__.py:54) (6 samples, 1.88%)</title><rect x="2.8125%" y="148" width="1.8750%" height="15" fill="rgb(241,131,45)"/><text x="3.0625%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.88%)</title><rect x="2.8125%" y="164" width="1.8750%" height="15" fill="rgb(249,31,29)"/><text x="3.0625%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.88%)</title><rect x="2.8125%" y="180" width="1.8750%" height="15" fill="rgb(225,111,53)"/><text x="3.0625%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.88%)</title><rect x="2.8125%" y="196" width="1.8750%" height="15" fill="rgb(238,160,17)"/><text x="3.0625%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.88%)</title><rect x="2.8125%" y="212" width="1.8750%" height="15" fill="rgb(214,148,48)"/><text x="3.0625%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.88%)</title><rect x="2.8125%" y="228" width="1.8750%" height="15" fill="rgb(232,36,49)"/><text x="3.0625%" y="238.50">_..</text></g><g><title>&lt;module&gt; (pandas/core/api.py:29) (4 samples, 1.25%)</title><rect x="3.4375%" y="244" width="1.2500%" height="15" fill="rgb(209,103,24)"/><text x="3.6875%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="3.4375%" y="260" width="1.2500%" height="15" fill="rgb(229,88,8)"/><text x="3.6875%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="3.4375%" y="276" width="1.2500%" height="15" fill="rgb(213,181,19)"/><text x="3.6875%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="3.4375%" y="292" width="1.2500%" height="15" fill="rgb(254,191,54)"/><text x="3.6875%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="3.4375%" y="308" width="1.2500%" height="15" fill="rgb(241,83,37)"/><text x="3.6875%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="3.4375%" y="324" width="1.2500%" height="15" fill="rgb(233,36,39)"/><text x="3.6875%" y="334.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (4 samples, 1.25%)</title><rect x="3.4375%" y="340" width="1.2500%" height="15" fill="rgb(226,3,54)"/><text x="3.6875%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="3.4375%" y="356" width="1.2500%" height="15" fill="rgb(245,192,40)"/><text x="3.6875%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="3.4375%" y="372" width="1.2500%" height="15" fill="rgb(238,167,29)"/><text x="3.6875%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="3.4375%" y="388" width="1.2500%" height="15" fill="rgb(232,182,51)"/><text x="3.6875%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="3.4375%" y="404" width="1.2500%" height="15" fill="rgb(231,60,39)"/><text x="3.6875%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="3.4375%" y="420" width="1.2500%" height="15" fill="rgb(208,69,12)"/><text x="3.6875%" y="430.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.25%)</title><rect x="6.5625%" y="180" width="1.2500%" height="15" fill="rgb(235,93,37)"/><text x="6.8125%" y="190.50"></text></g><g><title>discover_dimensions (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.25%)</title><rect x="6.5625%" y="196" width="1.2500%" height="15" fill="rgb(213,116,39)"/><text x="6.8125%" y="206.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:440) (6 samples, 1.88%)</title><rect x="6.5625%" y="100" width="1.8750%" height="15" fill="rgb(222,207,29)"/><text x="6.8125%" y="110.50">s..</text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:74) (6 samples, 1.88%)</title><rect x="6.5625%" y="116" width="1.8750%" height="15" fill="rgb(206,96,30)"/><text x="6.8125%" y="126.50">m..</text></g><g><title>construct_1d_object_array_from_listlike (pandas/core/dtypes/cast.py:1488) (6 samples, 1.88%)</title><rect x="6.5625%" y="132" width="1.8750%" height="15" fill="rgb(218,138,4)"/><text x="6.8125%" y="142.50">c..</text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.88%)</title><rect x="6.5625%" y="148" width="1.8750%" height="15" fill="rgb(250,191,14)"/><text x="6.8125%" y="158.50">a..</text></g><g><title>PyArray_CopyObject (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.88%)</title><rect x="6.5625%" y="164" width="1.8750%" height="15" fill="rgb(239,60,40)"/><text x="6.8125%" y="174.50">P..</text></g><g><title>test_ST_GeometryType (profile_geo.py:67) (10 samples, 3.12%)</title><rect x="6.2500%" y="68" width="3.1250%" height="15" fill="rgb(206,27,48)"/><text x="6.5000%" y="78.50">tes..</text></g><g><title>__init__ (pandas/core/series.py:305) (9 samples, 2.81%)</title><rect x="6.5625%" y="84" width="2.8125%" height="15" fill="rgb(225,35,8)"/><text x="6.8125%" y="94.50">__..</text></g><g><title>0x7f36c6291f6b (libc-2.27.so) (4 samples, 1.25%)</title><rect x="12.5000%" y="180" width="1.2500%" height="15" fill="rgb(250,213,24)"/><text x="12.7500%" y="190.50"></text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (12 samples, 3.75%)</title><rect x="15.6250%" y="196" width="3.7500%" height="15" fill="rgb(247,123,22)"/><text x="15.8750%" y="206.50">OGRG..</text></g><g><title>0x7f36c614da8a (libc-2.27.so) (11 samples, 3.44%)</title><rect x="37.5000%" y="244" width="3.4375%" height="15" fill="rgb(231,138,38)"/><text x="37.7500%" y="254.50">0x7..</text></g><g><title>0x7f36c614eb38 (libc-2.27.so) (8 samples, 2.50%)</title><rect x="44.0625%" y="244" width="2.5000%" height="15" fill="rgb(231,145,46)"/><text x="44.3125%" y="254.50">0x..</text></g><g><title>0x7f36c614f7b3 (libc-2.27.so) (5 samples, 1.56%)</title><rect x="49.3750%" y="244" width="1.5625%" height="15" fill="rgb(251,118,11)"/><text x="49.6250%" y="254.50"></text></g><g><title>0x7f36c614d6f6 (libc-2.27.so) (5 samples, 1.56%)</title><rect x="55.9375%" y="260" width="1.5625%" height="15" fill="rgb(217,147,25)"/><text x="56.1875%" y="270.50"></text></g><g><title>0x7f36c614f80a (libc-2.27.so) (20 samples, 6.25%)</title><rect x="51.8750%" y="244" width="6.2500%" height="15" fill="rgb(247,81,37)"/><text x="52.1250%" y="254.50">0x7f36c6..</text></g><g><title>CPLReplacePointByLocalePoint (libgdal.so.26.0.4) (24 samples, 7.50%)</title><rect x="60.6250%" y="244" width="7.5000%" height="15" fill="rgb(209,12,38)"/><text x="60.8750%" y="254.50">CPLReplace..</text></g><g><title>localeconv (libc-2.27.so) (22 samples, 6.88%)</title><rect x="61.2500%" y="260" width="6.8750%" height="15" fill="rgb(227,1,9)"/><text x="61.5000%" y="270.50">localecon..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (136 samples, 42.50%)</title><rect x="26.2500%" y="228" width="42.5000%" height="15" fill="rgb(248,47,43)"/><text x="26.5000%" y="238.50">CPLStrtodDelim (libgdal.so.26.0.4)</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (156 samples, 48.75%)</title><rect x="22.8125%" y="212" width="48.7500%" height="15" fill="rgb(221,10,30)"/><text x="23.0625%" y="222.50">OGRWktReadPointsM (libgdal.so.26.0.4)</text></g><g><title>OGRWktReadToken (libgdal.so.26.0.4) (9 samples, 2.81%)</title><rect x="68.7500%" y="228" width="2.8125%" height="15" fill="rgb(210,229,1)"/><text x="69.0000%" y="238.50">OG..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (168 samples, 52.50%)</title><rect x="19.3750%" y="196" width="52.5000%" height="15" fill="rgb(222,148,37)"/><text x="19.6250%" y="206.50">OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4)</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (183 samples, 57.19%)</title><rect x="15.3125%" y="180" width="57.1875%" height="15" fill="rgb(234,67,33)"/><text x="15.5625%" y="190.50">OGRPolygon::importFromWkt (libgdal.so.26.0.4)</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (201 samples, 62.81%)</title><rect x="10.3125%" y="148" width="62.8125%" height="15" fill="rgb(247,98,35)"/><text x="10.5625%" y="158.50">OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4)</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (200 samples, 62.50%)</title><rect x="10.6250%" y="164" width="62.5000%" height="15" fill="rgb(247,138,52)"/><text x="10.8750%" y="174.50">OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4)</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.tcc:232) (6 samples, 1.88%)</title><rect x="75.0000%" y="164" width="1.8750%" height="15" fill="rgb(213,79,30)"/><text x="75.2500%" y="174.50">s..</text></g><g><title>std::char_traits&lt;char&gt;::copy (char_traits.h:366) (4 samples, 1.25%)</title><rect x="75.6250%" y="180" width="1.2500%" height="15" fill="rgb(246,177,23)"/><text x="75.8750%" y="190.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::insert (basic_string.h:1708) (5 samples, 1.56%)</title><rect x="79.0625%" y="180" width="1.5625%" height="15" fill="rgb(230,62,27)"/><text x="79.3125%" y="190.50"></text></g><g><title>arctern::gis::gdal::Wrapper_OGR_G_GetGeometryName[abi:cxx11] (gis_functions.cpp:245) (23 samples, 7.19%)</title><rect x="74.6875%" y="148" width="7.1875%" height="15" fill="rgb(216,154,8)"/><text x="74.9375%" y="158.50">arctern::g..</text></g><g><title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (basic_string.h:5979) (13 samples, 4.06%)</title><rect x="77.8125%" y="164" width="4.0625%" height="15" fill="rgb(244,35,45)"/><text x="78.0625%" y="174.50">std:..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.tcc:219) (5 samples, 1.56%)</title><rect x="84.6875%" y="244" width="1.5625%" height="15" fill="rgb(251,115,12)"/><text x="84.9375%" y="254.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (basic_string.h:236) (8 samples, 2.50%)</title><rect x="84.3750%" y="228" width="2.5000%" height="15" fill="rgb(240,54,50)"/><text x="84.6250%" y="238.50">st..</text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (17 samples, 5.31%)</title><rect x="81.8750%" y="148" width="5.3125%" height="15" fill="rgb(233,84,52)"/><text x="82.1250%" y="158.50">arrow::..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (11 samples, 3.44%)</title><rect x="83.7500%" y="164" width="3.4375%" height="15" fill="rgb(207,117,47)"/><text x="84.0000%" y="174.50">non..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::to_string&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:917) (10 samples, 3.12%)</title><rect x="84.0625%" y="180" width="3.1250%" height="15" fill="rgb(249,43,39)"/><text x="84.3125%" y="190.50">non..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*, void&gt; (basic_string.h:607) (10 samples, 3.12%)</title><rect x="84.0625%" y="196" width="3.1250%" height="15" fill="rgb(209,38,44)"/><text x="84.3125%" y="206.50">std..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.h:255) (9 samples, 2.81%)</title><rect x="84.3750%" y="212" width="2.8125%" height="15" fill="rgb(236,212,23)"/><text x="84.6250%" y="222.50">st..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:56) (5 samples, 1.56%)</title><rect x="87.8125%" y="180" width="1.5625%" height="15" fill="rgb(242,79,21)"/><text x="88.0625%" y="190.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:57) (5 samples, 1.56%)</title><rect x="89.3750%" y="180" width="1.5625%" height="15" fill="rgb(211,96,35)"/><text x="89.6250%" y="190.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:60) (6 samples, 1.88%)</title><rect x="90.9375%" y="180" width="1.8750%" height="15" fill="rgb(253,215,40)"/><text x="91.1875%" y="190.50">a..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:73) (22 samples, 6.88%)</title><rect x="87.8125%" y="148" width="6.8750%" height="15" fill="rgb(211,81,21)"/><text x="88.0625%" y="158.50">arrow::Ba..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:69) (22 samples, 6.88%)</title><rect x="87.8125%" y="164" width="6.8750%" height="15" fill="rgb(208,190,38)"/><text x="88.0625%" y="174.50">arrow::Ba..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:64) (6 samples, 1.88%)</title><rect x="92.8125%" y="180" width="1.8750%" height="15" fill="rgb(235,213,38)"/><text x="93.0625%" y="190.50">a..</text></g><g><title>cfree (libc-2.27.so) (4 samples, 1.25%)</title><rect x="94.6875%" y="148" width="1.2500%" height="15" fill="rgb(237,122,38)"/><text x="94.9375%" y="158.50"></text></g><g><title>ST_GeometryType (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5045) (280 samples, 87.50%)</title><rect x="9.3750%" y="84" width="87.5000%" height="15" fill="rgb(244,218,35)"/><text x="9.6250%" y="94.50">ST_GeometryType (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5045)</text></g><g><title>ST_GeometryType (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5066) (280 samples, 87.50%)</title><rect x="9.3750%" y="100" width="87.5000%" height="15" fill="rgb(240,68,47)"/><text x="9.6250%" y="110.50">ST_GeometryType (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5066)</text></g><g><title>arctern::gis::ST_GeometryType (gis_functions.cpp:75) (280 samples, 87.50%)</title><rect x="9.3750%" y="116" width="87.5000%" height="15" fill="rgb(210,16,53)"/><text x="9.6250%" y="126.50">arctern::gis::ST_GeometryType (gis_functions.cpp:75)</text></g><g><title>arctern::gis::gdal::ST_GeometryType (gis_functions.cpp:346) (280 samples, 87.50%)</title><rect x="9.3750%" y="132" width="87.5000%" height="15" fill="rgb(235,124,12)"/><text x="9.6250%" y="142.50">arctern::gis::gdal::ST_GeometryType (gis_functions.cpp:346)</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (8 samples, 2.50%)</title><rect x="97.1875%" y="212" width="2.5000%" height="15" fill="rgb(224,169,11)"/><text x="97.4375%" y="222.50">ar..</text></g><g><title>memcpy (libc-2.27.so) (4 samples, 1.25%)</title><rect x="98.4375%" y="228" width="1.2500%" height="15" fill="rgb(250,166,2)"/><text x="98.6875%" y="238.50"></text></g><g><title>all (320 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (300 samples, 93.75%)</title><rect x="6.2500%" y="52" width="93.7500%" height="15" fill="rgb(230,116,27)"/><text x="6.5000%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_GeometryType (profile_geo.py:68) (290 samples, 90.62%)</title><rect x="9.3750%" y="68" width="90.6250%" height="15" fill="rgb(228,99,48)"/><text x="9.6250%" y="78.50">test_ST_GeometryType (profile_geo.py:68)</text></g><g><title>array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (10 samples, 3.12%)</title><rect x="96.8750%" y="84" width="3.1250%" height="15" fill="rgb(253,11,6)"/><text x="97.1250%" y="94.50">arr..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (10 samples, 3.12%)</title><rect x="96.8750%" y="100" width="3.1250%" height="15" fill="rgb(247,143,39)"/><text x="97.1250%" y="110.50">lib..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (10 samples, 3.12%)</title><rect x="96.8750%" y="116" width="3.1250%" height="15" fill="rgb(236,97,10)"/><text x="97.1250%" y="126.50">arr..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (10 samples, 3.12%)</title><rect x="96.8750%" y="132" width="3.1250%" height="15" fill="rgb(233,208,19)"/><text x="97.1250%" y="142.50">arr..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (10 samples, 3.12%)</title><rect x="96.8750%" y="148" width="3.1250%" height="15" fill="rgb(216,164,2)"/><text x="97.1250%" y="158.50">arr..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (10 samples, 3.12%)</title><rect x="96.8750%" y="164" width="3.1250%" height="15" fill="rgb(220,129,5)"/><text x="97.1250%" y="174.50">arr..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (10 samples, 3.12%)</title><rect x="96.8750%" y="180" width="3.1250%" height="15" fill="rgb(242,17,10)"/><text x="97.1250%" y="190.50">arr..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (10 samples, 3.12%)</title><rect x="96.8750%" y="196" width="3.1250%" height="15" fill="rgb(242,107,0)"/><text x="97.1250%" y="206.50">arr..</text></g></svg></svg>