<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180"><g><title>geos::operation::relate::EdgeEndBundle::~EdgeEndBundle (libgeos-3.8.0.so) (49 samples, 1.38%)</title><rect x="3.5413%" y="308" width="1.3772%" height="15" fill="rgb(227,0,7)"/><text x="3.7913%" y="318.50"></text></g><g><title>geos::operation::relate::EdgeEndBundleStar::~EdgeEndBundleStar (libgeos-3.8.0.so) (82 samples, 2.30%)</title><rect x="2.7544%" y="292" width="2.3047%" height="15" fill="rgb(217,0,24)"/><text x="3.0044%" y="302.50">g..</text></g><g><title>geos::operation::relate::EdgeEndBundleStar::~EdgeEndBundleStar (libgeos-3.8.0.so) (105 samples, 2.95%)</title><rect x="2.7263%" y="276" width="2.9511%" height="15" fill="rgb(221,193,54)"/><text x="2.9763%" y="286.50">geo..</text></g><g><title>geos::operation::relate::RelateNode::~RelateNode (libgeos-3.8.0.so) (112 samples, 3.15%)</title><rect x="2.5576%" y="244" width="3.1478%" height="15" fill="rgb(248,212,6)"/><text x="2.8076%" y="254.50">geo..</text></g><g><title>geos::geomgraph::Node::~Node (libgeos-3.8.0.so) (111 samples, 3.12%)</title><rect x="2.5857%" y="260" width="3.1197%" height="15" fill="rgb(208,68,35)"/><text x="2.8357%" y="270.50">geo..</text></g><g><title>geos::geomgraph::NodeMap::~NodeMap (libgeos-3.8.0.so) (117 samples, 3.29%)</title><rect x="2.4452%" y="228" width="3.2884%" height="15" fill="rgb(232,128,0)"/><text x="2.6952%" y="238.50">geo..</text></g><g><title>geos::geomgraph::PlanarGraph::~PlanarGraph (libgeos-3.8.0.so) (57 samples, 1.60%)</title><rect x="6.4081%" y="244" width="1.6020%" height="15" fill="rgb(207,160,47)"/><text x="6.6581%" y="254.50"></text></g><g><title>geos::operation::GeometryGraphOperation::~GeometryGraphOperation (libgeos-3.8.0.so) (86 samples, 2.42%)</title><rect x="5.7336%" y="228" width="2.4171%" height="15" fill="rgb(228,23,34)"/><text x="5.9836%" y="238.50">ge..</text></g><g><title>geos::operation::valid::RepeatedPointRemover::removeRepeatedPoints (libgeos-3.8.0.so) (51 samples, 1.43%)</title><rect x="11.8606%" y="324" width="1.4334%" height="15" fill="rgb(218,30,26)"/><text x="12.1106%" y="334.50"></text></g><g><title>geos::geomgraph::GeometryGraph::add (libgeos-3.8.0.so) (177 samples, 4.97%)</title><rect x="8.6003%" y="276" width="4.9747%" height="15" fill="rgb(220,122,19)"/><text x="8.8503%" y="286.50">geos::..</text></g><g><title>geos::geomgraph::GeometryGraph::addPolygon (libgeos-3.8.0.so) (149 samples, 4.19%)</title><rect x="9.3873%" y="292" width="4.1877%" height="15" fill="rgb(250,228,42)"/><text x="9.6373%" y="302.50">geos:..</text></g><g><title>geos::geomgraph::GeometryGraph::addPolygonRing (libgeos-3.8.0.so) (139 samples, 3.91%)</title><rect x="9.6684%" y="308" width="3.9067%" height="15" fill="rgb(240,193,28)"/><text x="9.9184%" y="318.50">geos..</text></g><g><title>geos::geomgraph::GeometryGraph::GeometryGraph (libgeos-3.8.0.so) (208 samples, 5.85%)</title><rect x="8.4036%" y="260" width="5.8460%" height="15" fill="rgb(216,20,37)"/><text x="8.6536%" y="270.50">geos::g..</text></g><g><title>geos::operation::GeometryGraphOperation::GeometryGraphOperation (libgeos-3.8.0.so) (220 samples, 6.18%)</title><rect x="8.1788%" y="244" width="6.1832%" height="15" fill="rgb(206,188,39)"/><text x="8.4288%" y="254.50">geos::op..</text></g><g><title>geos::operation::relate::RelateOp::RelateOp (libgeos-3.8.0.so) (232 samples, 6.52%)</title><rect x="8.1506%" y="228" width="6.5205%" height="15" fill="rgb(217,207,13)"/><text x="8.4006%" y="238.50">geos::ope..</text></g><g><title>geos::algorithm::LineIntersector::computeIntersection (libgeos-3.8.0.so) (63 samples, 1.77%)</title><rect x="19.3648%" y="356" width="1.7707%" height="15" fill="rgb(231,73,38)"/><text x="19.6148%" y="366.50">g..</text></g><g><title>geos::algorithm::LineIntersector::computeIntersect (libgeos-3.8.0.so) (53 samples, 1.49%)</title><rect x="19.6459%" y="372" width="1.4896%" height="15" fill="rgb(225,20,46)"/><text x="19.8959%" y="382.50"></text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (170 samples, 4.78%)</title><rect x="17.9876%" y="324" width="4.7780%" height="15" fill="rgb(210,31,41)"/><text x="18.2376%" y="334.50">geos::..</text></g><g><title>geos::geomgraph::index::SegmentIntersector::addIntersections (libgeos-3.8.0.so) (136 samples, 3.82%)</title><rect x="18.9432%" y="340" width="3.8224%" height="15" fill="rgb(221,200,47)"/><text x="19.1932%" y="350.50">geos..</text></g><g><title>geos::geomgraph::Edge::addIntersections (libgeos-3.8.0.so) (54 samples, 1.52%)</title><rect x="21.2479%" y="356" width="1.5177%" height="15" fill="rgb(226,26,5)"/><text x="21.4979%" y="366.50"></text></g><g><title>geos::algorithm::CGAlgorithmsDD::orientationIndex (libgeos-3.8.0.so) (49 samples, 1.38%)</title><rect x="24.0585%" y="372" width="1.3772%" height="15" fill="rgb(249,33,26)"/><text x="24.3085%" y="382.50"></text></g><g><title>geos::algorithm::CGAlgorithmsDD::orientationIndexFilter (libgeos-3.8.0.so) (40 samples, 1.12%)</title><rect x="24.3114%" y="388" width="1.1242%" height="15" fill="rgb(235,183,28)"/><text x="24.5614%" y="398.50"></text></g><g><title>geos::algorithm::LineIntersector::computeIntersection (libgeos-3.8.0.so) (100 samples, 2.81%)</title><rect x="23.0748%" y="340" width="2.8106%" height="15" fill="rgb(221,5,38)"/><text x="23.3248%" y="350.50">ge..</text></g><g><title>geos::algorithm::LineIntersector::computeIntersect (libgeos-3.8.0.so) (78 samples, 2.19%)</title><rect x="23.6931%" y="356" width="2.1922%" height="15" fill="rgb(247,18,42)"/><text x="23.9431%" y="366.50">g..</text></g><g><title>geos::geomgraph::Edge::addIntersection (libgeos-3.8.0.so) (40 samples, 1.12%)</title><rect x="26.2788%" y="356" width="1.1242%" height="15" fill="rgb(241,131,45)"/><text x="26.5288%" y="366.50"></text></g><g><title>geos::geomgraph::Edge::addIntersections (libgeos-3.8.0.so) (89 samples, 2.50%)</title><rect x="25.9978%" y="340" width="2.5014%" height="15" fill="rgb(249,31,29)"/><text x="26.2478%" y="350.50">ge..</text></g><g><title>geos::geomgraph::EdgeIntersectionList::add (libgeos-3.8.0.so) (39 samples, 1.10%)</title><rect x="27.4030%" y="356" width="1.0961%" height="15" fill="rgb(225,111,53)"/><text x="27.6530%" y="366.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::processOverlaps (libgeos-3.8.0.so) (391 samples, 10.99%)</title><rect x="17.5379%" y="292" width="10.9893%" height="15" fill="rgb(238,160,17)"/><text x="17.7879%" y="302.50">geos::geomgraph:..</text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (380 samples, 10.68%)</title><rect x="17.8471%" y="308" width="10.6802%" height="15" fill="rgb(214,148,48)"/><text x="18.0971%" y="318.50">geos::geomgraph:..</text></g><g><title>geos::geomgraph::index::SegmentIntersector::addIntersections (libgeos-3.8.0.so) (205 samples, 5.76%)</title><rect x="22.7656%" y="324" width="5.7617%" height="15" fill="rgb(232,36,49)"/><text x="23.0156%" y="334.50">geos::g..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (455 samples, 12.79%)</title><rect x="15.8516%" y="276" width="12.7881%" height="15" fill="rgb(209,103,24)"/><text x="16.1016%" y="286.50">geos::geomgraph::in..</text></g><g><title>geos::geomgraph::GeometryGraph::computeEdgeIntersections (libgeos-3.8.0.so) (498 samples, 14.00%)</title><rect x="15.0646%" y="260" width="13.9966%" height="15" fill="rgb(229,88,8)"/><text x="15.3146%" y="270.50">geos::geomgraph::Geom..</text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::MonotoneChainEdge (libgeos-3.8.0.so) (68 samples, 1.91%)</title><rect x="30.8038%" y="356" width="1.9112%" height="15" fill="rgb(213,181,19)"/><text x="31.0538%" y="366.50">g..</text></g><g><title>geos::geomgraph::index::MonotoneChainIndexer::getChainStartIndices (libgeos-3.8.0.so) (66 samples, 1.85%)</title><rect x="30.8600%" y="372" width="1.8550%" height="15" fill="rgb(254,191,54)"/><text x="31.1100%" y="382.50">g..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_realloc_insert&lt;unsigned long const&amp;&gt; (libgdal.so.26.0.4) (37 samples, 1.04%)</title><rect x="31.6751%" y="388" width="1.0399%" height="15" fill="rgb(241,83,37)"/><text x="31.9251%" y="398.50"></text></g><g><title>geos::geomgraph::Edge::getMonotoneChainEdge (libgeos-3.8.0.so) (73 samples, 2.05%)</title><rect x="30.7757%" y="340" width="2.0517%" height="15" fill="rgb(233,36,39)"/><text x="31.0257%" y="350.50">g..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::add (libgeos-3.8.0.so) (113 samples, 3.18%)</title><rect x="30.3541%" y="308" width="3.1759%" height="15" fill="rgb(226,3,54)"/><text x="30.6041%" y="318.50">geo..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::add (libgeos-3.8.0.so) (112 samples, 3.15%)</title><rect x="30.3822%" y="324" width="3.1478%" height="15" fill="rgb(245,192,40)"/><text x="30.6322%" y="334.50">geo..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::prepareEvents (libgeos-3.8.0.so) (44 samples, 1.24%)</title><rect x="33.5301%" y="308" width="1.2366%" height="15" fill="rgb(238,167,29)"/><text x="33.7801%" y="318.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (171 samples, 4.81%)</title><rect x="30.1293%" y="292" width="4.8061%" height="15" fill="rgb(232,182,51)"/><text x="30.3793%" y="302.50">geos::..</text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (231 samples, 6.49%)</title><rect x="29.0613%" y="260" width="6.4924%" height="15" fill="rgb(231,60,39)"/><text x="29.3113%" y="270.50">geos::geo..</text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (230 samples, 6.46%)</title><rect x="29.0894%" y="276" width="6.4643%" height="15" fill="rgb(208,69,12)"/><text x="29.3394%" y="286.50">geos::ge..</text></g><g><title>operator new (new_op.cc:50) (37 samples, 1.04%)</title><rect x="37.0714%" y="308" width="1.0399%" height="15" fill="rgb(235,93,37)"/><text x="37.3214%" y="318.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (37 samples, 1.04%)</title><rect x="37.0714%" y="324" width="1.0399%" height="15" fill="rgb(213,116,39)"/><text x="37.3214%" y="334.50"></text></g><g><title>geos::operation::relate::EdgeEndBuilder::createEdgeEndForNext (libgeos-3.8.0.so) (126 samples, 3.54%)</title><rect x="36.0877%" y="292" width="3.5413%" height="15" fill="rgb(222,207,29)"/><text x="36.3377%" y="302.50">geos..</text></g><g><title>std::vector&lt;geos::geomgraph::EdgeEnd*, std::allocator&lt;geos::geomgraph::EdgeEnd*&gt; &gt;::_M_realloc_insert&lt;geos::geomgraph::EdgeEnd* const&amp;&gt; (libgeos-3.8.0.so) (54 samples, 1.52%)</title><rect x="38.1113%" y="308" width="1.5177%" height="15" fill="rgb(206,96,30)"/><text x="38.3613%" y="318.50"></text></g><g><title>geos::operation::relate::EdgeEndBuilder::createEdgeEndForPrev (libgeos-3.8.0.so) (83 samples, 2.33%)</title><rect x="39.6290%" y="292" width="2.3328%" height="15" fill="rgb(218,138,4)"/><text x="39.8790%" y="302.50">g..</text></g><g><title>geos::operation::relate::EdgeEndBuilder::computeEdgeEnds (libgeos-3.8.0.so) (240 samples, 6.75%)</title><rect x="35.5537%" y="260" width="6.7454%" height="15" fill="rgb(250,191,14)"/><text x="35.8037%" y="270.50">geos::ope..</text></g><g><title>geos::operation::relate::EdgeEndBuilder::computeEdgeEnds (libgeos-3.8.0.so) (238 samples, 6.69%)</title><rect x="35.6099%" y="276" width="6.6892%" height="15" fill="rgb(239,60,40)"/><text x="35.8599%" y="286.50">geos::ope..</text></g><g><title>geos::operation::relate::RelateNodeFactory::createNode (libgeos-3.8.0.so) (44 samples, 1.24%)</title><rect x="43.3952%" y="292" width="1.2366%" height="15" fill="rgb(206,27,48)"/><text x="43.6452%" y="302.50"></text></g><g><title>geos::geomgraph::NodeMap::addNode (libgeos-3.8.0.so) (94 samples, 2.64%)</title><rect x="42.6644%" y="276" width="2.6419%" height="15" fill="rgb(225,35,8)"/><text x="42.9144%" y="286.50">ge..</text></g><g><title>geos::operation::relate::RelateComputer::computeIntersectionNodes (libgeos-3.8.0.so) (148 samples, 4.16%)</title><rect x="42.2990%" y="260" width="4.1596%" height="15" fill="rgb(250,213,24)"/><text x="42.5490%" y="270.50">geos:..</text></g><g><title>operator new (new_op.cc:50) (41 samples, 1.15%)</title><rect x="50.1686%" y="356" width="1.1523%" height="15" fill="rgb(247,123,22)"/><text x="50.4186%" y="366.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (41 samples, 1.15%)</title><rect x="50.1686%" y="372" width="1.1523%" height="15" fill="rgb(231,138,38)"/><text x="50.4186%" y="382.50"></text></g><g><title>geos::operation::relate::EdgeEndBundle::EdgeEndBundle (libgeos-3.8.0.so) (94 samples, 2.64%)</title><rect x="48.7071%" y="308" width="2.6419%" height="15" fill="rgb(231,145,46)"/><text x="48.9571%" y="318.50">ge..</text></g><g><title>geos::operation::relate::EdgeEndBundle::insert (libgeos-3.8.0.so) (56 samples, 1.57%)</title><rect x="49.7752%" y="324" width="1.5739%" height="15" fill="rgb(251,118,11)"/><text x="50.0252%" y="334.50"></text></g><g><title>std::vector&lt;geos::geomgraph::EdgeEnd*, std::allocator&lt;geos::geomgraph::EdgeEnd*&gt; &gt;::_M_realloc_insert&lt;geos::geomgraph::EdgeEnd* const&amp;&gt; (libgeos-3.8.0.so) (52 samples, 1.46%)</title><rect x="49.8876%" y="340" width="1.4615%" height="15" fill="rgb(217,147,25)"/><text x="50.1376%" y="350.50"></text></g><g><title>operator new (new_op.cc:50) (40 samples, 1.12%)</title><rect x="53.4570%" y="324" width="1.1242%" height="15" fill="rgb(247,81,37)"/><text x="53.7070%" y="334.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (40 samples, 1.12%)</title><rect x="53.4570%" y="340" width="1.1242%" height="15" fill="rgb(209,12,38)"/><text x="53.7070%" y="350.50"></text></g><g><title>std::_Rb_tree&lt;geos::geomgraph::EdgeEnd*, geos::geomgraph::EdgeEnd*, std::_Identity&lt;geos::geomgraph::EdgeEnd*&gt;, geos::geomgraph::EdgeEndLT, std::allocator&lt;geos::geomgraph::EdgeEnd*&gt; &gt;::_M_insert_unique&lt;geos::geomgraph::EdgeEnd* const&amp;&gt; (libgeos-3.8.0.so) (73 samples, 2.05%)</title><rect x="52.6419%" y="308" width="2.0517%" height="15" fill="rgb(227,1,9)"/><text x="52.8919%" y="318.50">s..</text></g><g><title>geos::geomgraph::Node::add (libgeos-3.8.0.so) (305 samples, 8.57%)</title><rect x="47.3581%" y="276" width="8.5722%" height="15" fill="rgb(248,47,43)"/><text x="47.6081%" y="286.50">geos::geomgr..</text></g><g><title>geos::operation::relate::EdgeEndBundleStar::insert (libgeos-3.8.0.so) (267 samples, 7.50%)</title><rect x="48.4261%" y="292" width="7.5042%" height="15" fill="rgb(221,10,30)"/><text x="48.6761%" y="302.50">geos::oper..</text></g><g><title>std::_Rb_tree&lt;geos::geomgraph::EdgeEnd*, geos::geomgraph::EdgeEnd*, std::_Identity&lt;geos::geomgraph::EdgeEnd*&gt;, geos::geomgraph::EdgeEndLT, std::allocator&lt;geos::geomgraph::EdgeEnd*&gt; &gt;::find (libgeos-3.8.0.so) (44 samples, 1.24%)</title><rect x="54.6936%" y="308" width="1.2366%" height="15" fill="rgb(210,229,1)"/><text x="54.9436%" y="318.50"></text></g><g><title>geos::operation::relate::RelateComputer::insertEdgeEnds (libgeos-3.8.0.so) (354 samples, 9.95%)</title><rect x="47.3300%" y="260" width="9.9494%" height="15" fill="rgb(222,148,37)"/><text x="47.5800%" y="270.50">geos::operatio..</text></g><g><title>geos::geomgraph::NodeMap::add (libgeos-3.8.0.so) (48 samples, 1.35%)</title><rect x="55.9303%" y="276" width="1.3491%" height="15" fill="rgb(234,67,33)"/><text x="56.1803%" y="286.50"></text></g><g><title>geos::geomgraph::NodeMap::addNode (libgeos-3.8.0.so) (43 samples, 1.21%)</title><rect x="56.0708%" y="292" width="1.2085%" height="15" fill="rgb(247,98,35)"/><text x="56.3208%" y="302.50"></text></g><g><title>geos::geomgraph::NodeMap::find (libgeos-3.8.0.so) (36 samples, 1.01%)</title><rect x="56.2676%" y="308" width="1.0118%" height="15" fill="rgb(247,138,52)"/><text x="56.5176%" y="318.50"></text></g><g><title>geos::operation::relate::EdgeEndBundle::computeLabel (libgeos-3.8.0.so) (44 samples, 1.24%)</title><rect x="59.0500%" y="308" width="1.2366%" height="15" fill="rgb(213,79,30)"/><text x="59.3000%" y="318.50"></text></g><g><title>geos::geomgraph::EdgeEndStar::computeEdgeEndLabels (libgeos-3.8.0.so) (62 samples, 1.74%)</title><rect x="58.8252%" y="292" width="1.7426%" height="15" fill="rgb(246,177,23)"/><text x="59.0752%" y="302.50"></text></g><g><title>geos::geomgraph::EdgeEndStar::computeLabelling (libgeos-3.8.0.so) (119 samples, 3.34%)</title><rect x="58.0101%" y="276" width="3.3446%" height="15" fill="rgb(230,62,27)"/><text x="58.2601%" y="286.50">geo..</text></g><g><title>geos::operation::relate::RelateComputer::labelNodeEdges (libgeos-3.8.0.so) (123 samples, 3.46%)</title><rect x="57.9820%" y="260" width="3.4570%" height="15" fill="rgb(216,154,8)"/><text x="58.2320%" y="270.50">geo..</text></g><g><title>geos::operation::relate::RelateOp::getIntersectionMatrix (libgeos-3.8.0.so) (1,698 samples, 47.72%)</title><rect x="14.6712%" y="228" width="47.7234%" height="15" fill="rgb(244,35,45)"/><text x="14.9212%" y="238.50">geos::operation::relate::RelateOp::getIntersectionMatrix (libgeos-3.8.0.so)</text></g><g><title>geos::operation::relate::RelateComputer::computeIM (libgeos-3.8.0.so) (1,698 samples, 47.72%)</title><rect x="14.6712%" y="244" width="47.7234%" height="15" fill="rgb(251,115,12)"/><text x="14.9212%" y="254.50">geos::operation::relate::RelateComputer::computeIM (libgeos-3.8.0.so)</text></g><g><title>geos::geom::Geometry::relate (libgeos-3.8.0.so) (2,152 samples, 60.48%)</title><rect x="2.1641%" y="196" width="60.4834%" height="15" fill="rgb(240,54,50)"/><text x="2.4141%" y="206.50">geos::geom::Geometry::relate (libgeos-3.8.0.so)</text></g><g><title>geos::operation::relate::RelateOp::relate (libgeos-3.8.0.so) (2,150 samples, 60.43%)</title><rect x="2.2203%" y="212" width="60.4272%" height="15" fill="rgb(233,84,52)"/><text x="2.4703%" y="222.50">geos::operation::relate::RelateOp::relate (libgeos-3.8.0.so)</text></g><g><title>GEOSTouches_r (libgeos_c.so.1.13.1) (2,195 samples, 61.69%)</title><rect x="1.0680%" y="164" width="61.6920%" height="15" fill="rgb(207,117,47)"/><text x="1.3180%" y="174.50">GEOSTouches_r (libgeos_c.so.1.13.1)</text></g><g><title>geos::geom::Geometry::touches (libgeos-3.8.0.so) (2,193 samples, 61.64%)</title><rect x="1.1242%" y="180" width="61.6358%" height="15" fill="rgb(249,43,39)"/><text x="1.3742%" y="190.50">geos::geom::Geometry::touches (libgeos-3.8.0.so)</text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (46 samples, 1.29%)</title><rect x="68.2968%" y="308" width="1.2929%" height="15" fill="rgb(209,38,44)"/><text x="68.5468%" y="318.50"></text></g><g><title>geos::io::WKBReader::readCoordinateSequence (libgeos-3.8.0.so) (125 samples, 3.51%)</title><rect x="66.1889%" y="276" width="3.5132%" height="15" fill="rgb(236,212,23)"/><text x="66.4389%" y="286.50">geo..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.0.so) (107 samples, 3.01%)</title><rect x="66.6948%" y="292" width="3.0073%" height="15" fill="rgb(242,79,21)"/><text x="66.9448%" y="302.50">geo..</text></g><g><title>geos::io::WKBReader::readLinearRing (libgeos-3.8.0.so) (161 samples, 4.53%)</title><rect x="65.2614%" y="260" width="4.5250%" height="15" fill="rgb(211,96,35)"/><text x="65.5114%" y="270.50">geos:..</text></g><g><title>geos::io::WKBReader::readPolygon (libgeos-3.8.0.so) (185 samples, 5.20%)</title><rect x="64.7836%" y="244" width="5.1996%" height="15" fill="rgb(253,215,40)"/><text x="65.0336%" y="254.50">geos::..</text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.0.so) (223 samples, 6.27%)</title><rect x="64.2496%" y="212" width="6.2676%" height="15" fill="rgb(211,81,21)"/><text x="64.4996%" y="222.50">geos::io..</text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.0.so) (223 samples, 6.27%)</title><rect x="64.2496%" y="228" width="6.2676%" height="15" fill="rgb(208,190,38)"/><text x="64.4996%" y="238.50">geos::io..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (97 samples, 2.73%)</title><rect x="71.8943%" y="212" width="2.7263%" height="15" fill="rgb(235,213,38)"/><text x="72.1443%" y="222.50">st..</text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.1) (426 samples, 11.97%)</title><rect x="63.2659%" y="196" width="11.9730%" height="15" fill="rgb(237,122,38)"/><text x="63.5159%" y="206.50">GEOSGeomFromWKB_bu..</text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (465 samples, 13.07%)</title><rect x="62.7600%" y="164" width="13.0691%" height="15" fill="rgb(244,218,35)"/><text x="63.0100%" y="174.50">OGRGeometry::exportT..</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (461 samples, 12.96%)</title><rect x="62.8724%" y="180" width="12.9567%" height="15" fill="rgb(240,68,47)"/><text x="63.1224%" y="190.50">convertToGEOSGeom (..</text></g><g><title>geos::geom::Polygon::~Polygon (libgeos-3.8.0.so) (38 samples, 1.07%)</title><rect x="76.1102%" y="164" width="1.0680%" height="15" fill="rgb(210,16,53)"/><text x="76.3602%" y="174.50"></text></g><g><title>0x7fcf4596a7d8 (libc-2.27.so) (84 samples, 2.36%)</title><rect x="78.0495%" y="228" width="2.3609%" height="15" fill="rgb(235,124,12)"/><text x="78.2995%" y="238.50">0x..</text></g><g><title>initGEOS_r (libgeos_c.so.1.13.1) (122 samples, 3.43%)</title><rect x="77.1782%" y="164" width="3.4289%" height="15" fill="rgb(224,169,11)"/><text x="77.4282%" y="174.50">ini..</text></g><g><title>GEOS_init_r (libgeos_c.so.1.13.1) (121 samples, 3.40%)</title><rect x="77.2063%" y="180" width="3.4008%" height="15" fill="rgb(250,166,2)"/><text x="77.4563%" y="190.50">GEO..</text></g><g><title>operator new (new_op.cc:50) (111 samples, 3.12%)</title><rect x="77.4874%" y="196" width="3.1197%" height="15" fill="rgb(242,216,29)"/><text x="77.7374%" y="206.50">ope..</text></g><g><title>__libc_malloc (libc-2.27.so) (111 samples, 3.12%)</title><rect x="77.4874%" y="212" width="3.1197%" height="15" fill="rgb(230,116,27)"/><text x="77.7374%" y="222.50">__l..</text></g><g><title>OGRGEOSBooleanPredicate (libgdal.so.26.0.4) (2,834 samples, 79.65%)</title><rect x="0.9837%" y="148" width="79.6515%" height="15" fill="rgb(228,99,48)"/><text x="1.2337%" y="158.50">OGRGEOSBooleanPredicate (libgdal.so.26.0.4)</text></g><g><title>CPLReplacePointByLocalePoint (libgdal.so.26.0.4) (74 samples, 2.08%)</title><rect x="91.3997%" y="244" width="2.0798%" height="15" fill="rgb(253,11,6)"/><text x="91.6497%" y="254.50">C..</text></g><g><title>localeconv (libc-2.27.so) (68 samples, 1.91%)</title><rect x="91.5683%" y="260" width="1.9112%" height="15" fill="rgb(247,143,39)"/><text x="91.8183%" y="270.50">l..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (305 samples, 8.57%)</title><rect x="85.0478%" y="228" width="8.5722%" height="15" fill="rgb(236,97,10)"/><text x="85.2978%" y="238.50">CPLStrtodDel..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (361 samples, 10.15%)</title><rect x="84.0079%" y="212" width="10.1461%" height="15" fill="rgb(233,208,19)"/><text x="84.2579%" y="222.50">OGRWktReadPoint..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (422 samples, 11.86%)</title><rect x="82.3777%" y="196" width="11.8606%" height="15" fill="rgb(216,164,2)"/><text x="82.6277%" y="206.50">OGRPolygon::import..</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (455 samples, 12.79%)</title><rect x="81.5627%" y="180" width="12.7881%" height="15" fill="rgb(220,129,5)"/><text x="81.8127%" y="190.50">OGRPolygon::importF..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (496 samples, 13.94%)</title><rect x="80.6633%" y="148" width="13.9404%" height="15" fill="rgb(242,17,10)"/><text x="80.9133%" y="158.50">OGRGeometryFactory::c..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (493 samples, 13.86%)</title><rect x="80.7476%" y="164" width="13.8561%" height="15" fill="rgb(242,107,0)"/><text x="80.9976%" y="174.50">OGRGeometryFactory::c..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (basic_string.h:236) (41 samples, 1.15%)</title><rect x="96.6835%" y="228" width="1.1523%" height="15" fill="rgb(251,28,31)"/><text x="96.9335%" y="238.50"></text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (54 samples, 1.52%)</title><rect x="96.3463%" y="164" width="1.5177%" height="15" fill="rgb(233,223,10)"/><text x="96.5963%" y="174.50"></text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::to_string&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:917) (46 samples, 1.29%)</title><rect x="96.5711%" y="180" width="1.2929%" height="15" fill="rgb(215,21,27)"/><text x="96.8211%" y="190.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*, void&gt; (basic_string.h:607) (43 samples, 1.21%)</title><rect x="96.6554%" y="196" width="1.2085%" height="15" fill="rgb(232,23,21)"/><text x="96.9054%" y="206.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.h:255) (43 samples, 1.21%)</title><rect x="96.6554%" y="212" width="1.2085%" height="15" fill="rgb(244,5,23)"/><text x="96.9054%" y="222.50"></text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (89 samples, 2.50%)</title><rect x="95.4469%" y="148" width="2.5014%" height="15" fill="rgb(226,81,46)"/><text x="95.6969%" y="158.50">ar..</text></g><g><title>ST_Touches (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4705) (3,502 samples, 98.43%)</title><rect x="0.8994%" y="84" width="98.4261%" height="15" fill="rgb(247,70,30)"/><text x="1.1494%" y="94.50">ST_Touches (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4705)</text></g><g><title>ST_Touches (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4726) (3,502 samples, 98.43%)</title><rect x="0.8994%" y="100" width="98.4261%" height="15" fill="rgb(212,68,19)"/><text x="1.1494%" y="110.50">ST_Touches (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4726)</text></g><g><title>arctern::gis::ST_Touches (gis_functions.cpp:238) (3,502 samples, 98.43%)</title><rect x="0.8994%" y="116" width="98.4261%" height="15" fill="rgb(240,187,13)"/><text x="1.1494%" y="126.50">arctern::gis::ST_Touches (gis_functions.cpp:238)</text></g><g><title>arctern::gis::gdal::ST_Touches (gis_functions.cpp:753) (3,502 samples, 98.43%)</title><rect x="0.8994%" y="132" width="98.4261%" height="15" fill="rgb(223,113,26)"/><text x="1.1494%" y="142.50">arctern::gis::gdal::ST_Touches (gis_functions.cpp:753)</text></g><g><title>all (3,558 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (3,541 samples, 99.52%)</title><rect x="0.4778%" y="52" width="99.5222%" height="15" fill="rgb(241,108,4)"/><text x="0.7278%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_Touches (profile_geo.py:50) (3,526 samples, 99.10%)</title><rect x="0.8994%" y="68" width="99.1006%" height="15" fill="rgb(247,173,49)"/><text x="1.1494%" y="78.50">test_ST_Touches (profile_geo.py:50)</text></g></svg></svg>