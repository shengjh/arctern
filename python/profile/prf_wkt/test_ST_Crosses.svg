<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180"><g><title>geos::geom::Geometry::getEnvelopeInternal (libgeos-3.8.0.so) (41 samples, 1.13%)</title><rect x="1.6303%" y="196" width="1.1329%" height="15" fill="rgb(227,0,7)"/><text x="1.8803%" y="206.50"></text></g><g><title>geos::geom::Polygon::computeEnvelopeInternal (libgeos-3.8.0.so) (40 samples, 1.11%)</title><rect x="1.6579%" y="212" width="1.1053%" height="15" fill="rgb(217,0,24)"/><text x="1.9079%" y="222.50"></text></g><g><title>geos::operation::relate::EdgeEndBundle::~EdgeEndBundle (libgeos-3.8.0.so) (68 samples, 1.88%)</title><rect x="3.9514%" y="308" width="1.8790%" height="15" fill="rgb(221,193,54)"/><text x="4.2014%" y="318.50">g..</text></g><g><title>geos::operation::relate::EdgeEndBundle::~EdgeEndBundle (libgeos-3.8.0.so) (48 samples, 1.33%)</title><rect x="4.5040%" y="324" width="1.3263%" height="15" fill="rgb(248,212,6)"/><text x="4.7540%" y="334.50"></text></g><g><title>geos::operation::relate::EdgeEndBundleStar::~EdgeEndBundleStar (libgeos-3.8.0.so) (99 samples, 2.74%)</title><rect x="3.2329%" y="292" width="2.7356%" height="15" fill="rgb(208,68,35)"/><text x="3.4829%" y="302.50">ge..</text></g><g><title>geos::operation::relate::EdgeEndBundleStar::~EdgeEndBundleStar (libgeos-3.8.0.so) (115 samples, 3.18%)</title><rect x="3.2329%" y="276" width="3.1777%" height="15" fill="rgb(232,128,0)"/><text x="3.4829%" y="286.50">geo..</text></g><g><title>geos::operation::relate::RelateNode::~RelateNode (libgeos-3.8.0.so) (122 samples, 3.37%)</title><rect x="3.0671%" y="244" width="3.3711%" height="15" fill="rgb(207,160,47)"/><text x="3.3171%" y="254.50">geo..</text></g><g><title>geos::geomgraph::Node::~Node (libgeos-3.8.0.so) (119 samples, 3.29%)</title><rect x="3.1500%" y="260" width="3.2882%" height="15" fill="rgb(228,23,34)"/><text x="3.4000%" y="270.50">geo..</text></g><g><title>geos::geomgraph::NodeMap::~NodeMap (libgeos-3.8.0.so) (130 samples, 3.59%)</title><rect x="2.8737%" y="228" width="3.5922%" height="15" fill="rgb(218,30,26)"/><text x="3.1237%" y="238.50">geos..</text></g><g><title>geos::geomgraph::PlanarGraph::~PlanarGraph (libgeos-3.8.0.so) (60 samples, 1.66%)</title><rect x="7.0738%" y="244" width="1.6579%" height="15" fill="rgb(220,122,19)"/><text x="7.3238%" y="254.50"></text></g><g><title>geos::operation::GeometryGraphOperation::~GeometryGraphOperation (libgeos-3.8.0.so) (84 samples, 2.32%)</title><rect x="6.4659%" y="228" width="2.3211%" height="15" fill="rgb(250,228,42)"/><text x="6.7159%" y="238.50">g..</text></g><g><title>geos::algorithm::Orientation::isCCW (libgeos-3.8.0.so) (41 samples, 1.13%)</title><rect x="10.3620%" y="324" width="1.1329%" height="15" fill="rgb(240,193,28)"/><text x="10.6120%" y="334.50"></text></g><g><title>geos::operation::valid::RepeatedPointRemover::removeRepeatedPoints (libgeos-3.8.0.so) (41 samples, 1.13%)</title><rect x="13.1804%" y="324" width="1.1329%" height="15" fill="rgb(216,20,37)"/><text x="13.4304%" y="334.50"></text></g><g><title>geos::geomgraph::GeometryGraph::add (libgeos-3.8.0.so) (203 samples, 5.61%)</title><rect x="9.0909%" y="276" width="5.6093%" height="15" fill="rgb(206,188,39)"/><text x="9.3409%" y="286.50">geos::g..</text></g><g><title>geos::geomgraph::GeometryGraph::addPolygon (libgeos-3.8.0.so) (175 samples, 4.84%)</title><rect x="9.8646%" y="292" width="4.8356%" height="15" fill="rgb(217,207,13)"/><text x="10.1146%" y="302.50">geos::..</text></g><g><title>geos::geomgraph::GeometryGraph::addPolygonRing (libgeos-3.8.0.so) (166 samples, 4.59%)</title><rect x="10.1133%" y="308" width="4.5869%" height="15" fill="rgb(231,73,38)"/><text x="10.3633%" y="318.50">geos:..</text></g><g><title>geos::geomgraph::GeometryGraph::GeometryGraph (libgeos-3.8.0.so) (236 samples, 6.52%)</title><rect x="9.0356%" y="260" width="6.5211%" height="15" fill="rgb(225,20,46)"/><text x="9.2856%" y="270.50">geos::geo..</text></g><g><title>geos::operation::GeometryGraphOperation::GeometryGraphOperation (libgeos-3.8.0.so) (247 samples, 6.83%)</title><rect x="8.8699%" y="244" width="6.8251%" height="15" fill="rgb(210,31,41)"/><text x="9.1199%" y="254.50">geos::ope..</text></g><g><title>geos::operation::relate::RelateOp::RelateOp (libgeos-3.8.0.so) (258 samples, 7.13%)</title><rect x="8.7870%" y="228" width="7.1290%" height="15" fill="rgb(221,200,47)"/><text x="9.0370%" y="238.50">geos::oper..</text></g><g><title>geos::algorithm::LineIntersector::computeIntersection (libgeos-3.8.0.so) (57 samples, 1.58%)</title><rect x="21.0555%" y="356" width="1.5750%" height="15" fill="rgb(226,26,5)"/><text x="21.3055%" y="366.50"></text></g><g><title>geos::algorithm::LineIntersector::computeIntersect (libgeos-3.8.0.so) (42 samples, 1.16%)</title><rect x="21.4700%" y="372" width="1.1605%" height="15" fill="rgb(249,33,26)"/><text x="21.7200%" y="382.50"></text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (174 samples, 4.81%)</title><rect x="19.7016%" y="324" width="4.8080%" height="15" fill="rgb(235,183,28)"/><text x="19.9516%" y="334.50">geos::..</text></g><g><title>geos::geomgraph::index::SegmentIntersector::addIntersections (libgeos-3.8.0.so) (140 samples, 3.87%)</title><rect x="20.6411%" y="340" width="3.8685%" height="15" fill="rgb(221,5,38)"/><text x="20.8911%" y="350.50">geos..</text></g><g><title>geos::geomgraph::Edge::addIntersections (libgeos-3.8.0.so) (65 samples, 1.80%)</title><rect x="22.7135%" y="356" width="1.7961%" height="15" fill="rgb(247,18,42)"/><text x="22.9635%" y="366.50">g..</text></g><g><title>geos::algorithm::CGAlgorithmsDD::orientationIndex (libgeos-3.8.0.so) (44 samples, 1.22%)</title><rect x="25.4214%" y="372" width="1.2158%" height="15" fill="rgb(241,131,45)"/><text x="25.6714%" y="382.50"></text></g><g><title>geos::algorithm::LineIntersector::computeIntersection (libgeos-3.8.0.so) (81 samples, 2.24%)</title><rect x="24.8135%" y="340" width="2.2382%" height="15" fill="rgb(249,31,29)"/><text x="25.0635%" y="350.50">g..</text></g><g><title>geos::algorithm::LineIntersector::computeIntersect (libgeos-3.8.0.so) (66 samples, 1.82%)</title><rect x="25.2280%" y="356" width="1.8237%" height="15" fill="rgb(225,111,53)"/><text x="25.4780%" y="366.50">g..</text></g><g><title>geos::geomgraph::Edge::addIntersection (libgeos-3.8.0.so) (43 samples, 1.19%)</title><rect x="27.2451%" y="356" width="1.1882%" height="15" fill="rgb(238,160,17)"/><text x="27.4951%" y="366.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::processOverlaps (libgeos-3.8.0.so) (388 samples, 10.72%)</title><rect x="19.1213%" y="292" width="10.7212%" height="15" fill="rgb(214,148,48)"/><text x="19.3713%" y="302.50">geos::geomgraph:..</text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (376 samples, 10.39%)</title><rect x="19.4529%" y="308" width="10.3896%" height="15" fill="rgb(232,36,49)"/><text x="19.7029%" y="318.50">geos::geomgraph..</text></g><g><title>geos::geomgraph::index::SegmentIntersector::addIntersections (libgeos-3.8.0.so) (193 samples, 5.33%)</title><rect x="24.5095%" y="324" width="5.3330%" height="15" fill="rgb(209,103,24)"/><text x="24.7595%" y="334.50">geos::g..</text></g><g><title>geos::geomgraph::Edge::addIntersections (libgeos-3.8.0.so) (100 samples, 2.76%)</title><rect x="27.0793%" y="340" width="2.7632%" height="15" fill="rgb(229,88,8)"/><text x="27.3293%" y="350.50">ge..</text></g><g><title>geos::geomgraph::EdgeIntersectionList::add (libgeos-3.8.0.so) (51 samples, 1.41%)</title><rect x="28.4333%" y="356" width="1.4092%" height="15" fill="rgb(213,181,19)"/><text x="28.6833%" y="366.50"></text></g><g><title>std::vector&lt;geos::geomgraph::EdgeIntersection, std::allocator&lt;geos::geomgraph::EdgeIntersection&gt; &gt;::emplace_back&lt;geos::geom::Coordinate const&amp;, unsigned long&amp;, double&amp;&gt; (libgeos-3.8.0.so) (37 samples, 1.02%)</title><rect x="28.8201%" y="372" width="1.0224%" height="15" fill="rgb(254,191,54)"/><text x="29.0701%" y="382.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (459 samples, 12.68%)</title><rect x="17.2423%" y="276" width="12.6831%" height="15" fill="rgb(241,83,37)"/><text x="17.4923%" y="286.50">geos::geomgraph::in..</text></g><g><title>geos::geomgraph::GeometryGraph::computeEdgeIntersections (libgeos-3.8.0.so) (506 samples, 13.98%)</title><rect x="16.4134%" y="260" width="13.9818%" height="15" fill="rgb(233,36,39)"/><text x="16.6634%" y="270.50">geos::geomgraph::Geom..</text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::MonotoneChainEdge (libgeos-3.8.0.so) (72 samples, 1.99%)</title><rect x="31.9149%" y="356" width="1.9895%" height="15" fill="rgb(226,3,54)"/><text x="32.1649%" y="366.50">g..</text></g><g><title>geos::geomgraph::index::MonotoneChainIndexer::getChainStartIndices (libgeos-3.8.0.so) (71 samples, 1.96%)</title><rect x="31.9425%" y="372" width="1.9619%" height="15" fill="rgb(245,192,40)"/><text x="32.1925%" y="382.50">g..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_realloc_insert&lt;unsigned long const&amp;&gt; (libgdal.so.26.0.4) (37 samples, 1.02%)</title><rect x="32.8820%" y="388" width="1.0224%" height="15" fill="rgb(238,167,29)"/><text x="33.1320%" y="398.50"></text></g><g><title>geos::geomgraph::Edge::getMonotoneChainEdge (libgeos-3.8.0.so) (80 samples, 2.21%)</title><rect x="31.8320%" y="340" width="2.2106%" height="15" fill="rgb(232,182,51)"/><text x="32.0820%" y="350.50">g..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::add (libgeos-3.8.0.so) (114 samples, 3.15%)</title><rect x="31.4175%" y="308" width="3.1500%" height="15" fill="rgb(231,60,39)"/><text x="31.6675%" y="318.50">geo..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::add (libgeos-3.8.0.so) (114 samples, 3.15%)</title><rect x="31.4175%" y="324" width="3.1500%" height="15" fill="rgb(208,69,12)"/><text x="31.6675%" y="334.50">geo..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::prepareEvents (libgeos-3.8.0.so) (45 samples, 1.24%)</title><rect x="34.5676%" y="308" width="1.2434%" height="15" fill="rgb(235,93,37)"/><text x="34.8176%" y="318.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (172 samples, 4.75%)</title><rect x="31.3899%" y="292" width="4.7527%" height="15" fill="rgb(213,116,39)"/><text x="31.6399%" y="302.50">geos::..</text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (227 samples, 6.27%)</title><rect x="30.3951%" y="260" width="6.2725%" height="15" fill="rgb(222,207,29)"/><text x="30.6451%" y="270.50">geos::ge..</text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (226 samples, 6.24%)</title><rect x="30.4228%" y="276" width="6.2448%" height="15" fill="rgb(206,96,30)"/><text x="30.6728%" y="286.50">geos::ge..</text></g><g><title>geos::operation::relate::EdgeEndBuilder::createEdgeEndForNext (libgeos-3.8.0.so) (131 samples, 3.62%)</title><rect x="37.6347%" y="292" width="3.6198%" height="15" fill="rgb(218,138,4)"/><text x="37.8847%" y="302.50">geos..</text></g><g><title>std::vector&lt;geos::geomgraph::EdgeEnd*, std::allocator&lt;geos::geomgraph::EdgeEnd*&gt; &gt;::_M_realloc_insert&lt;geos::geomgraph::EdgeEnd* const&amp;&gt; (libgeos-3.8.0.so) (59 samples, 1.63%)</title><rect x="39.6242%" y="308" width="1.6303%" height="15" fill="rgb(250,191,14)"/><text x="39.8742%" y="318.50"></text></g><g><title>geos::operation::relate::EdgeEndBuilder::createEdgeEndForPrev (libgeos-3.8.0.so) (108 samples, 2.98%)</title><rect x="41.2545%" y="292" width="2.9842%" height="15" fill="rgb(239,60,40)"/><text x="41.5045%" y="302.50">geo..</text></g><g><title>geos::operation::relate::EdgeEndBuilder::computeEdgeEnds (libgeos-3.8.0.so) (280 samples, 7.74%)</title><rect x="36.7229%" y="260" width="7.7369%" height="15" fill="rgb(206,27,48)"/><text x="36.9729%" y="270.50">geos::opera..</text></g><g><title>geos::operation::relate::EdgeEndBuilder::computeEdgeEnds (libgeos-3.8.0.so) (279 samples, 7.71%)</title><rect x="36.7505%" y="276" width="7.7093%" height="15" fill="rgb(225,35,8)"/><text x="37.0005%" y="286.50">geos::opera..</text></g><g><title>geos::operation::relate::RelateNodeFactory::createNode (libgeos-3.8.0.so) (48 samples, 1.33%)</title><rect x="45.3993%" y="292" width="1.3263%" height="15" fill="rgb(250,213,24)"/><text x="45.6493%" y="302.50"></text></g><g><title>geos::geomgraph::NodeMap::addNode (libgeos-3.8.0.so) (103 samples, 2.85%)</title><rect x="44.7637%" y="276" width="2.8461%" height="15" fill="rgb(247,123,22)"/><text x="45.0137%" y="286.50">ge..</text></g><g><title>geos::operation::relate::RelateComputer::computeIntersectionNodes (libgeos-3.8.0.so) (146 samples, 4.03%)</title><rect x="44.4598%" y="260" width="4.0343%" height="15" fill="rgb(231,138,38)"/><text x="44.7098%" y="270.50">geos..</text></g><g><title>geos::operation::relate::EdgeEndBundle::EdgeEndBundle (libgeos-3.8.0.so) (86 samples, 2.38%)</title><rect x="50.3730%" y="308" width="2.3763%" height="15" fill="rgb(231,145,46)"/><text x="50.6230%" y="318.50">ge..</text></g><g><title>geos::operation::relate::EdgeEndBundle::insert (libgeos-3.8.0.so) (57 samples, 1.58%)</title><rect x="51.1744%" y="324" width="1.5750%" height="15" fill="rgb(251,118,11)"/><text x="51.4244%" y="334.50"></text></g><g><title>std::vector&lt;geos::geomgraph::EdgeEnd*, std::allocator&lt;geos::geomgraph::EdgeEnd*&gt; &gt;::_M_realloc_insert&lt;geos::geomgraph::EdgeEnd* const&amp;&gt; (libgeos-3.8.0.so) (53 samples, 1.46%)</title><rect x="51.2849%" y="340" width="1.4645%" height="15" fill="rgb(217,147,25)"/><text x="51.5349%" y="350.50"></text></g><g><title>operator new (new_op.cc:50) (50 samples, 1.38%)</title><rect x="51.3678%" y="356" width="1.3816%" height="15" fill="rgb(247,81,37)"/><text x="51.6178%" y="366.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (50 samples, 1.38%)</title><rect x="51.3678%" y="372" width="1.3816%" height="15" fill="rgb(209,12,38)"/><text x="51.6178%" y="382.50"></text></g><g><title>std::_Rb_tree&lt;geos::geomgraph::EdgeEnd*, geos::geomgraph::EdgeEnd*, std::_Identity&lt;geos::geomgraph::EdgeEnd*&gt;, geos::geomgraph::EdgeEndLT, std::allocator&lt;geos::geomgraph::EdgeEnd*&gt; &gt;::_M_insert_unique&lt;geos::geomgraph::EdgeEnd* const&amp;&gt; (libgeos-3.8.0.so) (65 samples, 1.80%)</title><rect x="54.0204%" y="308" width="1.7961%" height="15" fill="rgb(227,1,9)"/><text x="54.2704%" y="318.50">s..</text></g><g><title>operator new (new_op.cc:50) (46 samples, 1.27%)</title><rect x="54.5455%" y="324" width="1.2711%" height="15" fill="rgb(248,47,43)"/><text x="54.7955%" y="334.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (45 samples, 1.24%)</title><rect x="54.5731%" y="340" width="1.2434%" height="15" fill="rgb(221,10,30)"/><text x="54.8231%" y="350.50"></text></g><g><title>geos::geomgraph::Node::add (libgeos-3.8.0.so) (257 samples, 7.10%)</title><rect x="49.6546%" y="276" width="7.1014%" height="15" fill="rgb(210,229,1)"/><text x="49.9046%" y="286.50">geos::geom..</text></g><g><title>geos::operation::relate::EdgeEndBundleStar::insert (libgeos-3.8.0.so) (240 samples, 6.63%)</title><rect x="50.1243%" y="292" width="6.6317%" height="15" fill="rgb(222,148,37)"/><text x="50.3743%" y="302.50">geos::ope..</text></g><g><title>geos::operation::relate::RelateComputer::insertEdgeEnds (libgeos-3.8.0.so) (314 samples, 8.68%)</title><rect x="49.6270%" y="260" width="8.6764%" height="15" fill="rgb(234,67,33)"/><text x="49.8770%" y="270.50">geos::operat..</text></g><g><title>geos::geomgraph::NodeMap::add (libgeos-3.8.0.so) (56 samples, 1.55%)</title><rect x="56.7560%" y="276" width="1.5474%" height="15" fill="rgb(247,98,35)"/><text x="57.0060%" y="286.50"></text></g><g><title>geos::geomgraph::NodeMap::addNode (libgeos-3.8.0.so) (49 samples, 1.35%)</title><rect x="56.9494%" y="292" width="1.3540%" height="15" fill="rgb(247,138,52)"/><text x="57.1994%" y="302.50"></text></g><g><title>geos::operation::relate::EdgeEndBundle::computeLabel (libgeos-3.8.0.so) (41 samples, 1.13%)</title><rect x="59.7679%" y="308" width="1.1329%" height="15" fill="rgb(213,79,30)"/><text x="60.0179%" y="318.50"></text></g><g><title>geos::geomgraph::EdgeEndStar::computeEdgeEndLabels (libgeos-3.8.0.so) (53 samples, 1.46%)</title><rect x="59.6297%" y="292" width="1.4645%" height="15" fill="rgb(246,177,23)"/><text x="59.8797%" y="302.50"></text></g><g><title>geos::geomgraph::EdgeEndStar::computeLabelling (libgeos-3.8.0.so) (99 samples, 2.74%)</title><rect x="59.0495%" y="276" width="2.7356%" height="15" fill="rgb(230,62,27)"/><text x="59.2995%" y="286.50">ge..</text></g><g><title>geos::operation::relate::RelateComputer::labelNodeEdges (libgeos-3.8.0.so) (107 samples, 2.96%)</title><rect x="58.9666%" y="260" width="2.9566%" height="15" fill="rgb(216,154,8)"/><text x="59.2166%" y="270.50">geo..</text></g><g><title>geos::operation::relate::RelateOp::getIntersectionMatrix (libgeos-3.8.0.so) (1,692 samples, 46.75%)</title><rect x="15.9160%" y="228" width="46.7532%" height="15" fill="rgb(244,35,45)"/><text x="16.1660%" y="238.50">geos::operation::relate::RelateOp::getIntersectionMatrix (libgeos-3.8.0.so)</text></g><g><title>geos::operation::relate::RelateComputer::computeIM (libgeos-3.8.0.so) (1,692 samples, 46.75%)</title><rect x="15.9160%" y="244" width="46.7532%" height="15" fill="rgb(251,115,12)"/><text x="16.1660%" y="254.50">geos::operation::relate::RelateComputer::computeIM (libgeos-3.8.0.so)</text></g><g><title>geos::geom::Geometry::relate (libgeos-3.8.0.so) (2,181 samples, 60.27%)</title><rect x="2.7632%" y="196" width="60.2653%" height="15" fill="rgb(240,54,50)"/><text x="3.0132%" y="206.50">geos::geom::Geometry::relate (libgeos-3.8.0.so)</text></g><g><title>geos::operation::relate::RelateOp::relate (libgeos-3.8.0.so) (2,180 samples, 60.24%)</title><rect x="2.7908%" y="212" width="60.2376%" height="15" fill="rgb(233,84,52)"/><text x="3.0408%" y="222.50">geos::operation::relate::RelateOp::relate (libgeos-3.8.0.so)</text></g><g><title>GEOSCrosses_r (libgeos_c.so.1.13.1) (2,233 samples, 61.70%)</title><rect x="1.4092%" y="164" width="61.7021%" height="15" fill="rgb(207,117,47)"/><text x="1.6592%" y="174.50">GEOSCrosses_r (libgeos_c.so.1.13.1)</text></g><g><title>geos::geom::Geometry::crosses (libgeos-3.8.0.so) (2,231 samples, 61.65%)</title><rect x="1.4645%" y="180" width="61.6469%" height="15" fill="rgb(249,43,39)"/><text x="1.7145%" y="190.50">geos::geom::Geometry::crosses (libgeos-3.8.0.so)</text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (43 samples, 1.19%)</title><rect x="68.1404%" y="308" width="1.1882%" height="15" fill="rgb(209,38,44)"/><text x="68.3904%" y="318.50"></text></g><g><title>geos::io::WKBReader::readCoordinateSequence (libgeos-3.8.0.so) (149 samples, 4.12%)</title><rect x="65.2943%" y="276" width="4.1172%" height="15" fill="rgb(236,212,23)"/><text x="65.5443%" y="286.50">geos..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.0.so) (105 samples, 2.90%)</title><rect x="66.5101%" y="292" width="2.9014%" height="15" fill="rgb(242,79,21)"/><text x="66.7601%" y="302.50">ge..</text></g><g><title>geos::io::WKBReader::readLinearRing (libgeos-3.8.0.so) (177 samples, 4.89%)</title><rect x="64.7140%" y="260" width="4.8909%" height="15" fill="rgb(211,96,35)"/><text x="64.9640%" y="270.50">geos::..</text></g><g><title>geos::io::WKBReader::readPolygon (libgeos-3.8.0.so) (193 samples, 5.33%)</title><rect x="64.4653%" y="244" width="5.3330%" height="15" fill="rgb(253,215,40)"/><text x="64.7153%" y="254.50">geos::i..</text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.0.so) (219 samples, 6.05%)</title><rect x="64.1337%" y="212" width="6.0514%" height="15" fill="rgb(211,81,21)"/><text x="64.3837%" y="222.50">geos::io..</text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.0.so) (218 samples, 6.02%)</title><rect x="64.1614%" y="228" width="6.0238%" height="15" fill="rgb(208,190,38)"/><text x="64.4114%" y="238.50">geos::io..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (116 samples, 3.21%)</title><rect x="71.2628%" y="212" width="3.2053%" height="15" fill="rgb(235,213,38)"/><text x="71.5128%" y="222.50">std..</text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.1) (424 samples, 11.72%)</title><rect x="63.6087%" y="196" width="11.7159%" height="15" fill="rgb(237,122,38)"/><text x="63.8587%" y="206.50">GEOSGeomFromWKB_b..</text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (458 samples, 12.66%)</title><rect x="63.2219%" y="164" width="12.6554%" height="15" fill="rgb(244,218,35)"/><text x="63.4719%" y="174.50">OGRGeometry::export..</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (450 samples, 12.43%)</title><rect x="63.4429%" y="180" width="12.4344%" height="15" fill="rgb(240,68,47)"/><text x="63.6929%" y="190.50">convertToGEOSGeom (..</text></g><g><title>0x7fcbc6f887d8 (libc-2.27.so) (106 samples, 2.93%)</title><rect x="77.5352%" y="228" width="2.9290%" height="15" fill="rgb(210,16,53)"/><text x="77.7852%" y="238.50">0x..</text></g><g><title>initGEOS_r (libgeos_c.so.1.13.1) (144 samples, 3.98%)</title><rect x="76.8721%" y="164" width="3.9790%" height="15" fill="rgb(235,124,12)"/><text x="77.1221%" y="174.50">init..</text></g><g><title>GEOS_init_r (libgeos_c.so.1.13.1) (143 samples, 3.95%)</title><rect x="76.8997%" y="180" width="3.9514%" height="15" fill="rgb(224,169,11)"/><text x="77.1497%" y="190.50">GEOS..</text></g><g><title>operator new (new_op.cc:50) (137 samples, 3.79%)</title><rect x="77.0655%" y="196" width="3.7856%" height="15" fill="rgb(250,166,2)"/><text x="77.3155%" y="206.50">oper..</text></g><g><title>__libc_malloc (libc-2.27.so) (137 samples, 3.79%)</title><rect x="77.0655%" y="212" width="3.7856%" height="15" fill="rgb(242,216,29)"/><text x="77.3155%" y="222.50">__li..</text></g><g><title>OGRGEOSBooleanPredicate (libgdal.so.26.0.4) (2,876 samples, 79.47%)</title><rect x="1.4092%" y="148" width="79.4695%" height="15" fill="rgb(230,116,27)"/><text x="1.6592%" y="158.50">OGRGEOSBooleanPredicate (libgdal.so.26.0.4)</text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (57 samples, 1.58%)</title><rect x="82.3708%" y="196" width="1.5750%" height="15" fill="rgb(228,99,48)"/><text x="82.6208%" y="206.50"></text></g><g><title>CPLReplacePointByLocalePoint (libgdal.so.26.0.4) (59 samples, 1.63%)</title><rect x="91.5446%" y="244" width="1.6303%" height="15" fill="rgb(253,11,6)"/><text x="91.7946%" y="254.50"></text></g><g><title>localeconv (libc-2.27.so) (45 samples, 1.24%)</title><rect x="91.9315%" y="260" width="1.2434%" height="15" fill="rgb(247,143,39)"/><text x="92.1815%" y="270.50"></text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (276 samples, 7.63%)</title><rect x="85.8248%" y="228" width="7.6264%" height="15" fill="rgb(236,97,10)"/><text x="86.0748%" y="238.50">CPLStrtodD..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (329 samples, 9.09%)</title><rect x="85.0235%" y="212" width="9.0909%" height="15" fill="rgb(233,208,19)"/><text x="85.2735%" y="222.50">OGRWktReadPoi..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (372 samples, 10.28%)</title><rect x="83.9458%" y="196" width="10.2791%" height="15" fill="rgb(216,164,2)"/><text x="84.1958%" y="206.50">OGRPolygon::imp..</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (441 samples, 12.19%)</title><rect x="82.2050%" y="180" width="12.1857%" height="15" fill="rgb(220,129,5)"/><text x="82.4550%" y="190.50">OGRPolygon::import..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (489 samples, 13.51%)</title><rect x="81.0721%" y="148" width="13.5120%" height="15" fill="rgb(242,17,10)"/><text x="81.3221%" y="158.50">OGRGeometryFactory::..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (482 samples, 13.32%)</title><rect x="81.2655%" y="164" width="13.3186%" height="15" fill="rgb(242,107,0)"/><text x="81.5155%" y="174.50">OGRGeometryFactory::..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (58 samples, 1.60%)</title><rect x="96.3250%" y="164" width="1.6027%" height="15" fill="rgb(251,28,31)"/><text x="96.5750%" y="174.50"></text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::to_string&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:917) (50 samples, 1.38%)</title><rect x="96.5460%" y="180" width="1.3816%" height="15" fill="rgb(233,223,10)"/><text x="96.7960%" y="190.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*, void&gt; (basic_string.h:607) (48 samples, 1.33%)</title><rect x="96.6013%" y="196" width="1.3263%" height="15" fill="rgb(215,21,27)"/><text x="96.8513%" y="206.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.h:255) (39 samples, 1.08%)</title><rect x="96.8500%" y="212" width="1.0776%" height="15" fill="rgb(232,23,21)"/><text x="97.1000%" y="222.50"></text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (94 samples, 2.60%)</title><rect x="95.4131%" y="148" width="2.5974%" height="15" fill="rgb(244,5,23)"/><text x="95.6631%" y="158.50">ar..</text></g><g><title>ST_Crosses (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4923) (3,549 samples, 98.07%)</title><rect x="1.2987%" y="84" width="98.0658%" height="15" fill="rgb(226,81,46)"/><text x="1.5487%" y="94.50">ST_Crosses (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4923)</text></g><g><title>ST_Crosses (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4944) (3,549 samples, 98.07%)</title><rect x="1.2987%" y="100" width="98.0658%" height="15" fill="rgb(247,70,30)"/><text x="1.5487%" y="110.50">ST_Crosses (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4944)</text></g><g><title>arctern::gis::ST_Crosses (gis_functions.cpp:250) (3,549 samples, 98.07%)</title><rect x="1.2987%" y="116" width="98.0658%" height="15" fill="rgb(212,68,19)"/><text x="1.5487%" y="126.50">arctern::gis::ST_Crosses (gis_functions.cpp:250)</text></g><g><title>arctern::gis::gdal::ST_Crosses (gis_functions.cpp:759) (3,549 samples, 98.07%)</title><rect x="1.2987%" y="132" width="98.0658%" height="15" fill="rgb(240,187,13)"/><text x="1.5487%" y="142.50">arctern::gis::gdal::ST_Crosses (gis_functions.cpp:759)</text></g><g><title>&lt;module&gt; (profile_geo.py:324) (3,581 samples, 98.95%)</title><rect x="1.0224%" y="52" width="98.9500%" height="15" fill="rgb(223,113,26)"/><text x="1.2724%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_Crosses (profile_geo.py:60) (3,571 samples, 98.67%)</title><rect x="1.2987%" y="68" width="98.6737%" height="15" fill="rgb(206,192,2)"/><text x="1.5487%" y="78.50">test_ST_Crosses (profile_geo.py:60)</text></g><g><title>all (3,619 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>