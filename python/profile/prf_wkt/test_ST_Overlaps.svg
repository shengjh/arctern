<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>geos::operation::relate::EdgeEndBundle::~EdgeEndBundle (libgeos-3.8.0.so) (45 samples, 1.28%)</title><rect x="3.9671%" y="308" width="1.2751%" height="15" fill="rgb(227,0,7)"/><text x="4.2171%" y="318.50"></text></g><g><title>geos::operation::relate::EdgeEndBundleStar::~EdgeEndBundleStar (libgeos-3.8.0.so) (80 samples, 2.27%)</title><rect x="3.0887%" y="292" width="2.2669%" height="15" fill="rgb(217,0,24)"/><text x="3.3387%" y="302.50">g..</text></g><g><title>geos::operation::relate::RelateNode::~RelateNode (libgeos-3.8.0.so) (97 samples, 2.75%)</title><rect x="2.9470%" y="244" width="2.7487%" height="15" fill="rgb(221,193,54)"/><text x="3.1970%" y="254.50">ge..</text></g><g><title>geos::geomgraph::Node::~Node (libgeos-3.8.0.so) (97 samples, 2.75%)</title><rect x="2.9470%" y="260" width="2.7487%" height="15" fill="rgb(248,212,6)"/><text x="3.1970%" y="270.50">ge..</text></g><g><title>geos::operation::relate::EdgeEndBundleStar::~EdgeEndBundleStar (libgeos-3.8.0.so) (95 samples, 2.69%)</title><rect x="3.0037%" y="276" width="2.6920%" height="15" fill="rgb(208,68,35)"/><text x="3.2537%" y="286.50">ge..</text></g><g><title>geos::geomgraph::NodeMap::~NodeMap (libgeos-3.8.0.so) (107 samples, 3.03%)</title><rect x="2.7203%" y="228" width="3.0320%" height="15" fill="rgb(232,128,0)"/><text x="2.9703%" y="238.50">geo..</text></g><g><title>geos::geomgraph::PlanarGraph::~PlanarGraph (libgeos-3.8.0.so) (58 samples, 1.64%)</title><rect x="6.1774%" y="244" width="1.6435%" height="15" fill="rgb(207,160,47)"/><text x="6.4274%" y="254.50"></text></g><g><title>geos::operation::GeometryGraphOperation::~GeometryGraphOperation (libgeos-3.8.0.so) (78 samples, 2.21%)</title><rect x="5.7523%" y="228" width="2.2103%" height="15" fill="rgb(228,23,34)"/><text x="6.0023%" y="238.50">g..</text></g><g><title>geos::geomgraph::GeometryGraph::add (libgeos-3.8.0.so) (170 samples, 4.82%)</title><rect x="8.3026%" y="276" width="4.8172%" height="15" fill="rgb(218,30,26)"/><text x="8.5526%" y="286.50">geos::..</text></g><g><title>geos::geomgraph::GeometryGraph::addPolygon (libgeos-3.8.0.so) (143 samples, 4.05%)</title><rect x="9.0677%" y="292" width="4.0521%" height="15" fill="rgb(220,122,19)"/><text x="9.3177%" y="302.50">geos..</text></g><g><title>geos::geomgraph::GeometryGraph::addPolygonRing (libgeos-3.8.0.so) (139 samples, 3.94%)</title><rect x="9.1811%" y="308" width="3.9388%" height="15" fill="rgb(250,228,42)"/><text x="9.4311%" y="318.50">geos..</text></g><g><title>geos::geomgraph::GeometryGraph::GeometryGraph (libgeos-3.8.0.so) (206 samples, 5.84%)</title><rect x="8.2460%" y="260" width="5.8373%" height="15" fill="rgb(240,193,28)"/><text x="8.4960%" y="270.50">geos::g..</text></g><g><title>geos::operation::GeometryGraphOperation::GeometryGraphOperation (libgeos-3.8.0.so) (222 samples, 6.29%)</title><rect x="7.9626%" y="244" width="6.2907%" height="15" fill="rgb(216,20,37)"/><text x="8.2126%" y="254.50">geos::op..</text></g><g><title>geos::operation::relate::RelateOp::RelateOp (libgeos-3.8.0.so) (228 samples, 6.46%)</title><rect x="7.9626%" y="228" width="6.4608%" height="15" fill="rgb(206,188,39)"/><text x="8.2126%" y="238.50">geos::op..</text></g><g><title>geos::algorithm::LineIntersector::computeIntersection (libgeos-3.8.0.so) (56 samples, 1.59%)</title><rect x="19.1272%" y="356" width="1.5869%" height="15" fill="rgb(217,207,13)"/><text x="19.3772%" y="366.50"></text></g><g><title>geos::algorithm::LineIntersector::computeIntersect (libgeos-3.8.0.so) (40 samples, 1.13%)</title><rect x="19.5806%" y="372" width="1.1335%" height="15" fill="rgb(231,73,38)"/><text x="19.8306%" y="382.50"></text></g><g><title>geos::geomgraph::Edge::addIntersections (libgeos-3.8.0.so) (59 samples, 1.67%)</title><rect x="20.7708%" y="356" width="1.6719%" height="15" fill="rgb(225,20,46)"/><text x="21.0208%" y="366.50"></text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (152 samples, 4.31%)</title><rect x="18.1638%" y="324" width="4.3072%" height="15" fill="rgb(210,31,41)"/><text x="18.4138%" y="334.50">geos:..</text></g><g><title>geos::geomgraph::index::SegmentIntersector::addIntersections (libgeos-3.8.0.so) (123 samples, 3.49%)</title><rect x="18.9855%" y="340" width="3.4854%" height="15" fill="rgb(221,200,47)"/><text x="19.2355%" y="350.50">geo..</text></g><g><title>geos::algorithm::CGAlgorithmsDD::orientationIndex (libgeos-3.8.0.so) (56 samples, 1.59%)</title><rect x="23.8595%" y="372" width="1.5869%" height="15" fill="rgb(226,26,5)"/><text x="24.1095%" y="382.50"></text></g><g><title>geos::algorithm::LineIntersector::computeIntersection (libgeos-3.8.0.so) (108 samples, 3.06%)</title><rect x="22.7827%" y="340" width="3.0604%" height="15" fill="rgb(249,33,26)"/><text x="23.0327%" y="350.50">geo..</text></g><g><title>geos::algorithm::LineIntersector::computeIntersect (libgeos-3.8.0.so) (85 samples, 2.41%)</title><rect x="23.4344%" y="356" width="2.4086%" height="15" fill="rgb(235,183,28)"/><text x="23.6844%" y="366.50">ge..</text></g><g><title>geos::geomgraph::Edge::addIntersection (libgeos-3.8.0.so) (40 samples, 1.13%)</title><rect x="26.0697%" y="356" width="1.1335%" height="15" fill="rgb(221,5,38)"/><text x="26.3197%" y="366.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::processOverlaps (libgeos-3.8.0.so) (376 samples, 10.65%)</title><rect x="17.7954%" y="292" width="10.6546%" height="15" fill="rgb(247,18,42)"/><text x="18.0454%" y="302.50">geos::geomgraph:..</text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (365 samples, 10.34%)</title><rect x="18.1071%" y="308" width="10.3429%" height="15" fill="rgb(241,131,45)"/><text x="18.3571%" y="318.50">geos::geomgraph..</text></g><g><title>geos::geomgraph::index::SegmentIntersector::addIntersections (libgeos-3.8.0.so) (211 samples, 5.98%)</title><rect x="22.4710%" y="324" width="5.9790%" height="15" fill="rgb(249,31,29)"/><text x="22.7210%" y="334.50">geos::ge..</text></g><g><title>geos::geomgraph::Edge::addIntersections (libgeos-3.8.0.so) (90 samples, 2.55%)</title><rect x="25.8997%" y="340" width="2.5503%" height="15" fill="rgb(225,111,53)"/><text x="26.1497%" y="350.50">ge..</text></g><g><title>geos::geomgraph::EdgeIntersectionList::add (libgeos-3.8.0.so) (44 samples, 1.25%)</title><rect x="27.2032%" y="356" width="1.2468%" height="15" fill="rgb(238,160,17)"/><text x="27.4532%" y="366.50"></text></g><g><title>std::vector&lt;geos::geomgraph::EdgeIntersection, std::allocator&lt;geos::geomgraph::EdgeIntersection&gt; &gt;::emplace_back&lt;geos::geom::Coordinate const&amp;, unsigned long&amp;, double&amp;&gt; (libgeos-3.8.0.so) (39 samples, 1.11%)</title><rect x="27.3449%" y="372" width="1.1051%" height="15" fill="rgb(214,148,48)"/><text x="27.5949%" y="382.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (433 samples, 12.27%)</title><rect x="16.2652%" y="276" width="12.2698%" height="15" fill="rgb(232,36,49)"/><text x="16.5152%" y="286.50">geos::geomgraph::i..</text></g><g><title>geos::geomgraph::GeometryGraph::computeEdgeIntersections (libgeos-3.8.0.so) (494 samples, 14.00%)</title><rect x="15.0751%" y="260" width="13.9983%" height="15" fill="rgb(209,103,24)"/><text x="15.3251%" y="270.50">geos::geomgraph::Geom..</text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::MonotoneChainEdge (libgeos-3.8.0.so) (70 samples, 1.98%)</title><rect x="30.6886%" y="356" width="1.9836%" height="15" fill="rgb(229,88,8)"/><text x="30.9386%" y="366.50">g..</text></g><g><title>geos::geomgraph::index::MonotoneChainIndexer::getChainStartIndices (libgeos-3.8.0.so) (64 samples, 1.81%)</title><rect x="30.8586%" y="372" width="1.8135%" height="15" fill="rgb(213,181,19)"/><text x="31.1086%" y="382.50">g..</text></g><g><title>geos::geomgraph::Edge::getMonotoneChainEdge (libgeos-3.8.0.so) (81 samples, 2.30%)</title><rect x="30.6319%" y="340" width="2.2953%" height="15" fill="rgb(254,191,54)"/><text x="30.8819%" y="350.50">g..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::add (libgeos-3.8.0.so) (99 samples, 2.81%)</title><rect x="30.5469%" y="308" width="2.8053%" height="15" fill="rgb(241,83,37)"/><text x="30.7969%" y="318.50">ge..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::add (libgeos-3.8.0.so) (98 samples, 2.78%)</title><rect x="30.5752%" y="324" width="2.7770%" height="15" fill="rgb(233,36,39)"/><text x="30.8252%" y="334.50">ge..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (152 samples, 4.31%)</title><rect x="30.2919%" y="292" width="4.3072%" height="15" fill="rgb(226,3,54)"/><text x="30.5419%" y="302.50">geos:..</text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (218 samples, 6.18%)</title><rect x="29.0734%" y="260" width="6.1774%" height="15" fill="rgb(245,192,40)"/><text x="29.3234%" y="270.50">geos::ge..</text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (217 samples, 6.15%)</title><rect x="29.1017%" y="276" width="6.1491%" height="15" fill="rgb(238,167,29)"/><text x="29.3517%" y="286.50">geos::ge..</text></g><g><title>operator new (new_op.cc:50) (47 samples, 1.33%)</title><rect x="38.1411%" y="324" width="1.3318%" height="15" fill="rgb(232,182,51)"/><text x="38.3911%" y="334.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (46 samples, 1.30%)</title><rect x="38.1695%" y="340" width="1.3035%" height="15" fill="rgb(231,60,39)"/><text x="38.4195%" y="350.50"></text></g><g><title>geos::operation::relate::EdgeEndBuilder::createEdgeEndForNext (libgeos-3.8.0.so) (131 samples, 3.71%)</title><rect x="35.7892%" y="292" width="3.7121%" height="15" fill="rgb(208,69,12)"/><text x="36.0392%" y="302.50">geos..</text></g><g><title>std::vector&lt;geos::geomgraph::EdgeEnd*, std::allocator&lt;geos::geomgraph::EdgeEnd*&gt; &gt;::_M_realloc_insert&lt;geos::geomgraph::EdgeEnd* const&amp;&gt; (libgeos-3.8.0.so) (75 samples, 2.13%)</title><rect x="37.3760%" y="308" width="2.1252%" height="15" fill="rgb(235,93,37)"/><text x="37.6260%" y="318.50">s..</text></g><g><title>operator new (new_op.cc:50) (40 samples, 1.13%)</title><rect x="40.5214%" y="308" width="1.1335%" height="15" fill="rgb(213,116,39)"/><text x="40.7714%" y="318.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (40 samples, 1.13%)</title><rect x="40.5214%" y="324" width="1.1335%" height="15" fill="rgb(222,207,29)"/><text x="40.7714%" y="334.50"></text></g><g><title>geos::operation::relate::EdgeEndBuilder::createEdgeEndForPrev (libgeos-3.8.0.so) (105 samples, 2.98%)</title><rect x="39.5013%" y="292" width="2.9753%" height="15" fill="rgb(206,96,30)"/><text x="39.7513%" y="302.50">geo..</text></g><g><title>geos::operation::relate::EdgeEndBuilder::computeEdgeEnds (libgeos-3.8.0.so) (266 samples, 7.54%)</title><rect x="35.2508%" y="260" width="7.5375%" height="15" fill="rgb(218,138,4)"/><text x="35.5008%" y="270.50">geos::oper..</text></g><g><title>geos::operation::relate::EdgeEndBuilder::computeEdgeEnds (libgeos-3.8.0.so) (262 samples, 7.42%)</title><rect x="35.3641%" y="276" width="7.4242%" height="15" fill="rgb(250,191,14)"/><text x="35.6141%" y="286.50">geos::oper..</text></g><g><title>geos::operation::relate::RelateNodeFactory::createNode (libgeos-3.8.0.so) (47 samples, 1.33%)</title><rect x="43.8368%" y="292" width="1.3318%" height="15" fill="rgb(239,60,40)"/><text x="44.0868%" y="302.50"></text></g><g><title>geos::geomgraph::NodeMap::addNode (libgeos-3.8.0.so) (91 samples, 2.58%)</title><rect x="43.2700%" y="276" width="2.5786%" height="15" fill="rgb(206,27,48)"/><text x="43.5200%" y="286.50">ge..</text></g><g><title>geos::operation::relate::RelateComputer::computeIntersectionNodes (libgeos-3.8.0.so) (138 samples, 3.91%)</title><rect x="42.7883%" y="260" width="3.9105%" height="15" fill="rgb(225,35,8)"/><text x="43.0383%" y="270.50">geos..</text></g><g><title>geos::operation::relate::EdgeEndBundle::EdgeEndBundle (libgeos-3.8.0.so) (89 samples, 2.52%)</title><rect x="48.6540%" y="308" width="2.5220%" height="15" fill="rgb(250,213,24)"/><text x="48.9040%" y="318.50">ge..</text></g><g><title>geos::operation::relate::EdgeEndBundle::insert (libgeos-3.8.0.so) (66 samples, 1.87%)</title><rect x="49.3058%" y="324" width="1.8702%" height="15" fill="rgb(247,123,22)"/><text x="49.5558%" y="334.50">g..</text></g><g><title>std::vector&lt;geos::geomgraph::EdgeEnd*, std::allocator&lt;geos::geomgraph::EdgeEnd*&gt; &gt;::_M_realloc_insert&lt;geos::geomgraph::EdgeEnd* const&amp;&gt; (libgeos-3.8.0.so) (64 samples, 1.81%)</title><rect x="49.3624%" y="340" width="1.8135%" height="15" fill="rgb(231,138,38)"/><text x="49.6124%" y="350.50">s..</text></g><g><title>operator new (new_op.cc:50) (57 samples, 1.62%)</title><rect x="49.5608%" y="356" width="1.6152%" height="15" fill="rgb(231,145,46)"/><text x="49.8108%" y="366.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (57 samples, 1.62%)</title><rect x="49.5608%" y="372" width="1.6152%" height="15" fill="rgb(251,118,11)"/><text x="49.8108%" y="382.50"></text></g><g><title>operator new (new_op.cc:50) (50 samples, 1.42%)</title><rect x="54.1230%" y="324" width="1.4168%" height="15" fill="rgb(217,147,25)"/><text x="54.3730%" y="334.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (50 samples, 1.42%)</title><rect x="54.1230%" y="340" width="1.4168%" height="15" fill="rgb(247,81,37)"/><text x="54.3730%" y="350.50"></text></g><g><title>std::_Rb_tree&lt;geos::geomgraph::EdgeEnd*, geos::geomgraph::EdgeEnd*, std::_Identity&lt;geos::geomgraph::EdgeEnd*&gt;, geos::geomgraph::EdgeEndLT, std::allocator&lt;geos::geomgraph::EdgeEnd*&gt; &gt;::_M_insert_unique&lt;geos::geomgraph::EdgeEnd* const&amp;&gt; (libgeos-3.8.0.so) (93 samples, 2.64%)</title><rect x="53.0745%" y="308" width="2.6353%" height="15" fill="rgb(209,12,38)"/><text x="53.3245%" y="318.50">st..</text></g><g><title>geos::geomgraph::Node::add (libgeos-3.8.0.so) (324 samples, 9.18%)</title><rect x="47.4072%" y="276" width="9.1811%" height="15" fill="rgb(227,1,9)"/><text x="47.6572%" y="286.50">geos::geomgra..</text></g><g><title>geos::operation::relate::EdgeEndBundleStar::insert (libgeos-3.8.0.so) (293 samples, 8.30%)</title><rect x="48.2856%" y="292" width="8.3026%" height="15" fill="rgb(248,47,43)"/><text x="48.5356%" y="302.50">geos::operat..</text></g><g><title>geos::operation::relate::RelateComputer::insertEdgeEnds (libgeos-3.8.0.so) (366 samples, 10.37%)</title><rect x="47.3789%" y="260" width="10.3712%" height="15" fill="rgb(221,10,30)"/><text x="47.6289%" y="270.50">geos::operation..</text></g><g><title>geos::geomgraph::NodeMap::add (libgeos-3.8.0.so) (41 samples, 1.16%)</title><rect x="56.5883%" y="276" width="1.1618%" height="15" fill="rgb(210,229,1)"/><text x="56.8383%" y="286.50"></text></g><g><title>geos::geomgraph::NodeMap::addNode (libgeos-3.8.0.so) (38 samples, 1.08%)</title><rect x="56.6733%" y="292" width="1.0768%" height="15" fill="rgb(222,148,37)"/><text x="56.9233%" y="302.50"></text></g><g><title>geos::operation::relate::EdgeEndBundle::computeLabel (libgeos-3.8.0.so) (37 samples, 1.05%)</title><rect x="59.5069%" y="308" width="1.0485%" height="15" fill="rgb(234,67,33)"/><text x="59.7569%" y="318.50"></text></g><g><title>geos::geomgraph::EdgeEndStar::computeEdgeEndLabels (libgeos-3.8.0.so) (58 samples, 1.64%)</title><rect x="59.3086%" y="292" width="1.6435%" height="15" fill="rgb(247,98,35)"/><text x="59.5586%" y="302.50"></text></g><g><title>geos::geomgraph::EdgeEndStar::computeLabelling (libgeos-3.8.0.so) (124 samples, 3.51%)</title><rect x="58.6285%" y="276" width="3.5137%" height="15" fill="rgb(247,138,52)"/><text x="58.8785%" y="286.50">geo..</text></g><g><title>geos::operation::relate::RelateComputer::labelNodeEdges (libgeos-3.8.0.so) (133 samples, 3.77%)</title><rect x="58.5718%" y="260" width="3.7688%" height="15" fill="rgb(213,79,30)"/><text x="58.8218%" y="270.50">geos..</text></g><g><title>geos::operation::relate::RelateComputer::updateIM (libgeos-3.8.0.so) (38 samples, 1.08%)</title><rect x="62.3406%" y="260" width="1.0768%" height="15" fill="rgb(246,177,23)"/><text x="62.5906%" y="270.50"></text></g><g><title>geos::operation::relate::RelateOp::getIntersectionMatrix (libgeos-3.8.0.so) (1,731 samples, 49.05%)</title><rect x="14.4233%" y="228" width="49.0507%" height="15" fill="rgb(230,62,27)"/><text x="14.6733%" y="238.50">geos::operation::relate::RelateOp::getIntersectionMatrix (libgeos-3.8.0.so)</text></g><g><title>geos::operation::relate::RelateComputer::computeIM (libgeos-3.8.0.so) (1,731 samples, 49.05%)</title><rect x="14.4233%" y="244" width="49.0507%" height="15" fill="rgb(216,154,8)"/><text x="14.6733%" y="254.50">geos::operation::relate::RelateComputer::computeIM (libgeos-3.8.0.so)</text></g><g><title>geos::geom::Geometry::relate (libgeos-3.8.0.so) (2,159 samples, 61.18%)</title><rect x="2.4936%" y="196" width="61.1788%" height="15" fill="rgb(244,35,45)"/><text x="2.7436%" y="206.50">geos::geom::Geometry::relate (libgeos-3.8.0.so)</text></g><g><title>geos::operation::relate::RelateOp::relate (libgeos-3.8.0.so) (2,159 samples, 61.18%)</title><rect x="2.4936%" y="212" width="61.1788%" height="15" fill="rgb(251,115,12)"/><text x="2.7436%" y="222.50">geos::operation::relate::RelateOp::relate (libgeos-3.8.0.so)</text></g><g><title>GEOSOverlaps_r (libgeos_c.so.1.13.1) (2,187 samples, 61.97%)</title><rect x="1.7285%" y="164" width="61.9722%" height="15" fill="rgb(240,54,50)"/><text x="1.9785%" y="174.50">GEOSOverlaps_r (libgeos_c.so.1.13.1)</text></g><g><title>geos::geom::Geometry::overlaps (libgeos-3.8.0.so) (2,186 samples, 61.94%)</title><rect x="1.7569%" y="180" width="61.9439%" height="15" fill="rgb(233,84,52)"/><text x="2.0069%" y="190.50">geos::geom::Geometry::overlaps (libgeos-3.8.0.so)</text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (52 samples, 1.47%)</title><rect x="69.1414%" y="308" width="1.4735%" height="15" fill="rgb(207,117,47)"/><text x="69.3914%" y="318.50"></text></g><g><title>geos::io::WKBReader::readCoordinateSequence (libgeos-3.8.0.so) (144 samples, 4.08%)</title><rect x="66.6194%" y="276" width="4.0805%" height="15" fill="rgb(249,43,39)"/><text x="66.8694%" y="286.50">geos..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.0.so) (101 samples, 2.86%)</title><rect x="67.8379%" y="292" width="2.8620%" height="15" fill="rgb(209,38,44)"/><text x="68.0879%" y="302.50">ge..</text></g><g><title>geos::io::WKBReader::readLinearRing (libgeos-3.8.0.so) (179 samples, 5.07%)</title><rect x="65.7693%" y="260" width="5.0723%" height="15" fill="rgb(236,212,23)"/><text x="66.0193%" y="270.50">geos::..</text></g><g><title>geos::io::WKBReader::readPolygon (libgeos-3.8.0.so) (191 samples, 5.41%)</title><rect x="65.5143%" y="244" width="5.4123%" height="15" fill="rgb(242,79,21)"/><text x="65.7643%" y="254.50">geos::i..</text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.0.so) (240 samples, 6.80%)</title><rect x="64.7776%" y="212" width="6.8008%" height="15" fill="rgb(211,96,35)"/><text x="65.0276%" y="222.50">geos::io:..</text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.0.so) (238 samples, 6.74%)</title><rect x="64.8342%" y="228" width="6.7441%" height="15" fill="rgb(253,215,40)"/><text x="65.0842%" y="238.50">geos::io:..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (100 samples, 2.83%)</title><rect x="72.5701%" y="212" width="2.8337%" height="15" fill="rgb(211,81,21)"/><text x="72.8201%" y="222.50">st..</text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.1) (423 samples, 11.99%)</title><rect x="64.0691%" y="196" width="11.9864%" height="15" fill="rgb(208,190,38)"/><text x="64.3191%" y="206.50">GEOSGeomFromWKB_bu..</text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (448 samples, 12.69%)</title><rect x="63.7574%" y="164" width="12.6948%" height="15" fill="rgb(235,213,38)"/><text x="64.0074%" y="174.50">OGRGeometry::export..</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (441 samples, 12.50%)</title><rect x="63.9558%" y="180" width="12.4965%" height="15" fill="rgb(237,122,38)"/><text x="64.2058%" y="190.50">convertToGEOSGeom (..</text></g><g><title>0x7f8b8ddeb7d8 (libc-2.27.so) (102 samples, 2.89%)</title><rect x="78.3791%" y="228" width="2.8903%" height="15" fill="rgb(244,218,35)"/><text x="78.6291%" y="238.50">0x..</text></g><g><title>OGRGEOSBooleanPredicate (libgdal.so.26.0.4) (2,816 samples, 79.80%)</title><rect x="1.6719%" y="148" width="79.7960%" height="15" fill="rgb(240,68,47)"/><text x="1.9219%" y="158.50">OGRGEOSBooleanPredicate (libgdal.so.26.0.4)</text></g><g><title>initGEOS_r (libgeos_c.so.1.13.1) (139 samples, 3.94%)</title><rect x="77.5290%" y="164" width="3.9388%" height="15" fill="rgb(210,16,53)"/><text x="77.7790%" y="174.50">init..</text></g><g><title>GEOS_init_r (libgeos_c.so.1.13.1) (137 samples, 3.88%)</title><rect x="77.5857%" y="180" width="3.8821%" height="15" fill="rgb(235,124,12)"/><text x="77.8357%" y="190.50">GEOS..</text></g><g><title>operator new (new_op.cc:50) (130 samples, 3.68%)</title><rect x="77.7841%" y="196" width="3.6838%" height="15" fill="rgb(224,169,11)"/><text x="78.0341%" y="206.50">oper..</text></g><g><title>__libc_malloc (libc-2.27.so) (130 samples, 3.68%)</title><rect x="77.7841%" y="212" width="3.6838%" height="15" fill="rgb(250,166,2)"/><text x="78.0341%" y="222.50">__li..</text></g><g><title>0x7f8b8dda280a (libc-2.27.so) (36 samples, 1.02%)</title><rect x="89.8838%" y="244" width="1.0201%" height="15" fill="rgb(242,216,29)"/><text x="90.1338%" y="254.50"></text></g><g><title>CPLReplacePointByLocalePoint (libgdal.so.26.0.4) (53 samples, 1.50%)</title><rect x="91.6407%" y="244" width="1.5018%" height="15" fill="rgb(230,116,27)"/><text x="91.8907%" y="254.50"></text></g><g><title>localeconv (libc-2.27.so) (38 samples, 1.08%)</title><rect x="92.0657%" y="260" width="1.0768%" height="15" fill="rgb(228,99,48)"/><text x="92.3157%" y="270.50"></text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (292 samples, 8.27%)</title><rect x="85.1799%" y="228" width="8.2743%" height="15" fill="rgb(253,11,6)"/><text x="85.4299%" y="238.50">CPLStrtodDel..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (344 samples, 9.75%)</title><rect x="84.3865%" y="212" width="9.7478%" height="15" fill="rgb(247,143,39)"/><text x="84.6365%" y="222.50">OGRWktReadPoin..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (389 samples, 11.02%)</title><rect x="83.2530%" y="196" width="11.0230%" height="15" fill="rgb(236,97,10)"/><text x="83.5030%" y="206.50">OGRPolygon::impo..</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (435 samples, 12.33%)</title><rect x="82.2329%" y="180" width="12.3264%" height="15" fill="rgb(233,208,19)"/><text x="82.4829%" y="190.50">OGRPolygon::import..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (464 samples, 13.15%)</title><rect x="81.5245%" y="148" width="13.1482%" height="15" fill="rgb(216,164,2)"/><text x="81.7745%" y="158.50">OGRGeometryFactory::..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (462 samples, 13.09%)</title><rect x="81.5812%" y="164" width="13.0915%" height="15" fill="rgb(220,129,5)"/><text x="81.8312%" y="174.50">OGRGeometryFactory::..</text></g><g><title>OGRPolygon::~OGRPolygon (libgdal.so.26.0.4) (39 samples, 1.11%)</title><rect x="94.7010%" y="148" width="1.1051%" height="15" fill="rgb(242,17,10)"/><text x="94.9510%" y="158.50"></text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::to_string&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:917) (36 samples, 1.02%)</title><rect x="96.5996%" y="180" width="1.0201%" height="15" fill="rgb(242,107,0)"/><text x="96.8496%" y="190.50"></text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (46 samples, 1.30%)</title><rect x="96.3729%" y="164" width="1.3035%" height="15" fill="rgb(251,28,31)"/><text x="96.6229%" y="174.50"></text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (67 samples, 1.90%)</title><rect x="95.8629%" y="148" width="1.8986%" height="15" fill="rgb(233,223,10)"/><text x="96.1129%" y="158.50">a..</text></g><g><title>ST_Overlaps (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4814) (3,464 samples, 98.16%)</title><rect x="1.4452%" y="84" width="98.1581%" height="15" fill="rgb(215,21,27)"/><text x="1.6952%" y="94.50">ST_Overlaps (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4814)</text></g><g><title>ST_Overlaps (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4835) (3,464 samples, 98.16%)</title><rect x="1.4452%" y="100" width="98.1581%" height="15" fill="rgb(232,23,21)"/><text x="1.6952%" y="110.50">ST_Overlaps (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4835)</text></g><g><title>arctern::gis::ST_Overlaps (gis_functions.cpp:244) (3,464 samples, 98.16%)</title><rect x="1.4452%" y="116" width="98.1581%" height="15" fill="rgb(244,5,23)"/><text x="1.6952%" y="126.50">arctern::gis::ST_Overlaps (gis_functions.cpp:244)</text></g><g><title>arctern::gis::gdal::ST_Overlaps (gis_functions.cpp:756) (3,464 samples, 98.16%)</title><rect x="1.4452%" y="132" width="98.1581%" height="15" fill="rgb(226,81,46)"/><text x="1.6952%" y="142.50">arctern::gis::gdal::ST_Overlaps (gis_functions.cpp:756)</text></g><g><title>all (3,529 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (3,493 samples, 98.98%)</title><rect x="1.0201%" y="52" width="98.9799%" height="15" fill="rgb(212,68,19)"/><text x="1.2701%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_Overlaps (profile_geo.py:55) (3,479 samples, 98.58%)</title><rect x="1.4168%" y="68" width="98.5832%" height="15" fill="rgb(240,187,13)"/><text x="1.6668%" y="78.50">test_ST_Overlaps (profile_geo.py:55)</text></g></svg></svg>