<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="645.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="645.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (pyarrow/__init__.py:47) (4 samples, 1.34%)</title><rect x="0.0000%" y="148" width="1.3423%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.34%)</title><rect x="0.0000%" y="164" width="1.3423%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.34%)</title><rect x="0.0000%" y="180" width="1.3423%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.34%)</title><rect x="0.0000%" y="196" width="1.3423%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.34%)</title><rect x="0.0000%" y="212" width="1.3423%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.34%)</title><rect x="0.0000%" y="228" width="1.3423%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="238.50"></text></g><g><title>&lt;module&gt; (pyarrow/compat.py:24) (4 samples, 1.34%)</title><rect x="0.0000%" y="244" width="1.3423%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.34%)</title><rect x="0.0000%" y="260" width="1.3423%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.34%)</title><rect x="0.0000%" y="276" width="1.3423%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.34%)</title><rect x="0.0000%" y="292" width="1.3423%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.34%)</title><rect x="0.0000%" y="308" width="1.3423%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.34%)</title><rect x="0.0000%" y="324" width="1.3423%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="334.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:15) (11 samples, 3.69%)</title><rect x="0.0000%" y="52" width="3.6913%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="62.50">&lt;mod..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 3.69%)</title><rect x="0.0000%" y="68" width="3.6913%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="78.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 3.69%)</title><rect x="0.0000%" y="84" width="3.6913%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="94.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 3.69%)</title><rect x="0.0000%" y="100" width="3.6913%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="110.50">_loa..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 3.69%)</title><rect x="0.0000%" y="116" width="3.6913%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="126.50">exec..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 3.69%)</title><rect x="0.0000%" y="132" width="3.6913%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="142.50">_cal..</text></g><g><title>&lt;module&gt; (pyarrow/__init__.py:49) (7 samples, 2.35%)</title><rect x="1.3423%" y="148" width="2.3490%" height="15" fill="rgb(221,200,47)"/><text x="1.5923%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 2.35%)</title><rect x="1.3423%" y="164" width="2.3490%" height="15" fill="rgb(226,26,5)"/><text x="1.5923%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 2.35%)</title><rect x="1.3423%" y="180" width="2.3490%" height="15" fill="rgb(249,33,26)"/><text x="1.5923%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.01%)</title><rect x="1.6779%" y="196" width="2.0134%" height="15" fill="rgb(235,183,28)"/><text x="1.9279%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (6 samples, 2.01%)</title><rect x="1.6779%" y="212" width="2.0134%" height="15" fill="rgb(221,5,38)"/><text x="1.9279%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.01%)</title><rect x="1.6779%" y="228" width="2.0134%" height="15" fill="rgb(247,18,42)"/><text x="1.9279%" y="238.50">_..</text></g><g><title>__pyx_pymod_exec_lib (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (6 samples, 2.01%)</title><rect x="1.6779%" y="244" width="2.0134%" height="15" fill="rgb(241,131,45)"/><text x="1.9279%" y="254.50">_..</text></g><g><title>__Pyx_PyObject_Call [clone .constprop.2031] (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (6 samples, 2.01%)</title><rect x="1.6779%" y="260" width="2.0134%" height="15" fill="rgb(249,31,29)"/><text x="1.9279%" y="270.50">_..</text></g><g><title>__pyx_tp_new_7pyarrow_3lib__FunctionContext (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (6 samples, 2.01%)</title><rect x="1.6779%" y="276" width="2.0134%" height="15" fill="rgb(225,111,53)"/><text x="1.9279%" y="286.50">_..</text></g><g><title>arrow::compute::FunctionContext::FunctionContext (libarrow.so.16.0.0) (6 samples, 2.01%)</title><rect x="1.6779%" y="292" width="2.0134%" height="15" fill="rgb(238,160,17)"/><text x="1.9279%" y="302.50">a..</text></g><g><title>arrow::internal::CpuInfo::GetInstance (libarrow.so.16.0.0) (6 samples, 2.01%)</title><rect x="1.6779%" y="308" width="2.0134%" height="15" fill="rgb(214,148,48)"/><text x="1.9279%" y="318.50">a..</text></g><g><title>__pthread_once_slow (libpthread-2.27.so) (6 samples, 2.01%)</title><rect x="1.6779%" y="324" width="2.0134%" height="15" fill="rgb(232,36,49)"/><text x="1.9279%" y="334.50">_..</text></g><g><title>arrow::internal::CpuInfo::Init (libarrow.so.16.0.0) (6 samples, 2.01%)</title><rect x="1.6779%" y="340" width="2.0134%" height="15" fill="rgb(209,103,24)"/><text x="1.9279%" y="350.50">a..</text></g><g><title>std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (istream-string.cc:141) (6 samples, 2.01%)</title><rect x="1.6779%" y="356" width="2.0134%" height="15" fill="rgb(229,88,8)"/><text x="1.9279%" y="366.50">s..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::erase (basic_string.h:1807) (6 samples, 2.01%)</title><rect x="1.6779%" y="372" width="2.0134%" height="15" fill="rgb(213,181,19)"/><text x="1.9279%" y="382.50">s..</text></g><g><title>&lt;module&gt; (pandas/core/api.py:15) (4 samples, 1.34%)</title><rect x="5.3691%" y="244" width="1.3423%" height="15" fill="rgb(254,191,54)"/><text x="5.6191%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.34%)</title><rect x="5.3691%" y="260" width="1.3423%" height="15" fill="rgb(241,83,37)"/><text x="5.6191%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.34%)</title><rect x="5.3691%" y="276" width="1.3423%" height="15" fill="rgb(233,36,39)"/><text x="5.6191%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.34%)</title><rect x="5.3691%" y="292" width="1.3423%" height="15" fill="rgb(226,3,54)"/><text x="5.6191%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.34%)</title><rect x="5.3691%" y="308" width="1.3423%" height="15" fill="rgb(245,192,40)"/><text x="5.6191%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.34%)</title><rect x="5.3691%" y="324" width="1.3423%" height="15" fill="rgb(238,167,29)"/><text x="5.6191%" y="334.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py:104) (5 samples, 1.68%)</title><rect x="6.7114%" y="532" width="1.6779%" height="15" fill="rgb(232,182,51)"/><text x="6.9614%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.68%)</title><rect x="6.7114%" y="548" width="1.6779%" height="15" fill="rgb(231,60,39)"/><text x="6.9614%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.68%)</title><rect x="6.7114%" y="564" width="1.6779%" height="15" fill="rgb(208,69,12)"/><text x="6.9614%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.68%)</title><rect x="6.7114%" y="580" width="1.6779%" height="15" fill="rgb(235,93,37)"/><text x="6.9614%" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.68%)</title><rect x="6.7114%" y="596" width="1.6779%" height="15" fill="rgb(213,116,39)"/><text x="6.9614%" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.68%)</title><rect x="6.7114%" y="612" width="1.6779%" height="15" fill="rgb(222,207,29)"/><text x="6.9614%" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:60) (8 samples, 2.68%)</title><rect x="6.7114%" y="436" width="2.6846%" height="15" fill="rgb(206,96,30)"/><text x="6.9614%" y="446.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 2.68%)</title><rect x="6.7114%" y="452" width="2.6846%" height="15" fill="rgb(218,138,4)"/><text x="6.9614%" y="462.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 2.68%)</title><rect x="6.7114%" y="468" width="2.6846%" height="15" fill="rgb(250,191,14)"/><text x="6.9614%" y="478.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 2.68%)</title><rect x="6.7114%" y="484" width="2.6846%" height="15" fill="rgb(239,60,40)"/><text x="6.9614%" y="494.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 2.68%)</title><rect x="6.7114%" y="500" width="2.6846%" height="15" fill="rgb(206,27,48)"/><text x="6.9614%" y="510.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 2.68%)</title><rect x="6.7114%" y="516" width="2.6846%" height="15" fill="rgb(225,35,8)"/><text x="6.9614%" y="526.50">_c..</text></g><g><title>&lt;module&gt; (profile_geo.py:16) (18 samples, 6.04%)</title><rect x="3.6913%" y="52" width="6.0403%" height="15" fill="rgb(250,213,24)"/><text x="3.9413%" y="62.50">&lt;module&gt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (18 samples, 6.04%)</title><rect x="3.6913%" y="68" width="6.0403%" height="15" fill="rgb(247,123,22)"/><text x="3.9413%" y="78.50">_find_an..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (18 samples, 6.04%)</title><rect x="3.6913%" y="84" width="6.0403%" height="15" fill="rgb(231,138,38)"/><text x="3.9413%" y="94.50">_find_an..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (18 samples, 6.04%)</title><rect x="3.6913%" y="100" width="6.0403%" height="15" fill="rgb(231,145,46)"/><text x="3.9413%" y="110.50">_load_un..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (18 samples, 6.04%)</title><rect x="3.6913%" y="116" width="6.0403%" height="15" fill="rgb(251,118,11)"/><text x="3.9413%" y="126.50">exec_mod..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (18 samples, 6.04%)</title><rect x="3.6913%" y="132" width="6.0403%" height="15" fill="rgb(217,147,25)"/><text x="3.9413%" y="142.50">_call_wi..</text></g><g><title>&lt;module&gt; (pandas/__init__.py:54) (13 samples, 4.36%)</title><rect x="5.3691%" y="148" width="4.3624%" height="15" fill="rgb(247,81,37)"/><text x="5.6191%" y="158.50">&lt;modu..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (13 samples, 4.36%)</title><rect x="5.3691%" y="164" width="4.3624%" height="15" fill="rgb(209,12,38)"/><text x="5.6191%" y="174.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (13 samples, 4.36%)</title><rect x="5.3691%" y="180" width="4.3624%" height="15" fill="rgb(227,1,9)"/><text x="5.6191%" y="190.50">_find..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (13 samples, 4.36%)</title><rect x="5.3691%" y="196" width="4.3624%" height="15" fill="rgb(248,47,43)"/><text x="5.6191%" y="206.50">_load..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (13 samples, 4.36%)</title><rect x="5.3691%" y="212" width="4.3624%" height="15" fill="rgb(221,10,30)"/><text x="5.6191%" y="222.50">exec_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 4.36%)</title><rect x="5.3691%" y="228" width="4.3624%" height="15" fill="rgb(210,229,1)"/><text x="5.6191%" y="238.50">_call..</text></g><g><title>&lt;module&gt; (pandas/core/api.py:29) (9 samples, 3.02%)</title><rect x="6.7114%" y="244" width="3.0201%" height="15" fill="rgb(222,148,37)"/><text x="6.9614%" y="254.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 3.02%)</title><rect x="6.7114%" y="260" width="3.0201%" height="15" fill="rgb(234,67,33)"/><text x="6.9614%" y="270.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 3.02%)</title><rect x="6.7114%" y="276" width="3.0201%" height="15" fill="rgb(247,98,35)"/><text x="6.9614%" y="286.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 3.02%)</title><rect x="6.7114%" y="292" width="3.0201%" height="15" fill="rgb(247,138,52)"/><text x="6.9614%" y="302.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 3.02%)</title><rect x="6.7114%" y="308" width="3.0201%" height="15" fill="rgb(213,79,30)"/><text x="6.9614%" y="318.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 3.02%)</title><rect x="6.7114%" y="324" width="3.0201%" height="15" fill="rgb(246,177,23)"/><text x="6.9614%" y="334.50">_ca..</text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (9 samples, 3.02%)</title><rect x="6.7114%" y="340" width="3.0201%" height="15" fill="rgb(230,62,27)"/><text x="6.9614%" y="350.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 3.02%)</title><rect x="6.7114%" y="356" width="3.0201%" height="15" fill="rgb(216,154,8)"/><text x="6.9614%" y="366.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 3.02%)</title><rect x="6.7114%" y="372" width="3.0201%" height="15" fill="rgb(244,35,45)"/><text x="6.9614%" y="382.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 3.02%)</title><rect x="6.7114%" y="388" width="3.0201%" height="15" fill="rgb(251,115,12)"/><text x="6.9614%" y="398.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 3.02%)</title><rect x="6.7114%" y="404" width="3.0201%" height="15" fill="rgb(240,54,50)"/><text x="6.9614%" y="414.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 3.02%)</title><rect x="6.7114%" y="420" width="3.0201%" height="15" fill="rgb(233,84,52)"/><text x="6.9614%" y="430.50">_ca..</text></g><g><title>&lt;module&gt; (profile_geo.py:17) (3 samples, 1.01%)</title><rect x="9.7315%" y="52" width="1.0067%" height="15" fill="rgb(207,117,47)"/><text x="9.9815%" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.01%)</title><rect x="9.7315%" y="68" width="1.0067%" height="15" fill="rgb(249,43,39)"/><text x="9.9815%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.01%)</title><rect x="9.7315%" y="84" width="1.0067%" height="15" fill="rgb(209,38,44)"/><text x="9.9815%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.01%)</title><rect x="9.7315%" y="100" width="1.0067%" height="15" fill="rgb(236,212,23)"/><text x="9.9815%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.01%)</title><rect x="9.7315%" y="116" width="1.0067%" height="15" fill="rgb(242,79,21)"/><text x="9.9815%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.01%)</title><rect x="9.7315%" y="132" width="1.0067%" height="15" fill="rgb(211,96,35)"/><text x="9.9815%" y="142.50"></text></g><g><title>&lt;module&gt; (osgeo/__init__.py:41) (3 samples, 1.01%)</title><rect x="9.7315%" y="148" width="1.0067%" height="15" fill="rgb(253,215,40)"/><text x="9.9815%" y="158.50"></text></g><g><title>swig_import_helper (osgeo/__init__.py:24) (3 samples, 1.01%)</title><rect x="9.7315%" y="164" width="1.0067%" height="15" fill="rgb(211,81,21)"/><text x="9.9815%" y="174.50"></text></g><g><title>load_module (imp.py:242) (3 samples, 1.01%)</title><rect x="9.7315%" y="180" width="1.0067%" height="15" fill="rgb(208,190,38)"/><text x="9.9815%" y="190.50"></text></g><g><title>load_dynamic (imp.py:342) (3 samples, 1.01%)</title><rect x="9.7315%" y="196" width="1.0067%" height="15" fill="rgb(235,213,38)"/><text x="9.9815%" y="206.50"></text></g><g><title>_load (&lt;frozen importlib._bootstrap&gt;:696) (3 samples, 1.01%)</title><rect x="9.7315%" y="212" width="1.0067%" height="15" fill="rgb(237,122,38)"/><text x="9.9815%" y="222.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (3 samples, 1.01%)</title><rect x="9.7315%" y="228" width="1.0067%" height="15" fill="rgb(244,218,35)"/><text x="9.9815%" y="238.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:583) (3 samples, 1.01%)</title><rect x="9.7315%" y="244" width="1.0067%" height="15" fill="rgb(240,68,47)"/><text x="9.9815%" y="254.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1043) (3 samples, 1.01%)</title><rect x="9.7315%" y="260" width="1.0067%" height="15" fill="rgb(210,16,53)"/><text x="9.9815%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.01%)</title><rect x="9.7315%" y="276" width="1.0067%" height="15" fill="rgb(235,124,12)"/><text x="9.9815%" y="286.50"></text></g><g><title>dlopen (libdl-2.27.so) (3 samples, 1.01%)</title><rect x="9.7315%" y="292" width="1.0067%" height="15" fill="rgb(224,169,11)"/><text x="9.9815%" y="302.50"></text></g><g><title>0x7f5e0b618735 (libdl-2.27.so) (3 samples, 1.01%)</title><rect x="9.7315%" y="308" width="1.0067%" height="15" fill="rgb(250,166,2)"/><text x="9.9815%" y="318.50"></text></g><g><title>_dl_catch_error (libc-2.27.so) (3 samples, 1.01%)</title><rect x="9.7315%" y="324" width="1.0067%" height="15" fill="rgb(242,216,29)"/><text x="9.9815%" y="334.50"></text></g><g><title>_dl_catch_exception (libc-2.27.so) (3 samples, 1.01%)</title><rect x="9.7315%" y="340" width="1.0067%" height="15" fill="rgb(230,116,27)"/><text x="9.9815%" y="350.50"></text></g><g><title>0x7f5e0b617f96 (libdl-2.27.so) (3 samples, 1.01%)</title><rect x="9.7315%" y="356" width="1.0067%" height="15" fill="rgb(228,99,48)"/><text x="9.9815%" y="366.50"></text></g><g><title>0x7f5e0be3f7ca (ld-2.27.so) (3 samples, 1.01%)</title><rect x="9.7315%" y="372" width="1.0067%" height="15" fill="rgb(253,11,6)"/><text x="9.9815%" y="382.50"></text></g><g><title>_dl_catch_exception (libc-2.27.so) (3 samples, 1.01%)</title><rect x="9.7315%" y="388" width="1.0067%" height="15" fill="rgb(247,143,39)"/><text x="9.9815%" y="398.50"></text></g><g><title>0x7f5e0be400bd (ld-2.27.so) (3 samples, 1.01%)</title><rect x="9.7315%" y="404" width="1.0067%" height="15" fill="rgb(236,97,10)"/><text x="9.9815%" y="414.50"></text></g><g><title>0x7f5e0be37af9 (ld-2.27.so) (3 samples, 1.01%)</title><rect x="9.7315%" y="420" width="1.0067%" height="15" fill="rgb(233,208,19)"/><text x="9.9815%" y="430.50"></text></g><g><title>0x7f5e0be361ef (ld-2.27.so) (3 samples, 1.01%)</title><rect x="9.7315%" y="436" width="1.0067%" height="15" fill="rgb(216,164,2)"/><text x="9.9815%" y="446.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:18) (3 samples, 1.01%)</title><rect x="10.7383%" y="52" width="1.0067%" height="15" fill="rgb(220,129,5)"/><text x="10.9883%" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.01%)</title><rect x="10.7383%" y="68" width="1.0067%" height="15" fill="rgb(242,17,10)"/><text x="10.9883%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.01%)</title><rect x="10.7383%" y="84" width="1.0067%" height="15" fill="rgb(242,107,0)"/><text x="10.9883%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.01%)</title><rect x="10.7383%" y="100" width="1.0067%" height="15" fill="rgb(251,28,31)"/><text x="10.9883%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.01%)</title><rect x="10.7383%" y="116" width="1.0067%" height="15" fill="rgb(233,223,10)"/><text x="10.9883%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.01%)</title><rect x="10.7383%" y="132" width="1.0067%" height="15" fill="rgb(215,21,27)"/><text x="10.9883%" y="142.50"></text></g><g><title>&lt;module&gt; (arctern_gis/__init__.py:16) (3 samples, 1.01%)</title><rect x="10.7383%" y="148" width="1.0067%" height="15" fill="rgb(232,23,21)"/><text x="10.9883%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.01%)</title><rect x="10.7383%" y="164" width="1.0067%" height="15" fill="rgb(244,5,23)"/><text x="10.9883%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.01%)</title><rect x="10.7383%" y="180" width="1.0067%" height="15" fill="rgb(226,81,46)"/><text x="10.9883%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (3 samples, 1.01%)</title><rect x="10.7383%" y="196" width="1.0067%" height="15" fill="rgb(247,70,30)"/><text x="10.9883%" y="206.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:583) (3 samples, 1.01%)</title><rect x="10.7383%" y="212" width="1.0067%" height="15" fill="rgb(212,68,19)"/><text x="10.9883%" y="222.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1043) (3 samples, 1.01%)</title><rect x="10.7383%" y="228" width="1.0067%" height="15" fill="rgb(240,187,13)"/><text x="10.9883%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.01%)</title><rect x="10.7383%" y="244" width="1.0067%" height="15" fill="rgb(223,113,26)"/><text x="10.9883%" y="254.50"></text></g><g><title>dlopen (libdl-2.27.so) (3 samples, 1.01%)</title><rect x="10.7383%" y="260" width="1.0067%" height="15" fill="rgb(206,192,2)"/><text x="10.9883%" y="270.50"></text></g><g><title>0x7f5e0b618735 (libdl-2.27.so) (3 samples, 1.01%)</title><rect x="10.7383%" y="276" width="1.0067%" height="15" fill="rgb(241,108,4)"/><text x="10.9883%" y="286.50"></text></g><g><title>_dl_catch_error (libc-2.27.so) (3 samples, 1.01%)</title><rect x="10.7383%" y="292" width="1.0067%" height="15" fill="rgb(247,173,49)"/><text x="10.9883%" y="302.50"></text></g><g><title>_dl_catch_exception (libc-2.27.so) (3 samples, 1.01%)</title><rect x="10.7383%" y="308" width="1.0067%" height="15" fill="rgb(224,114,35)"/><text x="10.9883%" y="318.50"></text></g><g><title>0x7f5e0b617f96 (libdl-2.27.so) (3 samples, 1.01%)</title><rect x="10.7383%" y="324" width="1.0067%" height="15" fill="rgb(245,159,27)"/><text x="10.9883%" y="334.50"></text></g><g><title>0x7f5e0be3f7ca (ld-2.27.so) (3 samples, 1.01%)</title><rect x="10.7383%" y="340" width="1.0067%" height="15" fill="rgb(245,172,44)"/><text x="10.9883%" y="350.50"></text></g><g><title>_dl_catch_exception (libc-2.27.so) (3 samples, 1.01%)</title><rect x="10.7383%" y="356" width="1.0067%" height="15" fill="rgb(236,23,11)"/><text x="10.9883%" y="366.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:440) (8 samples, 2.68%)</title><rect x="12.7517%" y="100" width="2.6846%" height="15" fill="rgb(205,117,38)"/><text x="13.0017%" y="110.50">sa..</text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:74) (8 samples, 2.68%)</title><rect x="12.7517%" y="116" width="2.6846%" height="15" fill="rgb(237,72,25)"/><text x="13.0017%" y="126.50">ma..</text></g><g><title>construct_1d_object_array_from_listlike (pandas/core/dtypes/cast.py:1488) (7 samples, 2.35%)</title><rect x="13.0872%" y="132" width="2.3490%" height="15" fill="rgb(244,70,9)"/><text x="13.3372%" y="142.50">c..</text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (7 samples, 2.35%)</title><rect x="13.0872%" y="148" width="2.3490%" height="15" fill="rgb(217,125,39)"/><text x="13.3372%" y="158.50">a..</text></g><g><title>PyArray_CopyObject (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (7 samples, 2.35%)</title><rect x="13.0872%" y="164" width="2.3490%" height="15" fill="rgb(235,36,10)"/><text x="13.3372%" y="174.50">P..</text></g><g><title>PyArray_GetArrayParamsFromObject (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (7 samples, 2.35%)</title><rect x="13.0872%" y="180" width="2.3490%" height="15" fill="rgb(251,123,47)"/><text x="13.3372%" y="190.50">P..</text></g><g><title>discover_dimensions (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (7 samples, 2.35%)</title><rect x="13.0872%" y="196" width="2.3490%" height="15" fill="rgb(221,13,13)"/><text x="13.3372%" y="206.50">d..</text></g><g><title>discover_dimensions (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (6 samples, 2.01%)</title><rect x="13.4228%" y="212" width="2.0134%" height="15" fill="rgb(238,131,9)"/><text x="13.6728%" y="222.50">d..</text></g><g><title>test_ST_Envelope_Aggr (profile_geo.py:266) (12 samples, 4.03%)</title><rect x="11.7450%" y="68" width="4.0268%" height="15" fill="rgb(211,50,8)"/><text x="11.9950%" y="78.50">test..</text></g><g><title>__init__ (pandas/core/series.py:305) (9 samples, 3.02%)</title><rect x="12.7517%" y="84" width="3.0201%" height="15" fill="rgb(245,182,24)"/><text x="13.0017%" y="94.50">__i..</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkt (gis_functions.cpp:213) (4 samples, 1.34%)</title><rect x="16.4430%" y="148" width="1.3423%" height="15" fill="rgb(242,14,37)"/><text x="16.6930%" y="158.50"></text></g><g><title>arrow::Array::IsNull (array.h:307) (4 samples, 1.34%)</title><rect x="16.4430%" y="164" width="1.3423%" height="15" fill="rgb(246,228,12)"/><text x="16.6930%" y="174.50"></text></g><g><title>std::__shared_ptr_access&lt;arrow::ArrayData, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt; (shared_ptr_base.h:970) (3 samples, 1.01%)</title><rect x="16.7785%" y="180" width="1.0067%" height="15" fill="rgb(213,55,15)"/><text x="17.0285%" y="190.50"></text></g><g><title>0x7f5e0b9a75c6 (libc-2.27.so) (4 samples, 1.34%)</title><rect x="24.1611%" y="228" width="1.3423%" height="15" fill="rgb(209,9,3)"/><text x="24.4111%" y="238.50"></text></g><g><title>OGRGeometry::setMeasured (libgdal.so.26.0.4) (3 samples, 1.01%)</title><rect x="26.8456%" y="228" width="1.0067%" height="15" fill="rgb(230,59,30)"/><text x="27.0956%" y="238.50"></text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (22 samples, 7.38%)</title><rect x="20.8054%" y="212" width="7.3826%" height="15" fill="rgb(209,121,21)"/><text x="21.0554%" y="222.50">OGRGeometr..</text></g><g><title>CPLRealloc (libgdal.so.26.0.4) (3 samples, 1.01%)</title><rect x="30.8725%" y="228" width="1.0067%" height="15" fill="rgb(220,109,13)"/><text x="31.1225%" y="238.50"></text></g><g><title>OGRSimpleCurve::setPoints (libgdal.so.26.0.4) (5 samples, 1.68%)</title><rect x="31.8792%" y="228" width="1.6779%" height="15" fill="rgb(232,18,1)"/><text x="32.1292%" y="238.50"></text></g><g><title>OGRSimpleCurve::setNumPoints (libgdal.so.26.0.4) (4 samples, 1.34%)</title><rect x="32.2148%" y="244" width="1.3423%" height="15" fill="rgb(215,41,42)"/><text x="32.4648%" y="254.50"></text></g><g><title>VSIReallocVerbose (libgdal.so.26.0.4) (4 samples, 1.34%)</title><rect x="32.2148%" y="260" width="1.3423%" height="15" fill="rgb(224,123,36)"/><text x="32.4648%" y="270.50"></text></g><g><title>0x7f5e0b864a8a (libc-2.27.so) (5 samples, 1.68%)</title><rect x="43.9597%" y="260" width="1.6779%" height="15" fill="rgb(240,125,3)"/><text x="44.2097%" y="270.50"></text></g><g><title>0x7f5e0b865b38 (libc-2.27.so) (7 samples, 2.35%)</title><rect x="53.0201%" y="260" width="2.3490%" height="15" fill="rgb(205,98,50)"/><text x="53.2701%" y="270.50">0..</text></g><g><title>0x7f5e0b8667da (libc-2.27.so) (3 samples, 1.01%)</title><rect x="57.7181%" y="260" width="1.0067%" height="15" fill="rgb(205,185,37)"/><text x="57.9681%" y="270.50"></text></g><g><title>0x7f5e0b8646f6 (libc-2.27.so) (3 samples, 1.01%)</title><rect x="61.4094%" y="276" width="1.0067%" height="15" fill="rgb(238,207,15)"/><text x="61.6594%" y="286.50"></text></g><g><title>0x7f5e0b86680a (libc-2.27.so) (13 samples, 4.36%)</title><rect x="58.7248%" y="260" width="4.3624%" height="15" fill="rgb(213,199,42)"/><text x="58.9748%" y="270.50">0x7f5..</text></g><g><title>0x7f5e0b9a760d (libc-2.27.so) (3 samples, 1.01%)</title><rect x="63.0872%" y="260" width="1.0067%" height="15" fill="rgb(235,201,11)"/><text x="63.3372%" y="270.50"></text></g><g><title>CPLReplacePointByLocalePoint (libgdal.so.26.0.4) (35 samples, 11.74%)</title><rect x="64.4295%" y="260" width="11.7450%" height="15" fill="rgb(207,46,11)"/><text x="64.6795%" y="270.50">CPLReplacePointBy..</text></g><g><title>localeconv (libc-2.27.so) (25 samples, 8.39%)</title><rect x="67.7852%" y="276" width="8.3893%" height="15" fill="rgb(241,35,35)"/><text x="68.0352%" y="286.50">localeconv (..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (120 samples, 40.27%)</title><rect x="37.2483%" y="244" width="40.2685%" height="15" fill="rgb(243,32,47)"/><text x="37.4983%" y="254.50">CPLStrtodDelim (libgdal.so.26.0.4)</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (139 samples, 46.64%)</title><rect x="33.5570%" y="228" width="46.6443%" height="15" fill="rgb(247,202,23)"/><text x="33.8070%" y="238.50">OGRWktReadPointsM (libgdal.so.26.0.4)</text></g><g><title>OGRWktReadToken (libgdal.so.26.0.4) (8 samples, 2.68%)</title><rect x="77.5168%" y="244" width="2.6846%" height="15" fill="rgb(219,102,11)"/><text x="77.7668%" y="254.50">OG..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (156 samples, 52.35%)</title><rect x="28.1879%" y="212" width="52.3490%" height="15" fill="rgb(243,110,44)"/><text x="28.4379%" y="222.50">OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4)</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (180 samples, 60.40%)</title><rect x="20.8054%" y="196" width="60.4027%" height="15" fill="rgb(222,74,54)"/><text x="21.0554%" y="206.50">OGRPolygon::importFromWkt (libgdal.so.26.0.4)</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (192 samples, 64.43%)</title><rect x="18.1208%" y="164" width="64.4295%" height="15" fill="rgb(216,99,12)"/><text x="18.3708%" y="174.50">OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4)</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (192 samples, 64.43%)</title><rect x="18.1208%" y="180" width="64.4295%" height="15" fill="rgb(226,22,26)"/><text x="18.3708%" y="190.50">OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4)</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.h:255) (7 samples, 2.35%)</title><rect x="85.5705%" y="228" width="2.3490%" height="15" fill="rgb(217,163,10)"/><text x="85.8205%" y="238.50">s..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (basic_string.h:236) (7 samples, 2.35%)</title><rect x="85.5705%" y="244" width="2.3490%" height="15" fill="rgb(213,25,53)"/><text x="85.8205%" y="254.50">s..</text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (17 samples, 5.70%)</title><rect x="82.5503%" y="164" width="5.7047%" height="15" fill="rgb(252,105,26)"/><text x="82.8003%" y="174.50">arrow::..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (12 samples, 4.03%)</title><rect x="84.2282%" y="180" width="4.0268%" height="15" fill="rgb(220,39,43)"/><text x="84.4782%" y="190.50">nons..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::to_string&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:917) (12 samples, 4.03%)</title><rect x="84.2282%" y="196" width="4.0268%" height="15" fill="rgb(229,68,48)"/><text x="84.4782%" y="206.50">nons..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*, void&gt; (basic_string.h:607) (11 samples, 3.69%)</title><rect x="84.5638%" y="212" width="3.6913%" height="15" fill="rgb(252,8,32)"/><text x="84.8138%" y="222.50">std:..</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkt (gis_functions.cpp:216) (212 samples, 71.14%)</title><rect x="17.7852%" y="148" width="71.1409%" height="15" fill="rgb(223,20,43)"/><text x="18.0352%" y="158.50">arctern::gis::gdal::Wrapper_createFromWkt (gis_functions.cpp:216)</text></g><g><title>arctern::gis::gdal::ST_Envelope_Aggr (gis_functions.cpp:885) (223 samples, 74.83%)</title><rect x="15.7718%" y="132" width="74.8322%" height="15" fill="rgb(229,81,49)"/><text x="16.0218%" y="142.50">arctern::gis::gdal::ST_Envelope_Aggr (gis_functions.cpp:885)</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkt (gis_functions.cpp:217) (5 samples, 1.68%)</title><rect x="88.9262%" y="148" width="1.6779%" height="15" fill="rgb(236,28,36)"/><text x="89.1762%" y="158.50"></text></g><g><title>0x7f5ddf948cd0 (libarctern.so) (4 samples, 1.34%)</title><rect x="90.9396%" y="148" width="1.3423%" height="15" fill="rgb(249,185,26)"/><text x="91.1896%" y="158.50"></text></g><g><title>arctern::gis::gdal::ST_Envelope_Aggr (gis_functions.cpp:890) (6 samples, 2.01%)</title><rect x="90.9396%" y="132" width="2.0134%" height="15" fill="rgb(249,174,33)"/><text x="91.1896%" y="142.50">a..</text></g><g><title>OGRPolygon::~OGRPolygon (libgdal.so.26.0.4) (4 samples, 1.34%)</title><rect x="92.9530%" y="148" width="1.3423%" height="15" fill="rgb(233,201,37)"/><text x="93.2030%" y="158.50"></text></g><g><title>OGRCurvePolygon::~OGRCurvePolygon (libgdal.so.26.0.4) (4 samples, 1.34%)</title><rect x="92.9530%" y="164" width="1.3423%" height="15" fill="rgb(221,78,26)"/><text x="93.2030%" y="174.50"></text></g><g><title>OGRCurveCollection::empty (libgdal.so.26.0.4) (4 samples, 1.34%)</title><rect x="92.9530%" y="180" width="1.3423%" height="15" fill="rgb(250,127,30)"/><text x="93.2030%" y="190.50"></text></g><g><title>ST_Envelope_Aggr (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6840) (236 samples, 79.19%)</title><rect x="15.7718%" y="84" width="79.1946%" height="15" fill="rgb(230,49,44)"/><text x="16.0218%" y="94.50">ST_Envelope_Aggr (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6840)</text></g><g><title>ST_Envelope_Aggr (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6859) (236 samples, 79.19%)</title><rect x="15.7718%" y="100" width="79.1946%" height="15" fill="rgb(229,67,23)"/><text x="16.0218%" y="110.50">ST_Envelope_Aggr (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6859)</text></g><g><title>arctern::gis::ST_Envelope_Aggr (gis_functions.cpp:302) (236 samples, 79.19%)</title><rect x="15.7718%" y="116" width="79.1946%" height="15" fill="rgb(249,83,47)"/><text x="16.0218%" y="126.50">arctern::gis::ST_Envelope_Aggr (gis_functions.cpp:302)</text></g><g><title>arctern::gis::gdal::ST_Envelope_Aggr (gis_functions.cpp:894) (6 samples, 2.01%)</title><rect x="92.9530%" y="132" width="2.0134%" height="15" fill="rgb(215,43,3)"/><text x="93.2030%" y="142.50">a..</text></g><g><title>arrow::BufferBuilder::Resize (libarrow_python.so.16.0.0) (4 samples, 1.34%)</title><rect x="96.6443%" y="228" width="1.3423%" height="15" fill="rgb(238,154,13)"/><text x="96.8943%" y="238.50"></text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (4 samples, 1.34%)</title><rect x="96.6443%" y="244" width="1.3423%" height="15" fill="rgb(219,56,2)"/><text x="96.8943%" y="254.50"></text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (4 samples, 1.34%)</title><rect x="96.6443%" y="260" width="1.3423%" height="15" fill="rgb(233,0,4)"/><text x="96.8943%" y="270.50"></text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (4 samples, 1.34%)</title><rect x="96.6443%" y="276" width="1.3423%" height="15" fill="rgb(235,30,7)"/><text x="96.8943%" y="286.50"></text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (4 samples, 1.34%)</title><rect x="96.6443%" y="292" width="1.3423%" height="15" fill="rgb(250,79,13)"/><text x="96.8943%" y="302.50"></text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (4 samples, 1.34%)</title><rect x="96.6443%" y="308" width="1.3423%" height="15" fill="rgb(211,146,34)"/><text x="96.8943%" y="318.50"></text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (4 samples, 1.34%)</title><rect x="96.6443%" y="324" width="1.3423%" height="15" fill="rgb(228,22,38)"/><text x="96.8943%" y="334.50"></text></g><g><title>memcpy (string3.h:52) (4 samples, 1.34%)</title><rect x="96.6443%" y="340" width="1.3423%" height="15" fill="rgb(235,168,5)"/><text x="96.8943%" y="350.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (12 samples, 4.03%)</title><rect x="95.3020%" y="212" width="4.0268%" height="15" fill="rgb(221,155,16)"/><text x="95.5520%" y="222.50">arro..</text></g><g><title>memcpy (libc-2.27.so) (3 samples, 1.01%)</title><rect x="98.3221%" y="228" width="1.0067%" height="15" fill="rgb(215,215,53)"/><text x="98.5721%" y="238.50"></text></g><g><title>all (298 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (263 samples, 88.26%)</title><rect x="11.7450%" y="52" width="88.2550%" height="15" fill="rgb(234,103,6)"/><text x="11.9950%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_Envelope_Aggr (profile_geo.py:267) (251 samples, 84.23%)</title><rect x="15.7718%" y="68" width="84.2282%" height="15" fill="rgb(227,97,0)"/><text x="16.0218%" y="78.50">test_ST_Envelope_Aggr (profile_geo.py:267)</text></g><g><title>array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (15 samples, 5.03%)</title><rect x="94.9664%" y="84" width="5.0336%" height="15" fill="rgb(234,150,53)"/><text x="95.2164%" y="94.50">array ..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (15 samples, 5.03%)</title><rect x="94.9664%" y="100" width="5.0336%" height="15" fill="rgb(228,201,54)"/><text x="95.2164%" y="110.50">lib__n..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (15 samples, 5.03%)</title><rect x="94.9664%" y="116" width="5.0336%" height="15" fill="rgb(222,22,37)"/><text x="95.2164%" y="126.50">arrow:..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (15 samples, 5.03%)</title><rect x="94.9664%" y="132" width="5.0336%" height="15" fill="rgb(237,53,32)"/><text x="95.2164%" y="142.50">arrow:..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (15 samples, 5.03%)</title><rect x="94.9664%" y="148" width="5.0336%" height="15" fill="rgb(233,25,53)"/><text x="95.2164%" y="158.50">arrow:..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (15 samples, 5.03%)</title><rect x="94.9664%" y="164" width="5.0336%" height="15" fill="rgb(210,40,34)"/><text x="95.2164%" y="174.50">arrow:..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (15 samples, 5.03%)</title><rect x="94.9664%" y="180" width="5.0336%" height="15" fill="rgb(241,220,44)"/><text x="95.2164%" y="190.50">arrow:..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (15 samples, 5.03%)</title><rect x="94.9664%" y="196" width="5.0336%" height="15" fill="rgb(235,28,35)"/><text x="95.2164%" y="206.50">arrow:..</text></g></svg></svg>