<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (pyarrow/compat.py:24) (4 samples, 1.29%)</title><rect x="0.0000%" y="244" width="1.2903%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.29%)</title><rect x="0.0000%" y="260" width="1.2903%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.29%)</title><rect x="0.0000%" y="276" width="1.2903%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.29%)</title><rect x="0.0000%" y="292" width="1.2903%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.29%)</title><rect x="0.0000%" y="308" width="1.2903%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.29%)</title><rect x="0.0000%" y="324" width="1.2903%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="334.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:15) (5 samples, 1.61%)</title><rect x="0.0000%" y="52" width="1.6129%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.61%)</title><rect x="0.0000%" y="68" width="1.6129%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.61%)</title><rect x="0.0000%" y="84" width="1.6129%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.61%)</title><rect x="0.0000%" y="100" width="1.6129%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.61%)</title><rect x="0.0000%" y="116" width="1.6129%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.61%)</title><rect x="0.0000%" y="132" width="1.6129%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="142.50"></text></g><g><title>&lt;module&gt; (pyarrow/__init__.py:47) (5 samples, 1.61%)</title><rect x="0.0000%" y="148" width="1.6129%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.61%)</title><rect x="0.0000%" y="164" width="1.6129%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.61%)</title><rect x="0.0000%" y="180" width="1.6129%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.61%)</title><rect x="0.0000%" y="196" width="1.6129%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.61%)</title><rect x="0.0000%" y="212" width="1.6129%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.61%)</title><rect x="0.0000%" y="228" width="1.6129%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="238.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:15) (4 samples, 1.29%)</title><rect x="4.1935%" y="244" width="1.2903%" height="15" fill="rgb(221,200,47)"/><text x="4.4435%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.29%)</title><rect x="4.1935%" y="260" width="1.2903%" height="15" fill="rgb(226,26,5)"/><text x="4.4435%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.29%)</title><rect x="4.1935%" y="276" width="1.2903%" height="15" fill="rgb(249,33,26)"/><text x="4.4435%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.29%)</title><rect x="4.1935%" y="292" width="1.2903%" height="15" fill="rgb(235,183,28)"/><text x="4.4435%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.29%)</title><rect x="4.1935%" y="308" width="1.2903%" height="15" fill="rgb(221,5,38)"/><text x="4.4435%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.29%)</title><rect x="4.1935%" y="324" width="1.2903%" height="15" fill="rgb(247,18,42)"/><text x="4.4435%" y="334.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:60) (4 samples, 1.29%)</title><rect x="5.4839%" y="436" width="1.2903%" height="15" fill="rgb(241,131,45)"/><text x="5.7339%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.29%)</title><rect x="5.4839%" y="452" width="1.2903%" height="15" fill="rgb(249,31,29)"/><text x="5.7339%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.29%)</title><rect x="5.4839%" y="468" width="1.2903%" height="15" fill="rgb(225,111,53)"/><text x="5.7339%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.29%)</title><rect x="5.4839%" y="484" width="1.2903%" height="15" fill="rgb(238,160,17)"/><text x="5.7339%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.29%)</title><rect x="5.4839%" y="500" width="1.2903%" height="15" fill="rgb(214,148,48)"/><text x="5.7339%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.29%)</title><rect x="5.4839%" y="516" width="1.2903%" height="15" fill="rgb(232,36,49)"/><text x="5.7339%" y="526.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:16) (18 samples, 5.81%)</title><rect x="1.6129%" y="52" width="5.8065%" height="15" fill="rgb(209,103,24)"/><text x="1.8629%" y="62.50">&lt;module..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (18 samples, 5.81%)</title><rect x="1.6129%" y="68" width="5.8065%" height="15" fill="rgb(229,88,8)"/><text x="1.8629%" y="78.50">_find_a..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (18 samples, 5.81%)</title><rect x="1.6129%" y="84" width="5.8065%" height="15" fill="rgb(213,181,19)"/><text x="1.8629%" y="94.50">_find_a..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (18 samples, 5.81%)</title><rect x="1.6129%" y="100" width="5.8065%" height="15" fill="rgb(254,191,54)"/><text x="1.8629%" y="110.50">_load_u..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (18 samples, 5.81%)</title><rect x="1.6129%" y="116" width="5.8065%" height="15" fill="rgb(241,83,37)"/><text x="1.8629%" y="126.50">exec_mo..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (18 samples, 5.81%)</title><rect x="1.6129%" y="132" width="5.8065%" height="15" fill="rgb(233,36,39)"/><text x="1.8629%" y="142.50">_call_w..</text></g><g><title>&lt;module&gt; (pandas/__init__.py:54) (11 samples, 3.55%)</title><rect x="3.8710%" y="148" width="3.5484%" height="15" fill="rgb(226,3,54)"/><text x="4.1210%" y="158.50">&lt;mod..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 3.55%)</title><rect x="3.8710%" y="164" width="3.5484%" height="15" fill="rgb(245,192,40)"/><text x="4.1210%" y="174.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 3.55%)</title><rect x="3.8710%" y="180" width="3.5484%" height="15" fill="rgb(238,167,29)"/><text x="4.1210%" y="190.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 3.55%)</title><rect x="3.8710%" y="196" width="3.5484%" height="15" fill="rgb(232,182,51)"/><text x="4.1210%" y="206.50">_loa..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 3.55%)</title><rect x="3.8710%" y="212" width="3.5484%" height="15" fill="rgb(231,60,39)"/><text x="4.1210%" y="222.50">exec..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 3.55%)</title><rect x="3.8710%" y="228" width="3.5484%" height="15" fill="rgb(208,69,12)"/><text x="4.1210%" y="238.50">_cal..</text></g><g><title>&lt;module&gt; (pandas/core/api.py:29) (6 samples, 1.94%)</title><rect x="5.4839%" y="244" width="1.9355%" height="15" fill="rgb(235,93,37)"/><text x="5.7339%" y="254.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.94%)</title><rect x="5.4839%" y="260" width="1.9355%" height="15" fill="rgb(213,116,39)"/><text x="5.7339%" y="270.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.94%)</title><rect x="5.4839%" y="276" width="1.9355%" height="15" fill="rgb(222,207,29)"/><text x="5.7339%" y="286.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.94%)</title><rect x="5.4839%" y="292" width="1.9355%" height="15" fill="rgb(206,96,30)"/><text x="5.7339%" y="302.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.94%)</title><rect x="5.4839%" y="308" width="1.9355%" height="15" fill="rgb(218,138,4)"/><text x="5.7339%" y="318.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.94%)</title><rect x="5.4839%" y="324" width="1.9355%" height="15" fill="rgb(250,191,14)"/><text x="5.7339%" y="334.50">_..</text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (6 samples, 1.94%)</title><rect x="5.4839%" y="340" width="1.9355%" height="15" fill="rgb(239,60,40)"/><text x="5.7339%" y="350.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.94%)</title><rect x="5.4839%" y="356" width="1.9355%" height="15" fill="rgb(206,27,48)"/><text x="5.7339%" y="366.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.94%)</title><rect x="5.4839%" y="372" width="1.9355%" height="15" fill="rgb(225,35,8)"/><text x="5.7339%" y="382.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.94%)</title><rect x="5.4839%" y="388" width="1.9355%" height="15" fill="rgb(250,213,24)"/><text x="5.7339%" y="398.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.94%)</title><rect x="5.4839%" y="404" width="1.9355%" height="15" fill="rgb(247,123,22)"/><text x="5.7339%" y="414.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.94%)</title><rect x="5.4839%" y="420" width="1.9355%" height="15" fill="rgb(231,138,38)"/><text x="5.7339%" y="430.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.94%)</title><rect x="7.4194%" y="68" width="1.9355%" height="15" fill="rgb(231,145,46)"/><text x="7.6694%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.94%)</title><rect x="7.4194%" y="84" width="1.9355%" height="15" fill="rgb(251,118,11)"/><text x="7.6694%" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.94%)</title><rect x="7.4194%" y="100" width="1.9355%" height="15" fill="rgb(217,147,25)"/><text x="7.6694%" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.94%)</title><rect x="7.4194%" y="116" width="1.9355%" height="15" fill="rgb(247,81,37)"/><text x="7.6694%" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.94%)</title><rect x="7.4194%" y="132" width="1.9355%" height="15" fill="rgb(209,12,38)"/><text x="7.6694%" y="142.50">_..</text></g><g><title>&lt;module&gt; (osgeo/__init__.py:41) (6 samples, 1.94%)</title><rect x="7.4194%" y="148" width="1.9355%" height="15" fill="rgb(227,1,9)"/><text x="7.6694%" y="158.50">&lt;..</text></g><g><title>swig_import_helper (osgeo/__init__.py:24) (6 samples, 1.94%)</title><rect x="7.4194%" y="164" width="1.9355%" height="15" fill="rgb(248,47,43)"/><text x="7.6694%" y="174.50">s..</text></g><g><title>load_module (imp.py:242) (6 samples, 1.94%)</title><rect x="7.4194%" y="180" width="1.9355%" height="15" fill="rgb(221,10,30)"/><text x="7.6694%" y="190.50">l..</text></g><g><title>load_dynamic (imp.py:342) (6 samples, 1.94%)</title><rect x="7.4194%" y="196" width="1.9355%" height="15" fill="rgb(210,229,1)"/><text x="7.6694%" y="206.50">l..</text></g><g><title>_load (&lt;frozen importlib._bootstrap&gt;:696) (6 samples, 1.94%)</title><rect x="7.4194%" y="212" width="1.9355%" height="15" fill="rgb(222,148,37)"/><text x="7.6694%" y="222.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (6 samples, 1.94%)</title><rect x="7.4194%" y="228" width="1.9355%" height="15" fill="rgb(234,67,33)"/><text x="7.6694%" y="238.50">_..</text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:583) (6 samples, 1.94%)</title><rect x="7.4194%" y="244" width="1.9355%" height="15" fill="rgb(247,98,35)"/><text x="7.6694%" y="254.50">m..</text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1043) (6 samples, 1.94%)</title><rect x="7.4194%" y="260" width="1.9355%" height="15" fill="rgb(247,138,52)"/><text x="7.6694%" y="270.50">c..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.94%)</title><rect x="7.4194%" y="276" width="1.9355%" height="15" fill="rgb(213,79,30)"/><text x="7.6694%" y="286.50">_..</text></g><g><title>dlopen (libdl-2.27.so) (6 samples, 1.94%)</title><rect x="7.4194%" y="292" width="1.9355%" height="15" fill="rgb(246,177,23)"/><text x="7.6694%" y="302.50">d..</text></g><g><title>0x7f632b841735 (libdl-2.27.so) (6 samples, 1.94%)</title><rect x="7.4194%" y="308" width="1.9355%" height="15" fill="rgb(230,62,27)"/><text x="7.6694%" y="318.50">0..</text></g><g><title>_dl_catch_error (libc-2.27.so) (6 samples, 1.94%)</title><rect x="7.4194%" y="324" width="1.9355%" height="15" fill="rgb(216,154,8)"/><text x="7.6694%" y="334.50">_..</text></g><g><title>_dl_catch_exception (libc-2.27.so) (6 samples, 1.94%)</title><rect x="7.4194%" y="340" width="1.9355%" height="15" fill="rgb(244,35,45)"/><text x="7.6694%" y="350.50">_..</text></g><g><title>0x7f632b840f96 (libdl-2.27.so) (6 samples, 1.94%)</title><rect x="7.4194%" y="356" width="1.9355%" height="15" fill="rgb(251,115,12)"/><text x="7.6694%" y="366.50">0..</text></g><g><title>0x7f632c0687ca (ld-2.27.so) (6 samples, 1.94%)</title><rect x="7.4194%" y="372" width="1.9355%" height="15" fill="rgb(240,54,50)"/><text x="7.6694%" y="382.50">0..</text></g><g><title>_dl_catch_exception (libc-2.27.so) (6 samples, 1.94%)</title><rect x="7.4194%" y="388" width="1.9355%" height="15" fill="rgb(233,84,52)"/><text x="7.6694%" y="398.50">_..</text></g><g><title>0x7f632c0690bd (ld-2.27.so) (6 samples, 1.94%)</title><rect x="7.4194%" y="404" width="1.9355%" height="15" fill="rgb(207,117,47)"/><text x="7.6694%" y="414.50">0..</text></g><g><title>0x7f632c060af9 (ld-2.27.so) (6 samples, 1.94%)</title><rect x="7.4194%" y="420" width="1.9355%" height="15" fill="rgb(249,43,39)"/><text x="7.6694%" y="430.50">0..</text></g><g><title>0x7f632c05f1ef (ld-2.27.so) (5 samples, 1.61%)</title><rect x="7.7419%" y="436" width="1.6129%" height="15" fill="rgb(209,38,44)"/><text x="7.9919%" y="446.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:17) (7 samples, 2.26%)</title><rect x="7.4194%" y="52" width="2.2581%" height="15" fill="rgb(236,212,23)"/><text x="7.6694%" y="62.50">&lt;..</text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:74) (4 samples, 1.29%)</title><rect x="10.3226%" y="116" width="1.2903%" height="15" fill="rgb(242,79,21)"/><text x="10.5726%" y="126.50"></text></g><g><title>construct_1d_object_array_from_listlike (pandas/core/dtypes/cast.py:1488) (4 samples, 1.29%)</title><rect x="10.3226%" y="132" width="1.2903%" height="15" fill="rgb(211,96,35)"/><text x="10.5726%" y="142.50"></text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.29%)</title><rect x="10.3226%" y="148" width="1.2903%" height="15" fill="rgb(253,215,40)"/><text x="10.5726%" y="158.50"></text></g><g><title>PyArray_CopyObject (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.29%)</title><rect x="10.3226%" y="164" width="1.2903%" height="15" fill="rgb(211,81,21)"/><text x="10.5726%" y="174.50"></text></g><g><title>__Pyx_PyComplex_As___pyx_t_double_complex (pandas/_libs/lib.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.29%)</title><rect x="12.2581%" y="164" width="1.2903%" height="15" fill="rgb(208,190,38)"/><text x="12.5081%" y="174.50"></text></g><g><title>test_ST_PolygonFromEnvelope (profile_geo.py:229) (11 samples, 3.55%)</title><rect x="10.3226%" y="68" width="3.5484%" height="15" fill="rgb(235,213,38)"/><text x="10.5726%" y="78.50">test..</text></g><g><title>__init__ (pandas/core/series.py:305) (11 samples, 3.55%)</title><rect x="10.3226%" y="84" width="3.5484%" height="15" fill="rgb(237,122,38)"/><text x="10.5726%" y="94.50">__in..</text></g><g><title>sanitize_array (pandas/core/construction.py:440) (11 samples, 3.55%)</title><rect x="10.3226%" y="100" width="3.5484%" height="15" fill="rgb(244,218,35)"/><text x="10.5726%" y="110.50">sani..</text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:78) (7 samples, 2.26%)</title><rect x="11.6129%" y="116" width="2.2581%" height="15" fill="rgb(240,68,47)"/><text x="11.8629%" y="126.50">m..</text></g><g><title>maybe_convert_objects (pandas/_libs/lib.cpython-37m-x86_64-linux-gnu.so) (7 samples, 2.26%)</title><rect x="11.6129%" y="132" width="2.2581%" height="15" fill="rgb(210,16,53)"/><text x="11.8629%" y="142.50">m..</text></g><g><title>maybe_convert_objects.isra.83 (pandas/_libs/lib.cpython-37m-x86_64-linux-gnu.so) (7 samples, 2.26%)</title><rect x="11.6129%" y="148" width="2.2581%" height="15" fill="rgb(235,124,12)"/><text x="11.8629%" y="158.50">m..</text></g><g><title>test_ST_PolygonFromEnvelope (profile_geo.py:230) (6 samples, 1.94%)</title><rect x="13.8710%" y="68" width="1.9355%" height="15" fill="rgb(224,169,11)"/><text x="14.1210%" y="78.50">t..</text></g><g><title>__init__ (pandas/core/series.py:305) (6 samples, 1.94%)</title><rect x="13.8710%" y="84" width="1.9355%" height="15" fill="rgb(250,166,2)"/><text x="14.1210%" y="94.50">_..</text></g><g><title>sanitize_array (pandas/core/construction.py:440) (6 samples, 1.94%)</title><rect x="13.8710%" y="100" width="1.9355%" height="15" fill="rgb(242,216,29)"/><text x="14.1210%" y="110.50">s..</text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:74) (6 samples, 1.94%)</title><rect x="15.8065%" y="116" width="1.9355%" height="15" fill="rgb(230,116,27)"/><text x="16.0565%" y="126.50">m..</text></g><g><title>construct_1d_object_array_from_listlike (pandas/core/dtypes/cast.py:1488) (5 samples, 1.61%)</title><rect x="16.1290%" y="132" width="1.6129%" height="15" fill="rgb(228,99,48)"/><text x="16.3790%" y="142.50"></text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.61%)</title><rect x="16.1290%" y="148" width="1.6129%" height="15" fill="rgb(253,11,6)"/><text x="16.3790%" y="158.50"></text></g><g><title>PyArray_CopyObject (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.61%)</title><rect x="16.1290%" y="164" width="1.6129%" height="15" fill="rgb(247,143,39)"/><text x="16.3790%" y="174.50"></text></g><g><title>test_ST_PolygonFromEnvelope (profile_geo.py:231) (15 samples, 4.84%)</title><rect x="15.8065%" y="68" width="4.8387%" height="15" fill="rgb(236,97,10)"/><text x="16.0565%" y="78.50">test_S..</text></g><g><title>__init__ (pandas/core/series.py:305) (15 samples, 4.84%)</title><rect x="15.8065%" y="84" width="4.8387%" height="15" fill="rgb(233,208,19)"/><text x="16.0565%" y="94.50">__init..</text></g><g><title>sanitize_array (pandas/core/construction.py:440) (15 samples, 4.84%)</title><rect x="15.8065%" y="100" width="4.8387%" height="15" fill="rgb(216,164,2)"/><text x="16.0565%" y="110.50">saniti..</text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:78) (9 samples, 2.90%)</title><rect x="17.7419%" y="116" width="2.9032%" height="15" fill="rgb(220,129,5)"/><text x="17.9919%" y="126.50">ma..</text></g><g><title>maybe_convert_objects (pandas/_libs/lib.cpython-37m-x86_64-linux-gnu.so) (9 samples, 2.90%)</title><rect x="17.7419%" y="132" width="2.9032%" height="15" fill="rgb(242,17,10)"/><text x="17.9919%" y="142.50">ma..</text></g><g><title>maybe_convert_objects.isra.83 (pandas/_libs/lib.cpython-37m-x86_64-linux-gnu.so) (9 samples, 2.90%)</title><rect x="17.7419%" y="148" width="2.9032%" height="15" fill="rgb(242,107,0)"/><text x="17.9919%" y="158.50">ma..</text></g><g><title>test_ST_PolygonFromEnvelope (profile_geo.py:232) (5 samples, 1.61%)</title><rect x="20.6452%" y="68" width="1.6129%" height="15" fill="rgb(251,28,31)"/><text x="20.8952%" y="78.50"></text></g><g><title>arrow::NumericArray&lt;arrow::DoubleType&gt;::raw_values (array.h:528) (5 samples, 1.61%)</title><rect x="22.9032%" y="164" width="1.6129%" height="15" fill="rgb(233,223,10)"/><text x="23.1532%" y="174.50"></text></g><g><title>arctern::gis::gdal::ST_PolygonFromEnvelope (gis_functions.cpp:295) (6 samples, 1.94%)</title><rect x="22.9032%" y="132" width="1.9355%" height="15" fill="rgb(215,21,27)"/><text x="23.1532%" y="142.50">a..</text></g><g><title>arrow::NumericArray&lt;arrow::DoubleType&gt;::Value (array.h:531) (6 samples, 1.94%)</title><rect x="22.9032%" y="148" width="1.9355%" height="15" fill="rgb(232,23,21)"/><text x="23.1532%" y="158.50">a..</text></g><g><title>arrow::NumericArray&lt;arrow::DoubleType&gt;::Value (array.h:531) (9 samples, 2.90%)</title><rect x="26.1290%" y="148" width="2.9032%" height="15" fill="rgb(244,5,23)"/><text x="26.3790%" y="158.50">ar..</text></g><g><title>arrow::NumericArray&lt;arrow::DoubleType&gt;::raw_values (array.h:528) (4 samples, 1.29%)</title><rect x="27.7419%" y="164" width="1.2903%" height="15" fill="rgb(226,81,46)"/><text x="27.9919%" y="174.50"></text></g><g><title>arctern::gis::gdal::ST_PolygonFromEnvelope (gis_functions.cpp:300) (11 samples, 3.55%)</title><rect x="25.8065%" y="132" width="3.5484%" height="15" fill="rgb(247,70,30)"/><text x="26.0565%" y="142.50">arct..</text></g><g><title>0x7f632bad98f5 (libc-2.27.so) (7 samples, 2.26%)</title><rect x="31.2903%" y="212" width="2.2581%" height="15" fill="rgb(212,68,19)"/><text x="31.5403%" y="222.50">0..</text></g><g><title>OGRSimpleCurve::setPoint (libgdal.so.26.0.4) (13 samples, 4.19%)</title><rect x="29.6774%" y="148" width="4.1935%" height="15" fill="rgb(240,187,13)"/><text x="29.9274%" y="158.50">OGRSi..</text></g><g><title>OGRSimpleCurve::setNumPoints (libgdal.so.26.0.4) (13 samples, 4.19%)</title><rect x="29.6774%" y="164" width="4.1935%" height="15" fill="rgb(223,113,26)"/><text x="29.9274%" y="174.50">OGRSi..</text></g><g><title>VSIReallocVerbose (libgdal.so.26.0.4) (12 samples, 3.87%)</title><rect x="30.0000%" y="180" width="3.8710%" height="15" fill="rgb(206,192,2)"/><text x="30.2500%" y="190.50">VSIR..</text></g><g><title>__libc_realloc (libc-2.27.so) (12 samples, 3.87%)</title><rect x="30.0000%" y="196" width="3.8710%" height="15" fill="rgb(241,108,4)"/><text x="30.2500%" y="206.50">__li..</text></g><g><title>arctern::gis::gdal::ST_PolygonFromEnvelope (gis_functions.cpp:302) (16 samples, 5.16%)</title><rect x="29.6774%" y="132" width="5.1613%" height="15" fill="rgb(247,173,49)"/><text x="29.9274%" y="142.50">arcter..</text></g><g><title>OGRSimpleCurve::setPoint (libgdal.so.26.0.4) (4 samples, 1.29%)</title><rect x="34.8387%" y="148" width="1.2903%" height="15" fill="rgb(224,114,35)"/><text x="35.0887%" y="158.50"></text></g><g><title>OGRSimpleCurve::setNumPoints (libgdal.so.26.0.4) (4 samples, 1.29%)</title><rect x="34.8387%" y="164" width="1.2903%" height="15" fill="rgb(245,159,27)"/><text x="35.0887%" y="174.50"></text></g><g><title>arrow::NumericArray&lt;arrow::DoubleType&gt;::Value (array.h:531) (4 samples, 1.29%)</title><rect x="36.1290%" y="148" width="1.2903%" height="15" fill="rgb(245,172,44)"/><text x="36.3790%" y="158.50"></text></g><g><title>arrow::NumericArray&lt;arrow::DoubleType&gt;::raw_values (array.h:528) (4 samples, 1.29%)</title><rect x="36.1290%" y="164" width="1.2903%" height="15" fill="rgb(236,23,11)"/><text x="36.3790%" y="174.50"></text></g><g><title>arctern::gis::gdal::ST_PolygonFromEnvelope (gis_functions.cpp:303) (9 samples, 2.90%)</title><rect x="34.8387%" y="132" width="2.9032%" height="15" fill="rgb(205,117,38)"/><text x="35.0887%" y="142.50">ar..</text></g><g><title>OGRSimpleCurve::setPoint (libgdal.so.26.0.4) (4 samples, 1.29%)</title><rect x="37.7419%" y="148" width="1.2903%" height="15" fill="rgb(237,72,25)"/><text x="37.9919%" y="158.50"></text></g><g><title>OGRSimpleCurve::setNumPoints (libgdal.so.26.0.4) (4 samples, 1.29%)</title><rect x="37.7419%" y="164" width="1.2903%" height="15" fill="rgb(244,70,9)"/><text x="37.9919%" y="174.50"></text></g><g><title>VSIReallocVerbose (libgdal.so.26.0.4) (4 samples, 1.29%)</title><rect x="37.7419%" y="180" width="1.2903%" height="15" fill="rgb(217,125,39)"/><text x="37.9919%" y="190.50"></text></g><g><title>__libc_realloc (libc-2.27.so) (4 samples, 1.29%)</title><rect x="37.7419%" y="196" width="1.2903%" height="15" fill="rgb(235,36,10)"/><text x="37.9919%" y="206.50"></text></g><g><title>arctern::gis::gdal::ST_PolygonFromEnvelope (gis_functions.cpp:304) (5 samples, 1.61%)</title><rect x="37.7419%" y="132" width="1.6129%" height="15" fill="rgb(251,123,47)"/><text x="37.9919%" y="142.50"></text></g><g><title>arctern::gis::gdal::ST_PolygonFromEnvelope (gis_functions.cpp:308) (11 samples, 3.55%)</title><rect x="40.3226%" y="132" width="3.5484%" height="15" fill="rgb(221,13,13)"/><text x="40.5726%" y="142.50">arct..</text></g><g><title>OGRCurvePolygon::addRing (libgdal.so.26.0.4) (11 samples, 3.55%)</title><rect x="40.3226%" y="148" width="3.5484%" height="15" fill="rgb(238,131,9)"/><text x="40.5726%" y="158.50">OGRC..</text></g><g><title>OGRLinearRing::clone (libgdal.so.26.0.4) (4 samples, 1.29%)</title><rect x="42.5806%" y="164" width="1.2903%" height="15" fill="rgb(211,50,8)"/><text x="42.8306%" y="174.50"></text></g><g><title>0x7f632bad4365 (libc-2.27.so) (4 samples, 1.29%)</title><rect x="56.7742%" y="228" width="1.2903%" height="15" fill="rgb(245,182,24)"/><text x="57.0242%" y="238.50"></text></g><g><title>_IO_setb (libc-2.27.so) (4 samples, 1.29%)</title><rect x="56.7742%" y="244" width="1.2903%" height="15" fill="rgb(242,14,37)"/><text x="57.0242%" y="254.50"></text></g><g><title>0x7f632bac0fef (libc-2.27.so) (5 samples, 1.61%)</title><rect x="65.1613%" y="260" width="1.6129%" height="15" fill="rgb(246,228,12)"/><text x="65.4113%" y="270.50"></text></g><g><title>0x7f632ba9cfa9 (libc-2.27.so) (17 samples, 5.48%)</title><rect x="62.2581%" y="244" width="5.4839%" height="15" fill="rgb(213,55,15)"/><text x="62.5081%" y="254.50">0x7f632..</text></g><g><title>0x7f632ba9dff6 (libc-2.27.so) (5 samples, 1.61%)</title><rect x="74.8387%" y="244" width="1.6129%" height="15" fill="rgb(209,9,3)"/><text x="75.0887%" y="254.50"></text></g><g><title>_IO_default_xsputn (libc-2.27.so) (5 samples, 1.61%)</title><rect x="74.8387%" y="260" width="1.6129%" height="15" fill="rgb(230,59,30)"/><text x="75.0887%" y="270.50"></text></g><g><title>0x7f632ba9e1f8 (libc-2.27.so) (4 samples, 1.29%)</title><rect x="78.0645%" y="244" width="1.2903%" height="15" fill="rgb(209,121,21)"/><text x="78.3145%" y="254.50"></text></g><g><title>OGRMakeWktCoordinateM (libgdal.so.26.0.4) (98 samples, 31.61%)</title><rect x="50.0000%" y="180" width="31.6129%" height="15" fill="rgb(220,109,13)"/><text x="50.2500%" y="190.50">OGRMakeWktCoordinateM (libgdal.so.26.0.4)</text></g><g><title>__snprintf_chk (libc-2.27.so) (86 samples, 27.74%)</title><rect x="53.8710%" y="196" width="27.7419%" height="15" fill="rgb(232,18,1)"/><text x="54.1210%" y="206.50">__snprintf_chk (libc-2.27.so)</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (86 samples, 27.74%)</title><rect x="53.8710%" y="212" width="27.7419%" height="15" fill="rgb(215,41,42)"/><text x="54.1210%" y="222.50">__vsnprintf_chk (libc-2.27.so)</text></g><g><title>_IO_vfprintf (libc-2.27.so) (72 samples, 23.23%)</title><rect x="58.3871%" y="228" width="23.2258%" height="15" fill="rgb(224,123,36)"/><text x="58.6371%" y="238.50">_IO_vfprintf (libc-2.27.so)</text></g><g><title>0x7f632ba9e691 (libc-2.27.so) (5 samples, 1.61%)</title><rect x="84.8387%" y="228" width="1.6129%" height="15" fill="rgb(240,125,3)"/><text x="85.0887%" y="238.50"></text></g><g><title>_IO_default_xsputn (libc-2.27.so) (5 samples, 1.61%)</title><rect x="84.8387%" y="244" width="1.6129%" height="15" fill="rgb(205,98,50)"/><text x="85.0887%" y="254.50"></text></g><g><title>OGRSimpleCurve::exportToWkt (libgdal.so.26.0.4) (122 samples, 39.35%)</title><rect x="47.4194%" y="164" width="39.3548%" height="15" fill="rgb(205,185,37)"/><text x="47.6694%" y="174.50">OGRSimpleCurve::exportToWkt (libgdal.so.26.0.4)</text></g><g><title>__snprintf_chk (libc-2.27.so) (14 samples, 4.52%)</title><rect x="82.2581%" y="180" width="4.5161%" height="15" fill="rgb(238,207,15)"/><text x="82.5081%" y="190.50">__snp..</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (14 samples, 4.52%)</title><rect x="82.2581%" y="196" width="4.5161%" height="15" fill="rgb(213,199,42)"/><text x="82.5081%" y="206.50">__vsn..</text></g><g><title>_IO_vfprintf (libc-2.27.so) (14 samples, 4.52%)</title><rect x="82.2581%" y="212" width="4.5161%" height="15" fill="rgb(235,201,11)"/><text x="82.5081%" y="222.50">_IO_v..</text></g><g><title>arctern::gis::gdal::ST_PolygonFromEnvelope (gis_functions.cpp:309) (137 samples, 44.19%)</title><rect x="43.8710%" y="132" width="44.1935%" height="15" fill="rgb(207,46,11)"/><text x="44.1210%" y="142.50">arctern::gis::gdal::ST_PolygonFromEnvelope (gis_functions.cpp:309)</text></g><g><title>OGRPolygon::exportToWkt (libgdal.so.26.0.4) (135 samples, 43.55%)</title><rect x="44.5161%" y="148" width="43.5484%" height="15" fill="rgb(241,35,35)"/><text x="44.7661%" y="158.50">OGRPolygon::exportToWkt (libgdal.so.26.0.4)</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:56) (9 samples, 2.90%)</title><rect x="88.0645%" y="180" width="2.9032%" height="15" fill="rgb(243,32,47)"/><text x="88.3145%" y="190.50">ar..</text></g><g><title>arrow::internal::GenericToStatus (status.h:433) (4 samples, 1.29%)</title><rect x="89.6774%" y="196" width="1.2903%" height="15" fill="rgb(247,202,23)"/><text x="89.9274%" y="206.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::AppendNextOffset (builder_binary.h:327) (4 samples, 1.29%)</title><rect x="92.5806%" y="196" width="1.2903%" height="15" fill="rgb(219,102,11)"/><text x="92.8306%" y="206.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:57) (10 samples, 3.23%)</title><rect x="90.9677%" y="180" width="3.2258%" height="15" fill="rgb(243,110,44)"/><text x="91.2177%" y="190.50">arr..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:73) (23 samples, 7.42%)</title><rect x="88.0645%" y="148" width="7.4194%" height="15" fill="rgb(222,74,54)"/><text x="88.3145%" y="158.50">arrow::Bas..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:69) (23 samples, 7.42%)</title><rect x="88.0645%" y="164" width="7.4194%" height="15" fill="rgb(216,99,12)"/><text x="88.3145%" y="174.50">arrow::Bas..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (6 samples, 1.94%)</title><rect x="97.4194%" y="356" width="1.9355%" height="15" fill="rgb(226,22,26)"/><text x="97.6694%" y="366.50">n..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (5 samples, 1.61%)</title><rect x="97.7419%" y="372" width="1.6129%" height="15" fill="rgb(217,163,10)"/><text x="97.9919%" y="382.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (5 samples, 1.61%)</title><rect x="97.7419%" y="388" width="1.6129%" height="15" fill="rgb(213,25,53)"/><text x="97.9919%" y="398.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (5 samples, 1.61%)</title><rect x="97.7419%" y="404" width="1.6129%" height="15" fill="rgb(252,105,26)"/><text x="97.9919%" y="414.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (5 samples, 1.61%)</title><rect x="97.7419%" y="420" width="1.6129%" height="15" fill="rgb(220,39,43)"/><text x="97.9919%" y="430.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (5 samples, 1.61%)</title><rect x="97.7419%" y="436" width="1.6129%" height="15" fill="rgb(229,68,48)"/><text x="97.9919%" y="446.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (5 samples, 1.61%)</title><rect x="97.7419%" y="452" width="1.6129%" height="15" fill="rgb(252,8,32)"/><text x="97.9919%" y="462.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (4 samples, 1.29%)</title><rect x="98.0645%" y="468" width="1.2903%" height="15" fill="rgb(223,20,43)"/><text x="98.3145%" y="478.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (4 samples, 1.29%)</title><rect x="98.0645%" y="484" width="1.2903%" height="15" fill="rgb(229,81,49)"/><text x="98.3145%" y="494.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (8 samples, 2.58%)</title><rect x="97.0968%" y="340" width="2.5806%" height="15" fill="rgb(236,28,36)"/><text x="97.3468%" y="350.50">no..</text></g><g><title>all (310 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (278 samples, 89.68%)</title><rect x="10.3226%" y="52" width="89.6774%" height="15" fill="rgb(249,174,33)"/><text x="10.5726%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_PolygonFromEnvelope (profile_geo.py:234) (241 samples, 77.74%)</title><rect x="22.2581%" y="68" width="77.7419%" height="15" fill="rgb(233,201,37)"/><text x="22.5081%" y="78.50">test_ST_PolygonFromEnvelope (profile_geo.py:234)</text></g><g><title>ST_PolygonFromEnvelope (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5455) (241 samples, 77.74%)</title><rect x="22.2581%" y="84" width="77.7419%" height="15" fill="rgb(221,78,26)"/><text x="22.5081%" y="94.50">ST_PolygonFromEnvelope (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5455)</text></g><g><title>ST_PolygonFromEnvelope (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5476) (241 samples, 77.74%)</title><rect x="22.2581%" y="100" width="77.7419%" height="15" fill="rgb(250,127,30)"/><text x="22.5081%" y="110.50">ST_PolygonFromEnvelope (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5476)</text></g><g><title>arctern::gis::ST_PolygonFromEnvelope (gis_functions.cpp:53) (241 samples, 77.74%)</title><rect x="22.2581%" y="116" width="77.7419%" height="15" fill="rgb(230,49,44)"/><text x="22.5081%" y="126.50">arctern::gis::ST_PolygonFromEnvelope (gis_functions.cpp:53)</text></g><g><title>arctern::gis::gdal::ST_PolygonFromEnvelope (gis_functions.cpp:310) (37 samples, 11.94%)</title><rect x="88.0645%" y="132" width="11.9355%" height="15" fill="rgb(229,67,23)"/><text x="88.3145%" y="142.50">arctern::gis::gdal..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::basic_string_view (string_view.hpp:488) (14 samples, 4.52%)</title><rect x="95.4839%" y="148" width="4.5161%" height="15" fill="rgb(249,83,47)"/><text x="95.7339%" y="158.50">nonst..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (11 samples, 3.55%)</title><rect x="96.4516%" y="164" width="3.5484%" height="15" fill="rgb(215,43,3)"/><text x="96.7016%" y="174.50">nons..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (11 samples, 3.55%)</title><rect x="96.4516%" y="180" width="3.5484%" height="15" fill="rgb(238,154,13)"/><text x="96.7016%" y="190.50">nons..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (11 samples, 3.55%)</title><rect x="96.4516%" y="196" width="3.5484%" height="15" fill="rgb(219,56,2)"/><text x="96.7016%" y="206.50">nons..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (11 samples, 3.55%)</title><rect x="96.4516%" y="212" width="3.5484%" height="15" fill="rgb(233,0,4)"/><text x="96.7016%" y="222.50">nons..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (11 samples, 3.55%)</title><rect x="96.4516%" y="228" width="3.5484%" height="15" fill="rgb(235,30,7)"/><text x="96.7016%" y="238.50">nons..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (11 samples, 3.55%)</title><rect x="96.4516%" y="244" width="3.5484%" height="15" fill="rgb(250,79,13)"/><text x="96.7016%" y="254.50">nons..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (11 samples, 3.55%)</title><rect x="96.4516%" y="260" width="3.5484%" height="15" fill="rgb(211,146,34)"/><text x="96.7016%" y="270.50">nons..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (11 samples, 3.55%)</title><rect x="96.4516%" y="276" width="3.5484%" height="15" fill="rgb(228,22,38)"/><text x="96.7016%" y="286.50">nons..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (11 samples, 3.55%)</title><rect x="96.4516%" y="292" width="3.5484%" height="15" fill="rgb(235,168,5)"/><text x="96.7016%" y="302.50">nons..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (10 samples, 3.23%)</title><rect x="96.7742%" y="308" width="3.2258%" height="15" fill="rgb(221,155,16)"/><text x="97.0242%" y="318.50">non..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (9 samples, 2.90%)</title><rect x="97.0968%" y="324" width="2.9032%" height="15" fill="rgb(215,215,53)"/><text x="97.3468%" y="334.50">no..</text></g></svg></svg>