<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (profile_geo.py:15) (13 samples, 1.06%)</title><rect x="0.0000%" y="52" width="1.0569%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (13 samples, 1.06%)</title><rect x="0.0000%" y="68" width="1.0569%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (13 samples, 1.06%)</title><rect x="0.0000%" y="84" width="1.0569%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (13 samples, 1.06%)</title><rect x="0.0000%" y="100" width="1.0569%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (13 samples, 1.06%)</title><rect x="0.0000%" y="116" width="1.0569%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 1.06%)</title><rect x="0.0000%" y="132" width="1.0569%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:16) (21 samples, 1.71%)</title><rect x="1.0569%" y="52" width="1.7073%" height="15" fill="rgb(207,160,47)"/><text x="1.3069%" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (21 samples, 1.71%)</title><rect x="1.0569%" y="68" width="1.7073%" height="15" fill="rgb(228,23,34)"/><text x="1.3069%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (21 samples, 1.71%)</title><rect x="1.0569%" y="84" width="1.7073%" height="15" fill="rgb(218,30,26)"/><text x="1.3069%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (21 samples, 1.71%)</title><rect x="1.0569%" y="100" width="1.7073%" height="15" fill="rgb(220,122,19)"/><text x="1.3069%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (21 samples, 1.71%)</title><rect x="1.0569%" y="116" width="1.7073%" height="15" fill="rgb(250,228,42)"/><text x="1.3069%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (21 samples, 1.71%)</title><rect x="1.0569%" y="132" width="1.7073%" height="15" fill="rgb(240,193,28)"/><text x="1.3069%" y="142.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:54) (17 samples, 1.38%)</title><rect x="1.3821%" y="148" width="1.3821%" height="15" fill="rgb(216,20,37)"/><text x="1.6321%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (17 samples, 1.38%)</title><rect x="1.3821%" y="164" width="1.3821%" height="15" fill="rgb(206,188,39)"/><text x="1.6321%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (17 samples, 1.38%)</title><rect x="1.3821%" y="180" width="1.3821%" height="15" fill="rgb(217,207,13)"/><text x="1.6321%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (17 samples, 1.38%)</title><rect x="1.3821%" y="196" width="1.3821%" height="15" fill="rgb(231,73,38)"/><text x="1.6321%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (17 samples, 1.38%)</title><rect x="1.3821%" y="212" width="1.3821%" height="15" fill="rgb(225,20,46)"/><text x="1.6321%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 1.38%)</title><rect x="1.3821%" y="228" width="1.3821%" height="15" fill="rgb(210,31,41)"/><text x="1.6321%" y="238.50"></text></g><g><title>test_ST_Equals (profile_geo.py:43) (16 samples, 1.30%)</title><rect x="4.7967%" y="68" width="1.3008%" height="15" fill="rgb(221,200,47)"/><text x="5.0467%" y="78.50"></text></g><g><title>array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (16 samples, 1.30%)</title><rect x="4.7967%" y="84" width="1.3008%" height="15" fill="rgb(226,26,5)"/><text x="5.0467%" y="94.50"></text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (16 samples, 1.30%)</title><rect x="4.7967%" y="100" width="1.3008%" height="15" fill="rgb(249,33,26)"/><text x="5.0467%" y="110.50"></text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (16 samples, 1.30%)</title><rect x="4.7967%" y="116" width="1.3008%" height="15" fill="rgb(235,183,28)"/><text x="5.0467%" y="126.50"></text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (16 samples, 1.30%)</title><rect x="4.7967%" y="132" width="1.3008%" height="15" fill="rgb(221,5,38)"/><text x="5.0467%" y="142.50"></text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (16 samples, 1.30%)</title><rect x="4.7967%" y="148" width="1.3008%" height="15" fill="rgb(247,18,42)"/><text x="5.0467%" y="158.50"></text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (16 samples, 1.30%)</title><rect x="4.7967%" y="164" width="1.3008%" height="15" fill="rgb(241,131,45)"/><text x="5.0467%" y="174.50"></text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (16 samples, 1.30%)</title><rect x="4.7967%" y="180" width="1.3008%" height="15" fill="rgb(249,31,29)"/><text x="5.0467%" y="190.50"></text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (15 samples, 1.22%)</title><rect x="4.8780%" y="196" width="1.2195%" height="15" fill="rgb(225,111,53)"/><text x="5.1280%" y="206.50"></text></g><g><title>0x7f0eb595fa8a (libc-2.27.so) (21 samples, 1.71%)</title><rect x="13.7398%" y="260" width="1.7073%" height="15" fill="rgb(238,160,17)"/><text x="13.9898%" y="270.50"></text></g><g><title>0x7f0eb596180a (libc-2.27.so) (18 samples, 1.46%)</title><rect x="17.6423%" y="260" width="1.4634%" height="15" fill="rgb(214,148,48)"/><text x="17.8923%" y="270.50"></text></g><g><title>CPLReplacePointByLocalePoint (libgdal.so.26.0.4) (29 samples, 2.36%)</title><rect x="19.9187%" y="260" width="2.3577%" height="15" fill="rgb(232,36,49)"/><text x="20.1687%" y="270.50">C..</text></g><g><title>localeconv (libc-2.27.so) (26 samples, 2.11%)</title><rect x="20.1626%" y="276" width="2.1138%" height="15" fill="rgb(209,103,24)"/><text x="20.4126%" y="286.50">l..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (140 samples, 11.38%)</title><rect x="11.0569%" y="244" width="11.3821%" height="15" fill="rgb(229,88,8)"/><text x="11.3069%" y="254.50">CPLStrtodDelim (l..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (174 samples, 14.15%)</title><rect x="9.1870%" y="212" width="14.1463%" height="15" fill="rgb(213,181,19)"/><text x="9.4370%" y="222.50">OGRPolygon::importFro..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (158 samples, 12.85%)</title><rect x="10.4878%" y="228" width="12.8455%" height="15" fill="rgb(254,191,54)"/><text x="10.7378%" y="238.50">OGRWktReadPointsM (..</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (190 samples, 15.45%)</title><rect x="8.2114%" y="196" width="15.4472%" height="15" fill="rgb(241,83,37)"/><text x="8.4614%" y="206.50">OGRPolygon::importFromWk..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (207 samples, 16.83%)</title><rect x="7.3984%" y="164" width="16.8293%" height="15" fill="rgb(233,36,39)"/><text x="7.6484%" y="174.50">OGRGeometryFactory::create..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (207 samples, 16.83%)</title><rect x="7.3984%" y="180" width="16.8293%" height="15" fill="rgb(226,3,54)"/><text x="7.6484%" y="190.50">OGRGeometryFactory::create..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::to_string&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:917) (18 samples, 1.46%)</title><rect x="24.3902%" y="196" width="1.4634%" height="15" fill="rgb(245,192,40)"/><text x="24.6402%" y="206.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*, void&gt; (basic_string.h:607) (15 samples, 1.22%)</title><rect x="24.6341%" y="212" width="1.2195%" height="15" fill="rgb(238,167,29)"/><text x="24.8841%" y="222.50"></text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (20 samples, 1.63%)</title><rect x="24.3089%" y="180" width="1.6260%" height="15" fill="rgb(232,182,51)"/><text x="24.5589%" y="190.50"></text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (22 samples, 1.79%)</title><rect x="24.2276%" y="164" width="1.7886%" height="15" fill="rgb(231,60,39)"/><text x="24.4776%" y="174.50">a..</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkt (gis_functions.cpp:216) (230 samples, 18.70%)</title><rect x="7.3984%" y="148" width="18.6992%" height="15" fill="rgb(208,69,12)"/><text x="7.6484%" y="158.50">arctern::gis::gdal::Wrapper_c..</text></g><g><title>arctern::gis::gdal::ST_Equals (gis_functions.cpp:736) (235 samples, 19.11%)</title><rect x="7.0732%" y="132" width="19.1057%" height="15" fill="rgb(235,93,37)"/><text x="7.3232%" y="142.50">arctern::gis::gdal::ST_Equals ..</text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (15 samples, 1.22%)</title><rect x="27.5610%" y="212" width="1.2195%" height="15" fill="rgb(213,116,39)"/><text x="27.8110%" y="222.50"></text></g><g><title>CPLReplacePointByLocalePoint (libgdal.so.26.0.4) (29 samples, 2.36%)</title><rect x="37.9675%" y="260" width="2.3577%" height="15" fill="rgb(222,207,29)"/><text x="38.2175%" y="270.50">C..</text></g><g><title>localeconv (libc-2.27.so) (27 samples, 2.20%)</title><rect x="38.1301%" y="276" width="2.1951%" height="15" fill="rgb(206,96,30)"/><text x="38.3801%" y="286.50">l..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (121 samples, 9.84%)</title><rect x="30.5691%" y="244" width="9.8374%" height="15" fill="rgb(218,138,4)"/><text x="30.8191%" y="254.50">CPLStrtodDelim..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (138 samples, 11.22%)</title><rect x="29.6748%" y="228" width="11.2195%" height="15" fill="rgb(250,191,14)"/><text x="29.9248%" y="238.50">OGRWktReadPointsM..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (150 samples, 12.20%)</title><rect x="28.7805%" y="212" width="12.1951%" height="15" fill="rgb(239,60,40)"/><text x="29.0305%" y="222.50">OGRPolygon::import..</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (169 samples, 13.74%)</title><rect x="27.3171%" y="196" width="13.7398%" height="15" fill="rgb(206,27,48)"/><text x="27.5671%" y="206.50">OGRPolygon::importFro..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (181 samples, 14.72%)</title><rect x="26.7480%" y="164" width="14.7154%" height="15" fill="rgb(225,35,8)"/><text x="26.9980%" y="174.50">OGRGeometryFactory::cr..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (181 samples, 14.72%)</title><rect x="26.7480%" y="180" width="14.7154%" height="15" fill="rgb(250,213,24)"/><text x="26.9980%" y="190.50">OGRGeometryFactory::cr..</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkt (gis_functions.cpp:216) (192 samples, 15.61%)</title><rect x="26.7480%" y="148" width="15.6098%" height="15" fill="rgb(247,123,22)"/><text x="26.9980%" y="158.50">arctern::gis::gdal::Wrap..</text></g><g><title>arctern::gis::gdal::ST_Equals (gis_functions.cpp:737) (200 samples, 16.26%)</title><rect x="26.1789%" y="132" width="16.2602%" height="15" fill="rgb(231,138,38)"/><text x="26.4289%" y="142.50">arctern::gis::gdal::ST_Eq..</text></g><g><title>geos::geom::Geometry::getEnvelopeInternal (libgeos-3.8.0.so) (25 samples, 2.03%)</title><rect x="43.5772%" y="228" width="2.0325%" height="15" fill="rgb(231,145,46)"/><text x="43.8272%" y="238.50">g..</text></g><g><title>geos::geom::LineString::computeEnvelopeInternal (libgeos-3.8.0.so) (23 samples, 1.87%)</title><rect x="43.7398%" y="244" width="1.8699%" height="15" fill="rgb(251,118,11)"/><text x="43.9898%" y="254.50">g..</text></g><g><title>geos::geom::Geometry::getEnvelopeInternal (libgeos-3.8.0.so) (26 samples, 2.11%)</title><rect x="43.5772%" y="196" width="2.1138%" height="15" fill="rgb(217,147,25)"/><text x="43.8272%" y="206.50">g..</text></g><g><title>geos::geom::Polygon::computeEnvelopeInternal (libgeos-3.8.0.so) (26 samples, 2.11%)</title><rect x="43.5772%" y="212" width="2.1138%" height="15" fill="rgb(247,81,37)"/><text x="43.8272%" y="222.50">g..</text></g><g><title>geos::geom::Polygon::isRectangle (libgeos-3.8.0.so) (21 samples, 1.71%)</title><rect x="45.6911%" y="196" width="1.7073%" height="15" fill="rgb(209,12,38)"/><text x="45.9411%" y="206.50"></text></g><g><title>GEOSWithin_r (libgeos_c.so.1.13.1) (60 samples, 4.88%)</title><rect x="42.8455%" y="164" width="4.8780%" height="15" fill="rgb(227,1,9)"/><text x="43.0955%" y="174.50">GEOSWi..</text></g><g><title>geos::geom::Geometry::contains (libgeos-3.8.0.so) (60 samples, 4.88%)</title><rect x="42.8455%" y="180" width="4.8780%" height="15" fill="rgb(248,47,43)"/><text x="43.0955%" y="190.50">geos::..</text></g><g><title>geos::geom::GeometryFactory::createPolygon (libgeos-3.8.0.so) (14 samples, 1.14%)</title><rect x="52.6016%" y="260" width="1.1382%" height="15" fill="rgb(221,10,30)"/><text x="52.8516%" y="270.50"></text></g><g><title>geos::geom::LinearRing::LinearRing (libgeos-3.8.0.so) (20 samples, 1.63%)</title><rect x="54.3089%" y="292" width="1.6260%" height="15" fill="rgb(210,229,1)"/><text x="54.5589%" y="302.50"></text></g><g><title>geos::geom::LinearRing::validateConstruction (libgeos-3.8.0.so) (17 samples, 1.38%)</title><rect x="54.5528%" y="308" width="1.3821%" height="15" fill="rgb(222,148,37)"/><text x="54.8028%" y="318.50"></text></g><g><title>geos::geom::LineString::isClosed (libgeos-3.8.0.so) (14 samples, 1.14%)</title><rect x="54.7967%" y="324" width="1.1382%" height="15" fill="rgb(234,67,33)"/><text x="55.0467%" y="334.50"></text></g><g><title>geos::geom::GeometryFactory::createLinearRing (libgeos-3.8.0.so) (30 samples, 2.44%)</title><rect x="54.0650%" y="276" width="2.4390%" height="15" fill="rgb(247,98,35)"/><text x="54.3150%" y="286.50">ge..</text></g><g><title>geos::geom::FixedSizeCoordinateSequence&lt;(unsigned long)5&gt;::setOrdinate (libgeos-3.8.0.so) (22 samples, 1.79%)</title><rect x="58.1301%" y="292" width="1.7886%" height="15" fill="rgb(247,138,52)"/><text x="58.3801%" y="302.50">g..</text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (streambuf.tcc:59) (20 samples, 1.63%)</title><rect x="69.3496%" y="324" width="1.6260%" height="15" fill="rgb(213,79,30)"/><text x="69.5996%" y="334.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::__safe_gbump (streambuf:804) (20 samples, 1.63%)</title><rect x="69.3496%" y="340" width="1.6260%" height="15" fill="rgb(246,177,23)"/><text x="69.5996%" y="350.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (52 samples, 4.23%)</title><rect x="66.9106%" y="308" width="4.2276%" height="15" fill="rgb(230,62,27)"/><text x="67.1606%" y="318.50">std::..</text></g><g><title>geos::io::WKBReader::readCoordinateSequence (libgeos-3.8.0.so) (189 samples, 15.37%)</title><rect x="56.5041%" y="276" width="15.3659%" height="15" fill="rgb(216,154,8)"/><text x="56.7541%" y="286.50">geos::io::WKBReader::rea..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.0.so) (147 samples, 11.95%)</title><rect x="59.9187%" y="292" width="11.9512%" height="15" fill="rgb(244,35,45)"/><text x="60.1687%" y="302.50">geos::io::WKBReade..</text></g><g><title>geos::io::WKBReader::readLinearRing (libgeos-3.8.0.so) (233 samples, 18.94%)</title><rect x="53.7398%" y="260" width="18.9431%" height="15" fill="rgb(251,115,12)"/><text x="53.9898%" y="270.50">geos::io::WKBReader::readLinea..</text></g><g><title>geos::io::WKBReader::readPolygon (libgeos-3.8.0.so) (258 samples, 20.98%)</title><rect x="52.5203%" y="244" width="20.9756%" height="15" fill="rgb(240,54,50)"/><text x="52.7703%" y="254.50">geos::io::WKBReader::readPolygon ..</text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (17 samples, 1.38%)</title><rect x="73.9837%" y="244" width="1.3821%" height="15" fill="rgb(233,84,52)"/><text x="74.2337%" y="254.50"></text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.0.so) (306 samples, 24.88%)</title><rect x="51.3008%" y="212" width="24.8780%" height="15" fill="rgb(207,117,47)"/><text x="51.5508%" y="222.50">geos::io::WKBReader::read (libgeos-3.8.0..</text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.0.so) (305 samples, 24.80%)</title><rect x="51.3821%" y="228" width="24.7967%" height="15" fill="rgb(249,43,39)"/><text x="51.6321%" y="238.50">geos::io::WKBReader::readGeometry (libge..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (basic_string.tcc:468) (17 samples, 1.38%)</title><rect x="77.0732%" y="212" width="1.3821%" height="15" fill="rgb(209,38,44)"/><text x="77.3232%" y="222.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (basic_string.h:216) (17 samples, 1.38%)</title><rect x="77.0732%" y="228" width="1.3821%" height="15" fill="rgb(236,212,23)"/><text x="77.3232%" y="238.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (basic_string.h:183) (17 samples, 1.38%)</title><rect x="77.0732%" y="244" width="1.3821%" height="15" fill="rgb(242,79,21)"/><text x="77.3232%" y="254.50"></text></g><g><title>__dynamic_cast (dyncast.cc:73) (13 samples, 1.06%)</title><rect x="81.7073%" y="260" width="1.0569%" height="15" fill="rgb(211,96,35)"/><text x="81.9573%" y="270.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:159) (37 samples, 3.01%)</title><rect x="79.8374%" y="228" width="3.0081%" height="15" fill="rgb(253,215,40)"/><text x="80.0874%" y="238.50">std..</text></g><g><title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (locale_classes.tcc:110) (32 samples, 2.60%)</title><rect x="80.2439%" y="244" width="2.6016%" height="15" fill="rgb(211,81,21)"/><text x="80.4939%" y="254.50">st..</text></g><g><title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (locale_classes.tcc:139) (21 samples, 1.71%)</title><rect x="83.0081%" y="244" width="1.7073%" height="15" fill="rgb(208,190,38)"/><text x="83.2581%" y="254.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:160) (24 samples, 1.95%)</title><rect x="82.8455%" y="228" width="1.9512%" height="15" fill="rgb(235,213,38)"/><text x="83.0955%" y="238.50">s..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:164) (16 samples, 1.30%)</title><rect x="84.7967%" y="228" width="1.3008%" height="15" fill="rgb(237,122,38)"/><text x="85.0467%" y="238.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:169) (17 samples, 1.38%)</title><rect x="86.9919%" y="228" width="1.3821%" height="15" fill="rgb(244,218,35)"/><text x="87.2419%" y="238.50"></text></g><g><title>std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (locale_classes.tcc:110) (17 samples, 1.38%)</title><rect x="86.9919%" y="244" width="1.3821%" height="15" fill="rgb(240,68,47)"/><text x="87.2419%" y="254.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (126 samples, 10.24%)</title><rect x="79.5935%" y="212" width="10.2439%" height="15" fill="rgb(210,16,53)"/><text x="79.8435%" y="222.50">std::basic_ios&lt;..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:170) (18 samples, 1.46%)</title><rect x="88.3740%" y="228" width="1.4634%" height="15" fill="rgb(235,124,12)"/><text x="88.6240%" y="238.50"></text></g><g><title>std::use_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (locale_classes.tcc:139) (15 samples, 1.22%)</title><rect x="88.6179%" y="244" width="1.2195%" height="15" fill="rgb(224,169,11)"/><text x="88.8679%" y="254.50"></text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.1) (517 samples, 42.03%)</title><rect x="49.2683%" y="196" width="42.0325%" height="15" fill="rgb(250,166,2)"/><text x="49.5183%" y="206.50">GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.1)</text></g><g><title>OGRPolygon::exportToWkb (libgdal.so.26.0.4) (14 samples, 1.14%)</title><rect x="91.5447%" y="196" width="1.1382%" height="15" fill="rgb(242,216,29)"/><text x="91.7947%" y="206.50"></text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (554 samples, 45.04%)</title><rect x="47.7236%" y="164" width="45.0407%" height="15" fill="rgb(230,116,27)"/><text x="47.9736%" y="174.50">OGRGeometry::exportToGEOS (libgdal.so.26.0.4)</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (547 samples, 44.47%)</title><rect x="48.2927%" y="180" width="44.4715%" height="15" fill="rgb(228,99,48)"/><text x="48.5427%" y="190.50">convertToGEOSGeom (libgdal.so.26.0.4)</text></g><g><title>cfree (libc-2.27.so) (16 samples, 1.30%)</title><rect x="94.1463%" y="180" width="1.3008%" height="15" fill="rgb(253,11,6)"/><text x="94.3963%" y="190.50"></text></g><g><title>geos::geom::Polygon::~Polygon (libgeos-3.8.0.so) (24 samples, 1.95%)</title><rect x="93.5772%" y="164" width="1.9512%" height="15" fill="rgb(247,143,39)"/><text x="93.8272%" y="174.50">g..</text></g><g><title>arctern::gis::gdal::ST_Equals (gis_functions.cpp:740) (682 samples, 55.45%)</title><rect x="42.4390%" y="132" width="55.4472%" height="15" fill="rgb(236,97,10)"/><text x="42.6890%" y="142.50">arctern::gis::gdal::ST_Equals (gis_functions.cpp:740)</text></g><g><title>OGRGEOSBooleanPredicate (libgdal.so.26.0.4) (681 samples, 55.37%)</title><rect x="42.5203%" y="148" width="55.3659%" height="15" fill="rgb(233,208,19)"/><text x="42.7703%" y="158.50">OGRGEOSBooleanPredicate (libgdal.so.26.0.4)</text></g><g><title>initGEOS_r (libgeos_c.so.1.13.1) (29 samples, 2.36%)</title><rect x="95.5285%" y="164" width="2.3577%" height="15" fill="rgb(216,164,2)"/><text x="95.7785%" y="174.50">i..</text></g><g><title>GEOS_init_r (libgeos_c.so.1.13.1) (28 samples, 2.28%)</title><rect x="95.6098%" y="180" width="2.2764%" height="15" fill="rgb(220,129,5)"/><text x="95.8598%" y="190.50">G..</text></g><g><title>operator new (new_op.cc:50) (14 samples, 1.14%)</title><rect x="96.7480%" y="196" width="1.1382%" height="15" fill="rgb(242,17,10)"/><text x="96.9980%" y="206.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (14 samples, 1.14%)</title><rect x="96.7480%" y="212" width="1.1382%" height="15" fill="rgb(242,107,0)"/><text x="96.9980%" y="222.50"></text></g><g><title>all (1,230 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (1,191 samples, 96.83%)</title><rect x="3.1707%" y="52" width="96.8293%" height="15" fill="rgb(233,223,10)"/><text x="3.4207%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_Equals (profile_geo.py:45) (1,151 samples, 93.58%)</title><rect x="6.4228%" y="68" width="93.5772%" height="15" fill="rgb(215,21,27)"/><text x="6.6728%" y="78.50">test_ST_Equals (profile_geo.py:45)</text></g><g><title>ST_Equals (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4596) (1,151 samples, 93.58%)</title><rect x="6.4228%" y="84" width="93.5772%" height="15" fill="rgb(232,23,21)"/><text x="6.6728%" y="94.50">ST_Equals (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4596)</text></g><g><title>ST_Equals (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4617) (1,151 samples, 93.58%)</title><rect x="6.4228%" y="100" width="93.5772%" height="15" fill="rgb(244,5,23)"/><text x="6.6728%" y="110.50">ST_Equals (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:4617)</text></g><g><title>arctern::gis::ST_Equals (gis_functions.cpp:232) (1,151 samples, 93.58%)</title><rect x="6.4228%" y="116" width="93.5772%" height="15" fill="rgb(226,81,46)"/><text x="6.6728%" y="126.50">arctern::gis::ST_Equals (gis_functions.cpp:232)</text></g></svg></svg>