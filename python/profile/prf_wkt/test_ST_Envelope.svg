<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180"><g><title>arrow::BufferBuilder::Resize (libarrow_python.so.16.0.0) (29 samples, 1.19%)</title><rect x="3.3933%" y="228" width="1.1856%" height="15" fill="rgb(227,0,7)"/><text x="3.6433%" y="238.50"></text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (29 samples, 1.19%)</title><rect x="3.3933%" y="244" width="1.1856%" height="15" fill="rgb(217,0,24)"/><text x="3.6433%" y="254.50"></text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (29 samples, 1.19%)</title><rect x="3.3933%" y="260" width="1.1856%" height="15" fill="rgb(221,193,54)"/><text x="3.6433%" y="270.50"></text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (29 samples, 1.19%)</title><rect x="3.3933%" y="276" width="1.1856%" height="15" fill="rgb(248,212,6)"/><text x="3.6433%" y="286.50"></text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (29 samples, 1.19%)</title><rect x="3.3933%" y="292" width="1.1856%" height="15" fill="rgb(208,68,35)"/><text x="3.6433%" y="302.50"></text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (29 samples, 1.19%)</title><rect x="3.3933%" y="308" width="1.1856%" height="15" fill="rgb(232,128,0)"/><text x="3.6433%" y="318.50"></text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (29 samples, 1.19%)</title><rect x="3.3933%" y="324" width="1.1856%" height="15" fill="rgb(207,160,47)"/><text x="3.6433%" y="334.50"></text></g><g><title>memcpy (string3.h:52) (29 samples, 1.19%)</title><rect x="3.3933%" y="340" width="1.1856%" height="15" fill="rgb(228,23,34)"/><text x="3.6433%" y="350.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (51 samples, 2.09%)</title><rect x="2.6983%" y="212" width="2.0850%" height="15" fill="rgb(218,30,26)"/><text x="2.9483%" y="222.50">a..</text></g><g><title>array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (73 samples, 2.98%)</title><rect x="2.0033%" y="84" width="2.9845%" height="15" fill="rgb(220,122,19)"/><text x="2.2533%" y="94.50">arr..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (66 samples, 2.70%)</title><rect x="2.2895%" y="100" width="2.6983%" height="15" fill="rgb(250,228,42)"/><text x="2.5395%" y="110.50">li..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (66 samples, 2.70%)</title><rect x="2.2895%" y="116" width="2.6983%" height="15" fill="rgb(240,193,28)"/><text x="2.5395%" y="126.50">ar..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (66 samples, 2.70%)</title><rect x="2.2895%" y="132" width="2.6983%" height="15" fill="rgb(216,20,37)"/><text x="2.5395%" y="142.50">ar..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (66 samples, 2.70%)</title><rect x="2.2895%" y="148" width="2.6983%" height="15" fill="rgb(206,188,39)"/><text x="2.5395%" y="158.50">ar..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (66 samples, 2.70%)</title><rect x="2.2895%" y="164" width="2.6983%" height="15" fill="rgb(217,207,13)"/><text x="2.5395%" y="174.50">ar..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (66 samples, 2.70%)</title><rect x="2.2895%" y="180" width="2.6983%" height="15" fill="rgb(231,73,38)"/><text x="2.5395%" y="190.50">ar..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (63 samples, 2.58%)</title><rect x="2.4121%" y="196" width="2.5756%" height="15" fill="rgb(225,20,46)"/><text x="2.6621%" y="206.50">ar..</text></g><g><title>test_ST_Envelope (profile_geo.py:217) (99 samples, 4.05%)</title><rect x="1.0221%" y="68" width="4.0474%" height="15" fill="rgb(210,31,41)"/><text x="1.2721%" y="78.50">test..</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkt (gis_functions.cpp:213) (32 samples, 1.31%)</title><rect x="5.4783%" y="148" width="1.3083%" height="15" fill="rgb(221,200,47)"/><text x="5.7283%" y="158.50"></text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (67 samples, 2.74%)</title><rect x="11.0793%" y="260" width="2.7392%" height="15" fill="rgb(226,26,5)"/><text x="11.3293%" y="270.50">CP..</text></g><g><title>OGRSimpleCurve::importFromWKTListOnly (libgdal.so.26.0.4) (97 samples, 3.97%)</title><rect x="10.3843%" y="228" width="3.9657%" height="15" fill="rgb(249,33,26)"/><text x="10.6343%" y="238.50">OGRS..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (90 samples, 3.68%)</title><rect x="10.6705%" y="244" width="3.6795%" height="15" fill="rgb(235,183,28)"/><text x="10.9205%" y="254.50">OGRW..</text></g><g><title>OGRMultiCurve::importFromWkt (libgdal.so.26.0.4) (124 samples, 5.07%)</title><rect x="9.4440%" y="196" width="5.0695%" height="15" fill="rgb(221,5,38)"/><text x="9.6940%" y="206.50">OGRMul..</text></g><g><title>OGRGeometry::importCurveCollectionFromWkt (libgdal.so.26.0.4) (124 samples, 5.07%)</title><rect x="9.4440%" y="212" width="5.0695%" height="15" fill="rgb(247,18,42)"/><text x="9.6940%" y="222.50">OGRGeo..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (28 samples, 1.14%)</title><rect x="16.0262%" y="228" width="1.1447%" height="15" fill="rgb(241,131,45)"/><text x="16.2762%" y="238.50"></text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (36 samples, 1.47%)</title><rect x="15.8626%" y="212" width="1.4718%" height="15" fill="rgb(249,31,29)"/><text x="16.1126%" y="222.50"></text></g><g><title>OGRMultiPoint::importFromWkt (libgdal.so.26.0.4) (69 samples, 2.82%)</title><rect x="14.6770%" y="196" width="2.8209%" height="15" fill="rgb(225,111,53)"/><text x="14.9270%" y="206.50">OG..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (117 samples, 4.78%)</title><rect x="19.7056%" y="244" width="4.7833%" height="15" fill="rgb(238,160,17)"/><text x="19.9556%" y="254.50">CPLStr..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (154 samples, 6.30%)</title><rect x="19.0515%" y="228" width="6.2960%" height="15" fill="rgb(214,148,48)"/><text x="19.3015%" y="238.50">OGRWktRe..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (171 samples, 6.99%)</title><rect x="18.4383%" y="212" width="6.9910%" height="15" fill="rgb(232,36,49)"/><text x="18.6883%" y="222.50">OGRPolygo..</text></g><g><title>OGRMultiSurface::importFromWkt (libgdal.so.26.0.4) (194 samples, 7.93%)</title><rect x="17.5388%" y="196" width="7.9313%" height="15" fill="rgb(209,103,24)"/><text x="17.7888%" y="206.50">OGRMultiSur..</text></g><g><title>OGRPoint::importFromWkt (libgdal.so.26.0.4) (41 samples, 1.68%)</title><rect x="25.5110%" y="196" width="1.6762%" height="15" fill="rgb(229,88,8)"/><text x="25.7610%" y="206.50"></text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (60 samples, 2.45%)</title><rect x="28.4137%" y="244" width="2.4530%" height="15" fill="rgb(213,181,19)"/><text x="28.6637%" y="254.50">CP..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (73 samples, 2.98%)</title><rect x="28.1684%" y="228" width="2.9845%" height="15" fill="rgb(254,191,54)"/><text x="28.4184%" y="238.50">OGR..</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (97 samples, 3.97%)</title><rect x="27.2690%" y="196" width="3.9657%" height="15" fill="rgb(241,83,37)"/><text x="27.5190%" y="206.50">OGRP..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (84 samples, 3.43%)</title><rect x="27.8005%" y="212" width="3.4342%" height="15" fill="rgb(233,36,39)"/><text x="28.0505%" y="222.50">OGR..</text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (30 samples, 1.23%)</title><rect x="31.3164%" y="212" width="1.2265%" height="15" fill="rgb(226,3,54)"/><text x="31.5664%" y="222.50"></text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (62 samples, 2.53%)</title><rect x="32.8291%" y="228" width="2.5348%" height="15" fill="rgb(245,192,40)"/><text x="33.0791%" y="238.50">CP..</text></g><g><title>OGRSimpleCurve::importFromWkt (libgdal.so.26.0.4) (110 samples, 4.50%)</title><rect x="31.2347%" y="196" width="4.4971%" height="15" fill="rgb(238,167,29)"/><text x="31.4847%" y="206.50">OGRSi..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (78 samples, 3.19%)</title><rect x="32.5429%" y="212" width="3.1889%" height="15" fill="rgb(232,182,51)"/><text x="32.7929%" y="222.50">OGR..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (725 samples, 29.64%)</title><rect x="6.7866%" y="164" width="29.6402%" height="15" fill="rgb(231,60,39)"/><text x="7.0366%" y="174.50">OGRGeometryFactory::createFromWkt (libgdal.so.26..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (723 samples, 29.56%)</title><rect x="6.8684%" y="180" width="29.5585%" height="15" fill="rgb(208,69,12)"/><text x="7.1184%" y="190.50">OGRGeometryFactory::createFromWkt (libgdal.so.26..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (basic_string.h:236) (46 samples, 1.88%)</title><rect x="37.7351%" y="244" width="1.8806%" height="15" fill="rgb(235,93,37)"/><text x="37.9851%" y="254.50">s..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::to_string&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:917) (59 samples, 2.41%)</title><rect x="37.2854%" y="196" width="2.4121%" height="15" fill="rgb(213,116,39)"/><text x="37.5354%" y="206.50">no..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*, void&gt; (basic_string.h:607) (57 samples, 2.33%)</title><rect x="37.3671%" y="212" width="2.3303%" height="15" fill="rgb(222,207,29)"/><text x="37.6171%" y="222.50">s..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.h:255) (51 samples, 2.09%)</title><rect x="37.6124%" y="228" width="2.0850%" height="15" fill="rgb(206,96,30)"/><text x="37.8624%" y="238.50">s..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (68 samples, 2.78%)</title><rect x="36.9583%" y="180" width="2.7800%" height="15" fill="rgb(218,138,4)"/><text x="37.2083%" y="190.50">no..</text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (85 samples, 3.48%)</title><rect x="36.4268%" y="164" width="3.4751%" height="15" fill="rgb(250,191,14)"/><text x="36.6768%" y="174.50">arr..</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkt (gis_functions.cpp:216) (815 samples, 33.32%)</title><rect x="6.7866%" y="148" width="33.3197%" height="15" fill="rgb(239,60,40)"/><text x="7.0366%" y="158.50">arctern::gis::gdal::Wrapper_createFromWkt (gis_functio..</text></g><g><title>arctern::gis::gdal::ST_Envelope (gis_functions.cpp:407) (861 samples, 35.20%)</title><rect x="5.3557%" y="132" width="35.2003%" height="15" fill="rgb(206,27,48)"/><text x="5.6057%" y="142.50">arctern::gis::gdal::ST_Envelope (gis_functions.cpp:407)</text></g><g><title>arctern::gis::gdal::ST_Envelope (gis_functions.cpp:414) (27 samples, 1.10%)</title><rect x="40.8422%" y="132" width="1.1038%" height="15" fill="rgb(225,35,8)"/><text x="41.0922%" y="142.50"></text></g><g><title>OGRMakeWktCoordinateM (libgdal.so.26.0.4) (30 samples, 1.23%)</title><rect x="42.4366%" y="180" width="1.2265%" height="15" fill="rgb(250,213,24)"/><text x="42.6866%" y="190.50"></text></g><g><title>arctern::gis::gdal::ST_Envelope (gis_functions.cpp:418) (52 samples, 2.13%)</title><rect x="41.9869%" y="132" width="2.1259%" height="15" fill="rgb(247,123,22)"/><text x="42.2369%" y="142.50">a..</text></g><g><title>arctern::gis::gdal::Wrapper_OGR_G_ExportToWkt (gis_functions.cpp:234) (47 samples, 1.92%)</title><rect x="42.1913%" y="148" width="1.9215%" height="15" fill="rgb(231,138,38)"/><text x="42.4413%" y="158.50">a..</text></g><g><title>OGRPoint::exportToWkt (libgdal.so.26.0.4) (46 samples, 1.88%)</title><rect x="42.2322%" y="164" width="1.8806%" height="15" fill="rgb(231,145,46)"/><text x="42.4822%" y="174.50">O..</text></g><g><title>OGRMakeWktCoordinateM (libgdal.so.26.0.4) (33 samples, 1.35%)</title><rect x="44.8078%" y="180" width="1.3491%" height="15" fill="rgb(251,118,11)"/><text x="45.0578%" y="190.50"></text></g><g><title>__snprintf_chk (libc-2.27.so) (26 samples, 1.06%)</title><rect x="45.0940%" y="196" width="1.0630%" height="15" fill="rgb(217,147,25)"/><text x="45.3440%" y="206.50"></text></g><g><title>arctern::gis::gdal::ST_Envelope (gis_functions.cpp:423) (60 samples, 2.45%)</title><rect x="44.1946%" y="132" width="2.4530%" height="15" fill="rgb(247,81,37)"/><text x="44.4446%" y="142.50">ar..</text></g><g><title>arctern::gis::gdal::Wrapper_OGR_G_ExportToWkt (gis_functions.cpp:234) (53 samples, 2.17%)</title><rect x="44.4808%" y="148" width="2.1668%" height="15" fill="rgb(209,12,38)"/><text x="44.7308%" y="158.50">a..</text></g><g><title>OGRSimpleCurve::exportToWkt (libgdal.so.26.0.4) (53 samples, 2.17%)</title><rect x="44.4808%" y="164" width="2.1668%" height="15" fill="rgb(227,1,9)"/><text x="44.7308%" y="174.50">O..</text></g><g><title>OGRMakeWktCoordinateM (libgdal.so.26.0.4) (52 samples, 2.13%)</title><rect x="47.1382%" y="180" width="2.1259%" height="15" fill="rgb(248,47,43)"/><text x="47.3882%" y="190.50">O..</text></g><g><title>__snprintf_chk (libc-2.27.so) (41 samples, 1.68%)</title><rect x="47.5879%" y="196" width="1.6762%" height="15" fill="rgb(221,10,30)"/><text x="47.8379%" y="206.50"></text></g><g><title>__vsnprintf_chk (libc-2.27.so) (41 samples, 1.68%)</title><rect x="47.5879%" y="212" width="1.6762%" height="15" fill="rgb(210,229,1)"/><text x="47.8379%" y="222.50"></text></g><g><title>_IO_vfprintf (libc-2.27.so) (36 samples, 1.47%)</title><rect x="47.7923%" y="228" width="1.4718%" height="15" fill="rgb(222,148,37)"/><text x="48.0423%" y="238.50"></text></g><g><title>arctern::gis::gdal::ST_Envelope (gis_functions.cpp:430) (68 samples, 2.78%)</title><rect x="46.8111%" y="132" width="2.7800%" height="15" fill="rgb(234,67,33)"/><text x="47.0611%" y="142.50">ar..</text></g><g><title>arctern::gis::gdal::Wrapper_OGR_G_ExportToWkt (gis_functions.cpp:234) (63 samples, 2.58%)</title><rect x="47.0155%" y="148" width="2.5756%" height="15" fill="rgb(247,98,35)"/><text x="47.2655%" y="158.50">ar..</text></g><g><title>OGRSimpleCurve::exportToWkt (libgdal.so.26.0.4) (63 samples, 2.58%)</title><rect x="47.0155%" y="164" width="2.5756%" height="15" fill="rgb(247,138,52)"/><text x="47.2655%" y="174.50">OG..</text></g><g><title>arctern::gis::gdal::ST_Envelope (gis_functions.cpp:432) (26 samples, 1.06%)</title><rect x="49.5912%" y="132" width="1.0630%" height="15" fill="rgb(213,79,30)"/><text x="49.8412%" y="142.50"></text></g><g><title>0x7f65494d08f5 (libc-2.27.so) (25 samples, 1.02%)</title><rect x="53.3933%" y="212" width="1.0221%" height="15" fill="rgb(246,177,23)"/><text x="53.6433%" y="222.50"></text></g><g><title>arctern::gis::gdal::ST_Envelope (gis_functions.cpp:437) (38 samples, 1.55%)</title><rect x="52.9027%" y="132" width="1.5536%" height="15" fill="rgb(230,62,27)"/><text x="53.1527%" y="142.50"></text></g><g><title>OGRSimpleCurve::setPoint (libgdal.so.26.0.4) (38 samples, 1.55%)</title><rect x="52.9027%" y="148" width="1.5536%" height="15" fill="rgb(216,154,8)"/><text x="53.1527%" y="158.50"></text></g><g><title>OGRSimpleCurve::setNumPoints (libgdal.so.26.0.4) (36 samples, 1.47%)</title><rect x="52.9845%" y="164" width="1.4718%" height="15" fill="rgb(244,35,45)"/><text x="53.2345%" y="174.50"></text></g><g><title>VSIReallocVerbose (libgdal.so.26.0.4) (36 samples, 1.47%)</title><rect x="52.9845%" y="180" width="1.4718%" height="15" fill="rgb(251,115,12)"/><text x="53.2345%" y="190.50"></text></g><g><title>__libc_realloc (libc-2.27.so) (36 samples, 1.47%)</title><rect x="52.9845%" y="196" width="1.4718%" height="15" fill="rgb(240,54,50)"/><text x="53.2345%" y="206.50"></text></g><g><title>OGRCurvePolygon::addRing (libgdal.so.26.0.4) (33 samples, 1.35%)</title><rect x="55.6419%" y="148" width="1.3491%" height="15" fill="rgb(233,84,52)"/><text x="55.8919%" y="158.50"></text></g><g><title>0x7f6549493fa9 (libc-2.27.so) (61 samples, 2.49%)</title><rect x="70.8095%" y="260" width="2.4939%" height="15" fill="rgb(207,117,47)"/><text x="71.0595%" y="270.50">0x..</text></g><g><title>OGRMakeWktCoordinateM (libgdal.so.26.0.4) (510 samples, 20.85%)</title><rect x="61.0793%" y="196" width="20.8504%" height="15" fill="rgb(249,43,39)"/><text x="61.3293%" y="206.50">OGRMakeWktCoordinateM (libgdal.so..</text></g><g><title>__snprintf_chk (libc-2.27.so) (420 samples, 17.17%)</title><rect x="64.7588%" y="212" width="17.1709%" height="15" fill="rgb(209,38,44)"/><text x="65.0088%" y="222.50">__snprintf_chk (libc-2.27.s..</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (407 samples, 16.64%)</title><rect x="65.2903%" y="228" width="16.6394%" height="15" fill="rgb(236,212,23)"/><text x="65.5403%" y="238.50">__vsnprintf_chk (libc-2.27..</text></g><g><title>_IO_vfprintf (libc-2.27.so) (339 samples, 13.86%)</title><rect x="68.0703%" y="244" width="13.8594%" height="15" fill="rgb(242,79,21)"/><text x="68.3203%" y="254.50">_IO_vfprintf (libc-2...</text></g><g><title>OGRSimpleCurve::exportToWkt (libgdal.so.26.0.4) (650 samples, 26.57%)</title><rect x="58.9125%" y="180" width="26.5740%" height="15" fill="rgb(211,96,35)"/><text x="59.1625%" y="190.50">OGRSimpleCurve::exportToWkt (libgdal.so.26...</text></g><g><title>__snprintf_chk (libc-2.27.so) (80 samples, 3.27%)</title><rect x="82.2159%" y="196" width="3.2706%" height="15" fill="rgb(253,215,40)"/><text x="82.4659%" y="206.50">__s..</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (78 samples, 3.19%)</title><rect x="82.2976%" y="212" width="3.1889%" height="15" fill="rgb(211,81,21)"/><text x="82.5476%" y="222.50">__v..</text></g><g><title>_IO_vfprintf (libc-2.27.so) (74 samples, 3.03%)</title><rect x="82.4612%" y="228" width="3.0253%" height="15" fill="rgb(208,190,38)"/><text x="82.7112%" y="238.50">_IO..</text></g><g><title>OGRPolygon::exportToWkt (libgdal.so.26.0.4) (731 samples, 29.89%)</title><rect x="57.1137%" y="164" width="29.8855%" height="15" fill="rgb(235,213,38)"/><text x="57.3637%" y="174.50">OGRPolygon::exportToWkt (libgdal.so.26.0.4)</text></g><g><title>arctern::gis::gdal::ST_Envelope (gis_functions.cpp:440) (772 samples, 31.56%)</title><rect x="55.6010%" y="132" width="31.5617%" height="15" fill="rgb(237,122,38)"/><text x="55.8510%" y="142.50">arctern::gis::gdal::ST_Envelope (gis_functions.cpp:..</text></g><g><title>arctern::gis::gdal::Wrapper_OGR_G_ExportToWkt (gis_functions.cpp:234) (737 samples, 30.13%)</title><rect x="57.0319%" y="148" width="30.1308%" height="15" fill="rgb(244,218,35)"/><text x="57.2819%" y="158.50">arctern::gis::gdal::Wrapper_OGR_G_ExportToWkt (gi..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:56) (29 samples, 1.19%)</title><rect x="88.4301%" y="180" width="1.1856%" height="15" fill="rgb(240,68,47)"/><text x="88.6801%" y="190.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:57) (41 samples, 1.68%)</title><rect x="89.6157%" y="180" width="1.6762%" height="15" fill="rgb(210,16,53)"/><text x="89.8657%" y="190.50"></text></g><g><title>arrow::BufferBuilder::Append (buffer_builder.h:105) (26 samples, 1.06%)</title><rect x="92.4366%" y="212" width="1.0630%" height="15" fill="rgb(235,124,12)"/><text x="92.6866%" y="222.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:60) (56 samples, 2.29%)</title><rect x="91.2919%" y="180" width="2.2895%" height="15" fill="rgb(224,169,11)"/><text x="91.5419%" y="190.50">a..</text></g><g><title>arrow::TypedBufferBuilder&lt;unsigned char, void&gt;::Append (buffer_builder.h:197) (43 samples, 1.76%)</title><rect x="91.8234%" y="196" width="1.7580%" height="15" fill="rgb(250,166,2)"/><text x="92.0734%" y="206.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:64) (26 samples, 1.06%)</title><rect x="93.5814%" y="180" width="1.0630%" height="15" fill="rgb(242,216,29)"/><text x="93.8314%" y="190.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:73) (157 samples, 6.42%)</title><rect x="88.2666%" y="148" width="6.4186%" height="15" fill="rgb(230,116,27)"/><text x="88.5166%" y="158.50">arrow::B..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:69) (156 samples, 6.38%)</title><rect x="88.3074%" y="164" width="6.3778%" height="15" fill="rgb(228,99,48)"/><text x="88.5574%" y="174.50">arrow::B..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (27 samples, 1.10%)</title><rect x="95.6664%" y="404" width="1.1038%" height="15" fill="rgb(253,11,6)"/><text x="95.9164%" y="414.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (26 samples, 1.06%)</title><rect x="95.7073%" y="420" width="1.0630%" height="15" fill="rgb(247,143,39)"/><text x="95.9573%" y="430.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (25 samples, 1.02%)</title><rect x="95.7482%" y="436" width="1.0221%" height="15" fill="rgb(236,97,10)"/><text x="95.9982%" y="446.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (29 samples, 1.19%)</title><rect x="95.6255%" y="388" width="1.1856%" height="15" fill="rgb(233,208,19)"/><text x="95.8755%" y="398.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (32 samples, 1.31%)</title><rect x="95.5437%" y="356" width="1.3083%" height="15" fill="rgb(216,164,2)"/><text x="95.7937%" y="366.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (31 samples, 1.27%)</title><rect x="95.5846%" y="372" width="1.2674%" height="15" fill="rgb(220,129,5)"/><text x="95.8346%" y="382.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (34 samples, 1.39%)</title><rect x="95.5029%" y="324" width="1.3900%" height="15" fill="rgb(242,17,10)"/><text x="95.7529%" y="334.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (34 samples, 1.39%)</title><rect x="95.5029%" y="340" width="1.3900%" height="15" fill="rgb(242,107,0)"/><text x="95.7529%" y="350.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (35 samples, 1.43%)</title><rect x="95.5029%" y="308" width="1.4309%" height="15" fill="rgb(251,28,31)"/><text x="95.7529%" y="318.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (37 samples, 1.51%)</title><rect x="95.4620%" y="292" width="1.5127%" height="15" fill="rgb(233,223,10)"/><text x="95.7120%" y="302.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (39 samples, 1.59%)</title><rect x="95.4211%" y="276" width="1.5944%" height="15" fill="rgb(215,21,27)"/><text x="95.6711%" y="286.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (41 samples, 1.68%)</title><rect x="95.3802%" y="260" width="1.6762%" height="15" fill="rgb(232,23,21)"/><text x="95.6302%" y="270.50"></text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (45 samples, 1.84%)</title><rect x="95.2576%" y="244" width="1.8397%" height="15" fill="rgb(244,5,23)"/><text x="95.5076%" y="254.50">n..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (47 samples, 1.92%)</title><rect x="95.2167%" y="228" width="1.9215%" height="15" fill="rgb(226,81,46)"/><text x="95.4667%" y="238.50">n..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (51 samples, 2.09%)</title><rect x="95.1349%" y="196" width="2.0850%" height="15" fill="rgb(247,70,30)"/><text x="95.3849%" y="206.50">n..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (50 samples, 2.04%)</title><rect x="95.1758%" y="212" width="2.0442%" height="15" fill="rgb(212,68,19)"/><text x="95.4258%" y="222.50">n..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (53 samples, 2.17%)</title><rect x="95.0940%" y="180" width="2.1668%" height="15" fill="rgb(240,187,13)"/><text x="95.3440%" y="190.50">n..</text></g><g><title>nonstd::sv_lite::detail::length&lt;char const&gt; (string_view.hpp:418) (56 samples, 2.29%)</title><rect x="95.0531%" y="164" width="2.2895%" height="15" fill="rgb(223,113,26)"/><text x="95.3031%" y="174.50">n..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::basic_string_view (string_view.hpp:488) (61 samples, 2.49%)</title><rect x="94.8896%" y="148" width="2.4939%" height="15" fill="rgb(206,192,2)"/><text x="95.1396%" y="158.50">no..</text></g><g><title>arctern::gis::gdal::ST_Envelope (gis_functions.cpp:443) (252 samples, 10.30%)</title><rect x="87.1627%" y="132" width="10.3025%" height="15" fill="rgb(241,108,4)"/><text x="87.4127%" y="142.50">arctern::gis::g..</text></g><g><title>all (2,446 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (2,423 samples, 99.06%)</title><rect x="0.9403%" y="52" width="99.0597%" height="15" fill="rgb(224,114,35)"/><text x="1.1903%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_Envelope (profile_geo.py:218) (2,322 samples, 94.93%)</title><rect x="5.0695%" y="68" width="94.9305%" height="15" fill="rgb(245,159,27)"/><text x="5.3195%" y="78.50">test_ST_Envelope (profile_geo.py:218)</text></g><g><title>ST_Envelope (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6557) (2,321 samples, 94.89%)</title><rect x="5.1104%" y="84" width="94.8896%" height="15" fill="rgb(245,172,44)"/><text x="5.3604%" y="94.50">ST_Envelope (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6557)</text></g><g><title>ST_Envelope (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6578) (2,321 samples, 94.89%)</title><rect x="5.1104%" y="100" width="94.8896%" height="15" fill="rgb(236,23,11)"/><text x="5.3604%" y="110.50">ST_Envelope (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6578)</text></g><g><title>arctern::gis::ST_Envelope (gis_functions.cpp:99) (2,321 samples, 94.89%)</title><rect x="5.1104%" y="116" width="94.8896%" height="15" fill="rgb(205,117,38)"/><text x="5.3604%" y="126.50">arctern::gis::ST_Envelope (gis_functions.cpp:99)</text></g><g><title>arctern::gis::gdal::ST_Envelope (gis_functions.cpp:445) (59 samples, 2.41%)</title><rect x="97.5879%" y="132" width="2.4121%" height="15" fill="rgb(237,72,25)"/><text x="97.8379%" y="142.50">ar..</text></g></svg></svg>