<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (profile_geo.py:15) (12 samples, 1.47%)</title><rect x="0.0000%" y="52" width="1.4652%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (12 samples, 1.47%)</title><rect x="0.0000%" y="68" width="1.4652%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (12 samples, 1.47%)</title><rect x="0.0000%" y="84" width="1.4652%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (12 samples, 1.47%)</title><rect x="0.0000%" y="100" width="1.4652%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (12 samples, 1.47%)</title><rect x="0.0000%" y="116" width="1.4652%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (12 samples, 1.47%)</title><rect x="0.0000%" y="132" width="1.4652%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="142.50"></text></g><g><title>&lt;module&gt; (pyarrow/__init__.py:49) (9 samples, 1.10%)</title><rect x="0.3663%" y="148" width="1.0989%" height="15" fill="rgb(207,160,47)"/><text x="0.6163%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 1.10%)</title><rect x="0.3663%" y="164" width="1.0989%" height="15" fill="rgb(228,23,34)"/><text x="0.6163%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 1.10%)</title><rect x="0.3663%" y="180" width="1.0989%" height="15" fill="rgb(218,30,26)"/><text x="0.6163%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:16) (15 samples, 1.83%)</title><rect x="1.4652%" y="52" width="1.8315%" height="15" fill="rgb(220,122,19)"/><text x="1.7152%" y="62.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (15 samples, 1.83%)</title><rect x="1.4652%" y="68" width="1.8315%" height="15" fill="rgb(250,228,42)"/><text x="1.7152%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (15 samples, 1.83%)</title><rect x="1.4652%" y="84" width="1.8315%" height="15" fill="rgb(240,193,28)"/><text x="1.7152%" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (15 samples, 1.83%)</title><rect x="1.4652%" y="100" width="1.8315%" height="15" fill="rgb(216,20,37)"/><text x="1.7152%" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (15 samples, 1.83%)</title><rect x="1.4652%" y="116" width="1.8315%" height="15" fill="rgb(206,188,39)"/><text x="1.7152%" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 1.83%)</title><rect x="1.4652%" y="132" width="1.8315%" height="15" fill="rgb(217,207,13)"/><text x="1.7152%" y="142.50">_..</text></g><g><title>&lt;module&gt; (pandas/__init__.py:54) (11 samples, 1.34%)</title><rect x="1.9536%" y="148" width="1.3431%" height="15" fill="rgb(231,73,38)"/><text x="2.2036%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 1.34%)</title><rect x="1.9536%" y="164" width="1.3431%" height="15" fill="rgb(225,20,46)"/><text x="2.2036%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 1.34%)</title><rect x="1.9536%" y="180" width="1.3431%" height="15" fill="rgb(210,31,41)"/><text x="2.2036%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 1.34%)</title><rect x="1.9536%" y="196" width="1.3431%" height="15" fill="rgb(221,200,47)"/><text x="2.2036%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 1.34%)</title><rect x="1.9536%" y="212" width="1.3431%" height="15" fill="rgb(226,26,5)"/><text x="2.2036%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 1.34%)</title><rect x="1.9536%" y="228" width="1.3431%" height="15" fill="rgb(249,33,26)"/><text x="2.2036%" y="238.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (9 samples, 1.10%)</title><rect x="5.1282%" y="212" width="1.0989%" height="15" fill="rgb(235,183,28)"/><text x="5.3782%" y="222.50"></text></g><g><title>test_ST_HausdorffDistance (profile_geo.py:175) (22 samples, 2.69%)</title><rect x="3.6630%" y="68" width="2.6862%" height="15" fill="rgb(221,5,38)"/><text x="3.9130%" y="78.50">te..</text></g><g><title>array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (15 samples, 1.83%)</title><rect x="4.5177%" y="84" width="1.8315%" height="15" fill="rgb(247,18,42)"/><text x="4.7677%" y="94.50">a..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (12 samples, 1.47%)</title><rect x="4.8840%" y="100" width="1.4652%" height="15" fill="rgb(241,131,45)"/><text x="5.1340%" y="110.50"></text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (12 samples, 1.47%)</title><rect x="4.8840%" y="116" width="1.4652%" height="15" fill="rgb(249,31,29)"/><text x="5.1340%" y="126.50"></text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (12 samples, 1.47%)</title><rect x="4.8840%" y="132" width="1.4652%" height="15" fill="rgb(225,111,53)"/><text x="5.1340%" y="142.50"></text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (12 samples, 1.47%)</title><rect x="4.8840%" y="148" width="1.4652%" height="15" fill="rgb(238,160,17)"/><text x="5.1340%" y="158.50"></text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (12 samples, 1.47%)</title><rect x="4.8840%" y="164" width="1.4652%" height="15" fill="rgb(214,148,48)"/><text x="5.1340%" y="174.50"></text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (12 samples, 1.47%)</title><rect x="4.8840%" y="180" width="1.4652%" height="15" fill="rgb(232,36,49)"/><text x="5.1340%" y="190.50"></text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (11 samples, 1.34%)</title><rect x="5.0061%" y="196" width="1.3431%" height="15" fill="rgb(209,103,24)"/><text x="5.2561%" y="206.50"></text></g><g><title>test_ST_HausdorffDistance (profile_geo.py:176) (16 samples, 1.95%)</title><rect x="6.3492%" y="68" width="1.9536%" height="15" fill="rgb(229,88,8)"/><text x="6.5992%" y="78.50">t..</text></g><g><title>array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (9 samples, 1.10%)</title><rect x="7.2039%" y="84" width="1.0989%" height="15" fill="rgb(213,181,19)"/><text x="7.4539%" y="94.50"></text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (9 samples, 1.10%)</title><rect x="7.2039%" y="100" width="1.0989%" height="15" fill="rgb(254,191,54)"/><text x="7.4539%" y="110.50"></text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (9 samples, 1.10%)</title><rect x="7.2039%" y="116" width="1.0989%" height="15" fill="rgb(241,83,37)"/><text x="7.4539%" y="126.50"></text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (9 samples, 1.10%)</title><rect x="7.2039%" y="132" width="1.0989%" height="15" fill="rgb(233,36,39)"/><text x="7.4539%" y="142.50"></text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (9 samples, 1.10%)</title><rect x="7.2039%" y="148" width="1.0989%" height="15" fill="rgb(226,3,54)"/><text x="7.4539%" y="158.50"></text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (9 samples, 1.10%)</title><rect x="7.2039%" y="164" width="1.0989%" height="15" fill="rgb(245,192,40)"/><text x="7.4539%" y="174.50"></text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (9 samples, 1.10%)</title><rect x="7.2039%" y="180" width="1.0989%" height="15" fill="rgb(238,167,29)"/><text x="7.4539%" y="190.50"></text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (9 samples, 1.10%)</title><rect x="7.2039%" y="196" width="1.0989%" height="15" fill="rgb(232,182,51)"/><text x="7.4539%" y="206.50"></text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (9 samples, 1.10%)</title><rect x="10.6227%" y="212" width="1.0989%" height="15" fill="rgb(231,60,39)"/><text x="10.8727%" y="222.50"></text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (10 samples, 1.22%)</title><rect x="11.7216%" y="212" width="1.2210%" height="15" fill="rgb(208,69,12)"/><text x="11.9716%" y="222.50"></text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (10 samples, 1.22%)</title><rect x="11.7216%" y="228" width="1.2210%" height="15" fill="rgb(235,93,37)"/><text x="11.9716%" y="238.50"></text></g><g><title>OGRPoint::importFromWkt (libgdal.so.26.0.4) (21 samples, 2.56%)</title><rect x="10.5006%" y="196" width="2.5641%" height="15" fill="rgb(213,116,39)"/><text x="10.7506%" y="206.50">OG..</text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (10 samples, 1.22%)</title><rect x="13.3089%" y="212" width="1.2210%" height="15" fill="rgb(222,207,29)"/><text x="13.5589%" y="222.50"></text></g><g><title>CPLReplacePointByLocalePoint (libgdal.so.26.0.4) (17 samples, 2.08%)</title><rect x="20.8791%" y="260" width="2.0757%" height="15" fill="rgb(206,96,30)"/><text x="21.1291%" y="270.50">C..</text></g><g><title>localeconv (libc-2.27.so) (16 samples, 1.95%)</title><rect x="21.0012%" y="276" width="1.9536%" height="15" fill="rgb(218,138,4)"/><text x="21.2512%" y="286.50">l..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (58 samples, 7.08%)</title><rect x="16.1172%" y="244" width="7.0818%" height="15" fill="rgb(250,191,14)"/><text x="16.3672%" y="254.50">CPLStrtodD..</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (87 samples, 10.62%)</title><rect x="13.0647%" y="196" width="10.6227%" height="15" fill="rgb(239,60,40)"/><text x="13.3147%" y="206.50">OGRPolygon::impo..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (75 samples, 9.16%)</title><rect x="14.5299%" y="212" width="9.1575%" height="15" fill="rgb(206,27,48)"/><text x="14.7799%" y="222.50">OGRPolygon::i..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (64 samples, 7.81%)</title><rect x="15.8730%" y="228" width="7.8144%" height="15" fill="rgb(225,35,8)"/><text x="16.1230%" y="238.50">OGRWktReadP..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (116 samples, 14.16%)</title><rect x="9.6459%" y="164" width="14.1636%" height="15" fill="rgb(250,213,24)"/><text x="9.8959%" y="174.50">OGRGeometryFactory::cr..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (116 samples, 14.16%)</title><rect x="9.6459%" y="180" width="14.1636%" height="15" fill="rgb(247,123,22)"/><text x="9.8959%" y="190.50">OGRGeometryFactory::cr..</text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (15 samples, 1.83%)</title><rect x="23.8095%" y="164" width="1.8315%" height="15" fill="rgb(231,138,38)"/><text x="24.0595%" y="174.50">a..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (13 samples, 1.59%)</title><rect x="24.0537%" y="180" width="1.5873%" height="15" fill="rgb(231,145,46)"/><text x="24.3037%" y="190.50"></text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::to_string&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:917) (11 samples, 1.34%)</title><rect x="24.2979%" y="196" width="1.3431%" height="15" fill="rgb(251,118,11)"/><text x="24.5479%" y="206.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*, void&gt; (basic_string.h:607) (10 samples, 1.22%)</title><rect x="24.4200%" y="212" width="1.2210%" height="15" fill="rgb(217,147,25)"/><text x="24.6700%" y="222.50"></text></g><g><title>arctern::gis::gdal::ST_HausdorffDistance (gis_functions.cpp:661) (137 samples, 16.73%)</title><rect x="9.0354%" y="132" width="16.7277%" height="15" fill="rgb(247,81,37)"/><text x="9.2854%" y="142.50">arctern::gis::gdal::ST_Hau..</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkt (gis_functions.cpp:216) (132 samples, 16.12%)</title><rect x="9.6459%" y="148" width="16.1172%" height="15" fill="rgb(209,12,38)"/><text x="9.8959%" y="158.50">arctern::gis::gdal::Wrapp..</text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (10 samples, 1.22%)</title><rect x="26.8620%" y="212" width="1.2210%" height="15" fill="rgb(227,1,9)"/><text x="27.1120%" y="222.50"></text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (17 samples, 2.08%)</title><rect x="28.0830%" y="212" width="2.0757%" height="15" fill="rgb(248,47,43)"/><text x="28.3330%" y="222.50">O..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (15 samples, 1.83%)</title><rect x="28.3272%" y="228" width="1.8315%" height="15" fill="rgb(221,10,30)"/><text x="28.5772%" y="238.50">C..</text></g><g><title>OGRPoint::importFromWkt (libgdal.so.26.0.4) (32 samples, 3.91%)</title><rect x="26.6178%" y="196" width="3.9072%" height="15" fill="rgb(210,229,1)"/><text x="26.8678%" y="206.50">OGRP..</text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (12 samples, 1.47%)</title><rect x="30.7692%" y="212" width="1.4652%" height="15" fill="rgb(222,148,37)"/><text x="31.0192%" y="222.50"></text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (35 samples, 4.27%)</title><rect x="33.5775%" y="244" width="4.2735%" height="15" fill="rgb(234,67,33)"/><text x="33.8275%" y="254.50">CPLSt..</text></g><g><title>CPLReplacePointByLocalePoint (libgdal.so.26.0.4) (12 samples, 1.47%)</title><rect x="36.3858%" y="260" width="1.4652%" height="15" fill="rgb(247,98,35)"/><text x="36.6358%" y="270.50"></text></g><g><title>localeconv (libc-2.27.so) (10 samples, 1.22%)</title><rect x="36.6300%" y="276" width="1.2210%" height="15" fill="rgb(247,138,52)"/><text x="36.8800%" y="286.50"></text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (44 samples, 5.37%)</title><rect x="33.0891%" y="228" width="5.3724%" height="15" fill="rgb(213,79,30)"/><text x="33.3391%" y="238.50">OGRWktR..</text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (52 samples, 6.35%)</title><rect x="32.2344%" y="212" width="6.3492%" height="15" fill="rgb(246,177,23)"/><text x="32.4844%" y="222.50">OGRPolyg..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (102 samples, 12.45%)</title><rect x="26.2515%" y="164" width="12.4542%" height="15" fill="rgb(230,62,27)"/><text x="26.5015%" y="174.50">OGRGeometryFactory:..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (102 samples, 12.45%)</title><rect x="26.2515%" y="180" width="12.4542%" height="15" fill="rgb(216,154,8)"/><text x="26.5015%" y="190.50">OGRGeometryFactory:..</text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (65 samples, 7.94%)</title><rect x="30.7692%" y="196" width="7.9365%" height="15" fill="rgb(244,35,45)"/><text x="31.0192%" y="206.50">OGRPolygon:..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (9 samples, 1.10%)</title><rect x="39.6825%" y="180" width="1.0989%" height="15" fill="rgb(251,115,12)"/><text x="39.9325%" y="190.50"></text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (18 samples, 2.20%)</title><rect x="38.7057%" y="164" width="2.1978%" height="15" fill="rgb(240,54,50)"/><text x="38.9557%" y="174.50">a..</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkt (gis_functions.cpp:216) (121 samples, 14.77%)</title><rect x="26.2515%" y="148" width="14.7741%" height="15" fill="rgb(233,84,52)"/><text x="26.5015%" y="158.50">arctern::gis::gdal::Wra..</text></g><g><title>arctern::gis::gdal::ST_HausdorffDistance (gis_functions.cpp:662) (126 samples, 15.38%)</title><rect x="25.7631%" y="132" width="15.3846%" height="15" fill="rgb(207,117,47)"/><text x="26.0131%" y="142.50">arctern::gis::gdal::ST_H..</text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (10 samples, 1.22%)</title><rect x="45.7875%" y="292" width="1.2210%" height="15" fill="rgb(249,43,39)"/><text x="46.0375%" y="302.50"></text></g><g><title>geos::io::WKBReader::readCoordinateSequence (libgeos-3.8.0.so) (29 samples, 3.54%)</title><rect x="43.7118%" y="260" width="3.5409%" height="15" fill="rgb(209,38,44)"/><text x="43.9618%" y="270.50">geos..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.0.so) (22 samples, 2.69%)</title><rect x="44.5665%" y="276" width="2.6862%" height="15" fill="rgb(236,212,23)"/><text x="44.8165%" y="286.50">ge..</text></g><g><title>geos::io::WKBReader::readLinearRing (libgeos-3.8.0.so) (32 samples, 3.91%)</title><rect x="43.4676%" y="244" width="3.9072%" height="15" fill="rgb(242,79,21)"/><text x="43.7176%" y="254.50">geos..</text></g><g><title>geos::io::WKBReader::readPolygon (libgeos-3.8.0.so) (37 samples, 4.52%)</title><rect x="43.2234%" y="228" width="4.5177%" height="15" fill="rgb(211,96,35)"/><text x="43.4734%" y="238.50">geos:..</text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.0.so) (54 samples, 6.59%)</title><rect x="42.4908%" y="196" width="6.5934%" height="15" fill="rgb(253,215,40)"/><text x="42.7408%" y="206.50">geos::io:..</text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.0.so) (54 samples, 6.59%)</title><rect x="42.4908%" y="212" width="6.5934%" height="15" fill="rgb(211,81,21)"/><text x="42.7408%" y="222.50">geos::io:..</text></g><g><title>__dynamic_cast (dyncast.cc:73) (9 samples, 1.10%)</title><rect x="52.6252%" y="244" width="1.0989%" height="15" fill="rgb(208,190,38)"/><text x="52.8752%" y="254.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:159) (20 samples, 2.44%)</title><rect x="51.4042%" y="212" width="2.4420%" height="15" fill="rgb(235,213,38)"/><text x="51.6542%" y="222.50">st..</text></g><g><title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (locale_classes.tcc:110) (17 samples, 2.08%)</title><rect x="51.7705%" y="228" width="2.0757%" height="15" fill="rgb(237,122,38)"/><text x="52.0205%" y="238.50">s..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (50 samples, 6.11%)</title><rect x="50.9158%" y="196" width="6.1050%" height="15" fill="rgb(244,218,35)"/><text x="51.1658%" y="206.50">std::bas..</text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.1) (133 samples, 16.24%)</title><rect x="41.5140%" y="180" width="16.2393%" height="15" fill="rgb(240,68,47)"/><text x="41.7640%" y="190.50">GEOSGeomFromWKB_buf_r (li..</text></g><g><title>arctern::gis::gdal::ST_HausdorffDistance (gis_functions.cpp:667) (138 samples, 16.85%)</title><rect x="41.3919%" y="132" width="16.8498%" height="15" fill="rgb(210,16,53)"/><text x="41.6419%" y="142.50">arctern::gis::gdal::ST_Hau..</text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (138 samples, 16.85%)</title><rect x="41.3919%" y="148" width="16.8498%" height="15" fill="rgb(235,124,12)"/><text x="41.6419%" y="158.50">OGRGeometry::exportToGEOS ..</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (138 samples, 16.85%)</title><rect x="41.3919%" y="164" width="16.8498%" height="15" fill="rgb(224,169,11)"/><text x="41.6419%" y="174.50">convertToGEOSGeom (libgdal..</text></g><g><title>geos::io::WKBReader::readLinearRing (libgeos-3.8.0.so) (33 samples, 4.03%)</title><rect x="61.0501%" y="244" width="4.0293%" height="15" fill="rgb(250,166,2)"/><text x="61.3001%" y="254.50">geos..</text></g><g><title>geos::io::WKBReader::readCoordinateSequence (libgeos-3.8.0.so) (30 samples, 3.66%)</title><rect x="61.4164%" y="260" width="3.6630%" height="15" fill="rgb(242,216,29)"/><text x="61.6664%" y="270.50">geos..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.0.so) (19 samples, 2.32%)</title><rect x="62.7595%" y="276" width="2.3199%" height="15" fill="rgb(230,116,27)"/><text x="63.0095%" y="286.50">g..</text></g><g><title>geos::io::WKBReader::readPolygon (libgeos-3.8.0.so) (40 samples, 4.88%)</title><rect x="60.4396%" y="228" width="4.8840%" height="15" fill="rgb(228,99,48)"/><text x="60.6896%" y="238.50">geos::..</text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.0.so) (54 samples, 6.59%)</title><rect x="59.5849%" y="196" width="6.5934%" height="15" fill="rgb(253,11,6)"/><text x="59.8349%" y="206.50">geos::io:..</text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.0.so) (54 samples, 6.59%)</title><rect x="59.5849%" y="212" width="6.5934%" height="15" fill="rgb(247,143,39)"/><text x="59.8349%" y="222.50">geos::io:..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (basic_string.h:216) (9 samples, 1.10%)</title><rect x="66.6667%" y="212" width="1.0989%" height="15" fill="rgb(236,97,10)"/><text x="66.9167%" y="222.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (basic_string.h:183) (9 samples, 1.10%)</title><rect x="66.6667%" y="228" width="1.0989%" height="15" fill="rgb(233,208,19)"/><text x="66.9167%" y="238.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (basic_string.tcc:468) (10 samples, 1.22%)</title><rect x="66.6667%" y="196" width="1.2210%" height="15" fill="rgb(216,164,2)"/><text x="66.9167%" y="206.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:159) (9 samples, 1.10%)</title><rect x="69.1087%" y="212" width="1.0989%" height="15" fill="rgb(220,129,5)"/><text x="69.3587%" y="222.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (31 samples, 3.79%)</title><rect x="68.9866%" y="196" width="3.7851%" height="15" fill="rgb(242,17,10)"/><text x="69.2366%" y="206.50">std:..</text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.1) (125 samples, 15.26%)</title><rect x="58.9744%" y="180" width="15.2625%" height="15" fill="rgb(242,107,0)"/><text x="59.2244%" y="190.50">GEOSGeomFromWKB_buf_r (..</text></g><g><title>arctern::gis::gdal::ST_HausdorffDistance (gis_functions.cpp:668) (139 samples, 16.97%)</title><rect x="58.2418%" y="132" width="16.9719%" height="15" fill="rgb(251,28,31)"/><text x="58.4918%" y="142.50">arctern::gis::gdal::ST_Hau..</text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (139 samples, 16.97%)</title><rect x="58.2418%" y="148" width="16.9719%" height="15" fill="rgb(233,223,10)"/><text x="58.4918%" y="158.50">OGRGeometry::exportToGEOS ..</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (135 samples, 16.48%)</title><rect x="58.7302%" y="164" width="16.4835%" height="15" fill="rgb(215,21,27)"/><text x="58.9802%" y="174.50">convertToGEOSGeom (libgda..</text></g><g><title>geos::algorithm::distance::DiscreteHausdorffDistance::MaxPointDistanceFilter::filter_ro (libgeos-3.8.0.so) (15 samples, 1.83%)</title><rect x="76.1905%" y="196" width="1.8315%" height="15" fill="rgb(232,23,21)"/><text x="76.4405%" y="206.50">g..</text></g><g><title>geos::algorithm::distance::DistanceToPoint::computeDistance (libgeos-3.8.0.so) (14 samples, 1.71%)</title><rect x="76.3126%" y="212" width="1.7094%" height="15" fill="rgb(244,5,23)"/><text x="76.5626%" y="222.50"></text></g><g><title>__dynamic_cast (dyncast.cc:73) (9 samples, 1.10%)</title><rect x="76.9231%" y="228" width="1.0989%" height="15" fill="rgb(226,81,46)"/><text x="77.1731%" y="238.50"></text></g><g><title>__cxxabiv1::__si_class_type_info::__do_dyncast (si_class_type_info.cc:63) (10 samples, 1.22%)</title><rect x="81.1966%" y="276" width="1.2210%" height="15" fill="rgb(247,70,30)"/><text x="81.4466%" y="286.50"></text></g><g><title>__dynamic_cast (dyncast.cc:73) (20 samples, 2.44%)</title><rect x="80.2198%" y="260" width="2.4420%" height="15" fill="rgb(212,68,19)"/><text x="80.4698%" y="270.50">__..</text></g><g><title>geos::geom::LineSegment::closestPoint (libgeos-3.8.0.so) (68 samples, 8.30%)</title><rect x="85.3480%" y="276" width="8.3028%" height="15" fill="rgb(240,187,13)"/><text x="85.5980%" y="286.50">geos::geom::..</text></g><g><title>geos::geom::LineSegment::projectionFactor (libgeos-3.8.0.so) (24 samples, 2.93%)</title><rect x="90.7204%" y="292" width="2.9304%" height="15" fill="rgb(223,113,26)"/><text x="90.9704%" y="302.50">ge..</text></g><g><title>geos::geom::LineSegment::project (libgeos-3.8.0.so) (9 samples, 1.10%)</title><rect x="93.6508%" y="276" width="1.0989%" height="15" fill="rgb(206,192,2)"/><text x="93.9008%" y="286.50"></text></g><g><title>arctern::gis::gdal::ST_HausdorffDistance (gis_functions.cpp:670) (161 samples, 19.66%)</title><rect x="75.2137%" y="132" width="19.6581%" height="15" fill="rgb(241,108,4)"/><text x="75.4637%" y="142.50">arctern::gis::gdal::ST_Hausdorf..</text></g><g><title>GEOSHausdorffDistance_r (libgeos_c.so.1.13.1) (158 samples, 19.29%)</title><rect x="75.5800%" y="148" width="19.2918%" height="15" fill="rgb(247,173,49)"/><text x="75.8300%" y="158.50">GEOSHausdorffDistance_r (libge..</text></g><g><title>geos::algorithm::distance::DiscreteHausdorffDistance::distance (libgeos-3.8.0.so) (157 samples, 19.17%)</title><rect x="75.7021%" y="164" width="19.1697%" height="15" fill="rgb(224,114,35)"/><text x="75.9521%" y="174.50">geos::algorithm::distance::Dis..</text></g><g><title>geos::algorithm::distance::DiscreteHausdorffDistance::computeOrientedDistance (libgeos-3.8.0.so) (154 samples, 18.80%)</title><rect x="76.0684%" y="180" width="18.8034%" height="15" fill="rgb(245,159,27)"/><text x="76.3184%" y="190.50">geos::algorithm::distance::Di..</text></g><g><title>geos::geom::Polygon::apply_ro (libgeos-3.8.0.so) (134 samples, 16.36%)</title><rect x="78.5104%" y="196" width="16.3614%" height="15" fill="rgb(245,172,44)"/><text x="78.7604%" y="206.50">geos::geom::Polygon::appl..</text></g><g><title>geos::geom::FixedSizeCoordinateSequence&lt;(unsigned long)5&gt;::apply_ro (libgeos-3.8.0.so) (133 samples, 16.24%)</title><rect x="78.6325%" y="212" width="16.2393%" height="15" fill="rgb(236,23,11)"/><text x="78.8825%" y="222.50">geos::geom::FixedSizeCoor..</text></g><g><title>geos::algorithm::distance::DiscreteHausdorffDistance::MaxPointDistanceFilter::filter_ro (libgeos-3.8.0.so) (133 samples, 16.24%)</title><rect x="78.6325%" y="228" width="16.2393%" height="15" fill="rgb(205,117,38)"/><text x="78.8825%" y="238.50">geos::algorithm::distance..</text></g><g><title>geos::algorithm::distance::DistanceToPoint::computeDistance (libgeos-3.8.0.so) (128 samples, 15.63%)</title><rect x="79.2430%" y="244" width="15.6288%" height="15" fill="rgb(237,72,25)"/><text x="79.4930%" y="254.50">geos::algorithm::distanc..</text></g><g><title>geos::algorithm::distance::DistanceToPoint::computeDistance (libgeos-3.8.0.so) (92 samples, 11.23%)</title><rect x="83.6386%" y="260" width="11.2332%" height="15" fill="rgb(244,70,9)"/><text x="83.8886%" y="270.50">geos::algorithm::..</text></g><g><title>arrow::NumericBuilder&lt;arrow::DoubleType&gt;::Append (builder_primitive.h:78) (14 samples, 1.71%)</title><rect x="96.4591%" y="148" width="1.7094%" height="15" fill="rgb(217,125,39)"/><text x="96.7091%" y="158.50"></text></g><g><title>arctern::gis::gdal::ST_HausdorffDistance (gis_functions.cpp:676) (25 samples, 3.05%)</title><rect x="95.4823%" y="132" width="3.0525%" height="15" fill="rgb(235,36,10)"/><text x="95.7323%" y="142.50">arc..</text></g><g><title>OGRCurvePolygon::~OGRCurvePolygon (libgdal.so.26.0.4) (9 samples, 1.10%)</title><rect x="98.7790%" y="164" width="1.0989%" height="15" fill="rgb(251,123,47)"/><text x="99.0290%" y="174.50"></text></g><g><title>all (819 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (789 samples, 96.34%)</title><rect x="3.6630%" y="52" width="96.3370%" height="15" fill="rgb(238,131,9)"/><text x="3.9130%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_HausdorffDistance (profile_geo.py:177) (751 samples, 91.70%)</title><rect x="8.3028%" y="68" width="91.6972%" height="15" fill="rgb(211,50,8)"/><text x="8.5528%" y="78.50">test_ST_HausdorffDistance (profile_geo.py:177)</text></g><g><title>ST_HausdorffDistance (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6183) (751 samples, 91.70%)</title><rect x="8.3028%" y="84" width="91.6972%" height="15" fill="rgb(245,182,24)"/><text x="8.5528%" y="94.50">ST_HausdorffDistance (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6183)</text></g><g><title>ST_HausdorffDistance (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6204) (751 samples, 91.70%)</title><rect x="8.3028%" y="100" width="91.6972%" height="15" fill="rgb(242,14,37)"/><text x="8.5528%" y="110.50">ST_HausdorffDistance (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6204)</text></g><g><title>arctern::gis::ST_HausdorffDistance (gis_functions.cpp:224) (751 samples, 91.70%)</title><rect x="8.3028%" y="116" width="91.6972%" height="15" fill="rgb(246,228,12)"/><text x="8.5528%" y="126.50">arctern::gis::ST_HausdorffDistance (gis_functions.cpp:224)</text></g><g><title>arctern::gis::gdal::ST_HausdorffDistance (gis_functions.cpp:679) (11 samples, 1.34%)</title><rect x="98.6569%" y="132" width="1.3431%" height="15" fill="rgb(213,55,15)"/><text x="98.9069%" y="142.50"></text></g><g><title>OGRPolygon::~OGRPolygon (libgdal.so.26.0.4) (10 samples, 1.22%)</title><rect x="98.7790%" y="148" width="1.2210%" height="15" fill="rgb(209,9,3)"/><text x="99.0290%" y="158.50"></text></g></svg></svg>