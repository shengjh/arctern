<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="613.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="613.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (pyarrow/compat.py:24) (6 samples, 1.24%)</title><rect x="0.0000%" y="244" width="1.2397%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.24%)</title><rect x="0.0000%" y="260" width="1.2397%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.24%)</title><rect x="0.0000%" y="276" width="1.2397%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.24%)</title><rect x="0.0000%" y="292" width="1.2397%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.24%)</title><rect x="0.0000%" y="308" width="1.2397%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.24%)</title><rect x="0.0000%" y="324" width="1.2397%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="334.50"></text></g><g><title>&lt;module&gt; (pyarrow/__init__.py:47) (8 samples, 1.65%)</title><rect x="0.0000%" y="148" width="1.6529%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.65%)</title><rect x="0.0000%" y="164" width="1.6529%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.65%)</title><rect x="0.0000%" y="180" width="1.6529%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.65%)</title><rect x="0.0000%" y="196" width="1.6529%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.65%)</title><rect x="0.0000%" y="212" width="1.6529%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.65%)</title><rect x="0.0000%" y="228" width="1.6529%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="238.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:15) (13 samples, 2.69%)</title><rect x="0.0000%" y="52" width="2.6860%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="62.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (13 samples, 2.69%)</title><rect x="0.0000%" y="68" width="2.6860%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="78.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (13 samples, 2.69%)</title><rect x="0.0000%" y="84" width="2.6860%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="94.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (13 samples, 2.69%)</title><rect x="0.0000%" y="100" width="2.6860%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="110.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (13 samples, 2.69%)</title><rect x="0.0000%" y="116" width="2.6860%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="126.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 2.69%)</title><rect x="0.0000%" y="132" width="2.6860%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="142.50">_c..</text></g><g><title>&lt;module&gt; (pyarrow/__init__.py:49) (5 samples, 1.03%)</title><rect x="1.6529%" y="148" width="1.0331%" height="15" fill="rgb(221,200,47)"/><text x="1.9029%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.03%)</title><rect x="1.6529%" y="164" width="1.0331%" height="15" fill="rgb(226,26,5)"/><text x="1.9029%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.03%)</title><rect x="1.6529%" y="180" width="1.0331%" height="15" fill="rgb(249,33,26)"/><text x="1.9029%" y="190.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py:104) (5 samples, 1.03%)</title><rect x="2.8926%" y="532" width="1.0331%" height="15" fill="rgb(235,183,28)"/><text x="3.1426%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.03%)</title><rect x="2.8926%" y="548" width="1.0331%" height="15" fill="rgb(221,5,38)"/><text x="3.1426%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.03%)</title><rect x="2.8926%" y="564" width="1.0331%" height="15" fill="rgb(247,18,42)"/><text x="3.1426%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.03%)</title><rect x="2.8926%" y="580" width="1.0331%" height="15" fill="rgb(241,131,45)"/><text x="3.1426%" y="590.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:60) (6 samples, 1.24%)</title><rect x="2.8926%" y="436" width="1.2397%" height="15" fill="rgb(249,31,29)"/><text x="3.1426%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.24%)</title><rect x="2.8926%" y="452" width="1.2397%" height="15" fill="rgb(225,111,53)"/><text x="3.1426%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.24%)</title><rect x="2.8926%" y="468" width="1.2397%" height="15" fill="rgb(238,160,17)"/><text x="3.1426%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.24%)</title><rect x="2.8926%" y="484" width="1.2397%" height="15" fill="rgb(214,148,48)"/><text x="3.1426%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.24%)</title><rect x="2.8926%" y="500" width="1.2397%" height="15" fill="rgb(232,36,49)"/><text x="3.1426%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.24%)</title><rect x="2.8926%" y="516" width="1.2397%" height="15" fill="rgb(209,103,24)"/><text x="3.1426%" y="526.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:29) (7 samples, 1.45%)</title><rect x="2.8926%" y="244" width="1.4463%" height="15" fill="rgb(229,88,8)"/><text x="3.1426%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.45%)</title><rect x="2.8926%" y="260" width="1.4463%" height="15" fill="rgb(213,181,19)"/><text x="3.1426%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.45%)</title><rect x="2.8926%" y="276" width="1.4463%" height="15" fill="rgb(254,191,54)"/><text x="3.1426%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.45%)</title><rect x="2.8926%" y="292" width="1.4463%" height="15" fill="rgb(241,83,37)"/><text x="3.1426%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.45%)</title><rect x="2.8926%" y="308" width="1.4463%" height="15" fill="rgb(233,36,39)"/><text x="3.1426%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.45%)</title><rect x="2.8926%" y="324" width="1.4463%" height="15" fill="rgb(226,3,54)"/><text x="3.1426%" y="334.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (7 samples, 1.45%)</title><rect x="2.8926%" y="340" width="1.4463%" height="15" fill="rgb(245,192,40)"/><text x="3.1426%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.45%)</title><rect x="2.8926%" y="356" width="1.4463%" height="15" fill="rgb(238,167,29)"/><text x="3.1426%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.45%)</title><rect x="2.8926%" y="372" width="1.4463%" height="15" fill="rgb(232,182,51)"/><text x="3.1426%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.45%)</title><rect x="2.8926%" y="388" width="1.4463%" height="15" fill="rgb(231,60,39)"/><text x="3.1426%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.45%)</title><rect x="2.8926%" y="404" width="1.4463%" height="15" fill="rgb(208,69,12)"/><text x="3.1426%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.45%)</title><rect x="2.8926%" y="420" width="1.4463%" height="15" fill="rgb(235,93,37)"/><text x="3.1426%" y="430.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:16) (9 samples, 1.86%)</title><rect x="2.6860%" y="52" width="1.8595%" height="15" fill="rgb(213,116,39)"/><text x="2.9360%" y="62.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 1.86%)</title><rect x="2.6860%" y="68" width="1.8595%" height="15" fill="rgb(222,207,29)"/><text x="2.9360%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 1.86%)</title><rect x="2.6860%" y="84" width="1.8595%" height="15" fill="rgb(206,96,30)"/><text x="2.9360%" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 1.86%)</title><rect x="2.6860%" y="100" width="1.8595%" height="15" fill="rgb(218,138,4)"/><text x="2.9360%" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 1.86%)</title><rect x="2.6860%" y="116" width="1.8595%" height="15" fill="rgb(250,191,14)"/><text x="2.9360%" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 1.86%)</title><rect x="2.6860%" y="132" width="1.8595%" height="15" fill="rgb(239,60,40)"/><text x="2.9360%" y="142.50">_..</text></g><g><title>&lt;module&gt; (pandas/__init__.py:54) (8 samples, 1.65%)</title><rect x="2.8926%" y="148" width="1.6529%" height="15" fill="rgb(206,27,48)"/><text x="3.1426%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.65%)</title><rect x="2.8926%" y="164" width="1.6529%" height="15" fill="rgb(225,35,8)"/><text x="3.1426%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.65%)</title><rect x="2.8926%" y="180" width="1.6529%" height="15" fill="rgb(250,213,24)"/><text x="3.1426%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.65%)</title><rect x="2.8926%" y="196" width="1.6529%" height="15" fill="rgb(247,123,22)"/><text x="3.1426%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.65%)</title><rect x="2.8926%" y="212" width="1.6529%" height="15" fill="rgb(231,138,38)"/><text x="3.1426%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.65%)</title><rect x="2.8926%" y="228" width="1.6529%" height="15" fill="rgb(231,145,46)"/><text x="3.1426%" y="238.50"></text></g><g><title>test_ST_ConvexHull (profile_geo.py:182) (8 samples, 1.65%)</title><rect x="5.5785%" y="68" width="1.6529%" height="15" fill="rgb(251,118,11)"/><text x="5.8285%" y="78.50"></text></g><g><title>array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.03%)</title><rect x="6.1983%" y="84" width="1.0331%" height="15" fill="rgb(217,147,25)"/><text x="6.4483%" y="94.50"></text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.03%)</title><rect x="6.1983%" y="100" width="1.0331%" height="15" fill="rgb(247,81,37)"/><text x="6.4483%" y="110.50"></text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (5 samples, 1.03%)</title><rect x="6.1983%" y="116" width="1.0331%" height="15" fill="rgb(209,12,38)"/><text x="6.4483%" y="126.50"></text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (5 samples, 1.03%)</title><rect x="6.1983%" y="132" width="1.0331%" height="15" fill="rgb(227,1,9)"/><text x="6.4483%" y="142.50"></text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (5 samples, 1.03%)</title><rect x="6.1983%" y="148" width="1.0331%" height="15" fill="rgb(248,47,43)"/><text x="6.4483%" y="158.50"></text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (5 samples, 1.03%)</title><rect x="6.1983%" y="164" width="1.0331%" height="15" fill="rgb(221,10,30)"/><text x="6.4483%" y="174.50"></text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (5 samples, 1.03%)</title><rect x="6.1983%" y="180" width="1.0331%" height="15" fill="rgb(210,229,1)"/><text x="6.4483%" y="190.50"></text></g><g><title>arrow::py::TypedConverter&lt;arrow::StringType, arrow::py::StringConverter&lt;arrow::StringType, false, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (5 samples, 1.03%)</title><rect x="6.1983%" y="196" width="1.0331%" height="15" fill="rgb(222,148,37)"/><text x="6.4483%" y="206.50"></text></g><g><title>geos::io::WKBWriter::writeCoordinateSequence (libgeos-3.8.0.so) (11 samples, 2.27%)</title><rect x="9.9174%" y="228" width="2.2727%" height="15" fill="rgb(234,67,33)"/><text x="10.1674%" y="238.50">g..</text></g><g><title>geos::io::WKBWriter::writeCoordinate (libgeos-3.8.0.so) (11 samples, 2.27%)</title><rect x="9.9174%" y="244" width="2.2727%" height="15" fill="rgb(247,98,35)"/><text x="10.1674%" y="254.50">g..</text></g><g><title>std::ostream::write (ostream.tcc:196) (9 samples, 1.86%)</title><rect x="10.3306%" y="260" width="1.8595%" height="15" fill="rgb(247,138,52)"/><text x="10.5806%" y="270.50">s..</text></g><g><title>std::ostream::_M_write (ostream:320) (9 samples, 1.86%)</title><rect x="10.3306%" y="276" width="1.8595%" height="15" fill="rgb(213,79,30)"/><text x="10.5806%" y="286.50">s..</text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (streambuf.tcc:99) (6 samples, 1.24%)</title><rect x="10.9504%" y="292" width="1.2397%" height="15" fill="rgb(246,177,23)"/><text x="11.2004%" y="302.50"></text></g><g><title>geos::io::WKBWriter::writePoint (libgeos-3.8.0.so) (15 samples, 3.10%)</title><rect x="9.7107%" y="212" width="3.0992%" height="15" fill="rgb(230,62,27)"/><text x="9.9607%" y="222.50">geo..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:159) (6 samples, 1.24%)</title><rect x="13.8430%" y="228" width="1.2397%" height="15" fill="rgb(216,154,8)"/><text x="14.0930%" y="238.50"></text></g><g><title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (locale_classes.tcc:110) (5 samples, 1.03%)</title><rect x="14.0496%" y="244" width="1.0331%" height="15" fill="rgb(244,35,45)"/><text x="14.2996%" y="254.50"></text></g><g><title>__dynamic_cast (dyncast.cc:73) (5 samples, 1.03%)</title><rect x="14.0496%" y="260" width="1.0331%" height="15" fill="rgb(251,115,12)"/><text x="14.2996%" y="270.50"></text></g><g><title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (vmi_class_type_info.cc:91) (5 samples, 1.03%)</title><rect x="14.0496%" y="276" width="1.0331%" height="15" fill="rgb(240,54,50)"/><text x="14.2996%" y="286.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:160) (5 samples, 1.03%)</title><rect x="15.0826%" y="228" width="1.0331%" height="15" fill="rgb(233,84,52)"/><text x="15.3326%" y="238.50"></text></g><g><title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (locale_classes.tcc:139) (5 samples, 1.03%)</title><rect x="15.0826%" y="244" width="1.0331%" height="15" fill="rgb(207,117,47)"/><text x="15.3326%" y="254.50"></text></g><g><title>__dynamic_cast (dyncast.cc:73) (5 samples, 1.03%)</title><rect x="15.0826%" y="260" width="1.0331%" height="15" fill="rgb(249,43,39)"/><text x="15.3326%" y="270.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (19 samples, 3.93%)</title><rect x="13.6364%" y="212" width="3.9256%" height="15" fill="rgb(209,38,44)"/><text x="13.8864%" y="222.50">std:..</text></g><g><title>GEOSWKBWriter_write_r (libgeos_c.so.1.13.1) (46 samples, 9.50%)</title><rect x="8.4711%" y="196" width="9.5041%" height="15" fill="rgb(236,212,23)"/><text x="8.7211%" y="206.50">GEOSWKBWriter_..</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (6 samples, 1.24%)</title><rect x="17.9752%" y="196" width="1.2397%" height="15" fill="rgb(242,79,21)"/><text x="18.2252%" y="206.50"></text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (6 samples, 1.24%)</title><rect x="17.9752%" y="212" width="1.2397%" height="15" fill="rgb(211,96,35)"/><text x="18.2252%" y="222.50"></text></g><g><title>OGRGeometryFactory::createFromGEOS (libgdal.so.26.0.4) (54 samples, 11.16%)</title><rect x="8.2645%" y="180" width="11.1570%" height="15" fill="rgb(253,215,40)"/><text x="8.5145%" y="190.50">OGRGeometryFacto..</text></g><g><title>BuildGeometryFromGEOS (libgdal.so.26.0.4) (59 samples, 12.19%)</title><rect x="8.2645%" y="164" width="12.1901%" height="15" fill="rgb(211,81,21)"/><text x="8.5145%" y="174.50">BuildGeometryFromG..</text></g><g><title>GEOSConvexHull_r (libgeos_c.so.1.13.1) (7 samples, 1.45%)</title><rect x="20.4545%" y="164" width="1.4463%" height="15" fill="rgb(208,190,38)"/><text x="20.7045%" y="174.50"></text></g><g><title>geos::geom::Geometry::convexHull (libgeos-3.8.0.so) (7 samples, 1.45%)</title><rect x="20.4545%" y="180" width="1.4463%" height="15" fill="rgb(235,213,38)"/><text x="20.7045%" y="190.50"></text></g><g><title>geos::util::UniqueCoordinateArrayFilter::filter_ro (libgeos_c.so.1.13.1) (5 samples, 1.03%)</title><rect x="20.8678%" y="196" width="1.0331%" height="15" fill="rgb(237,122,38)"/><text x="21.1178%" y="206.50"></text></g><g><title>geos::io::WKBReader::readPoint (libgeos-3.8.0.so) (11 samples, 2.27%)</title><rect x="23.9669%" y="244" width="2.2727%" height="15" fill="rgb(244,218,35)"/><text x="24.2169%" y="254.50">g..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.0.so) (8 samples, 1.65%)</title><rect x="24.5868%" y="260" width="1.6529%" height="15" fill="rgb(240,68,47)"/><text x="24.8368%" y="270.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (6 samples, 1.24%)</title><rect x="25.0000%" y="276" width="1.2397%" height="15" fill="rgb(210,16,53)"/><text x="25.2500%" y="286.50"></text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.0.so) (23 samples, 4.75%)</title><rect x="22.7273%" y="212" width="4.7521%" height="15" fill="rgb(235,124,12)"/><text x="22.9773%" y="222.50">geos::..</text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.0.so) (23 samples, 4.75%)</title><rect x="22.7273%" y="228" width="4.7521%" height="15" fill="rgb(224,169,11)"/><text x="22.9773%" y="238.50">geos::..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:159) (5 samples, 1.03%)</title><rect x="28.9256%" y="228" width="1.0331%" height="15" fill="rgb(250,166,2)"/><text x="29.1756%" y="238.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:164) (5 samples, 1.03%)</title><rect x="30.5785%" y="228" width="1.0331%" height="15" fill="rgb(242,216,29)"/><text x="30.8285%" y="238.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (19 samples, 3.93%)</title><rect x="28.9256%" y="212" width="3.9256%" height="15" fill="rgb(230,116,27)"/><text x="29.1756%" y="222.50">std:..</text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.1) (60 samples, 12.40%)</title><rect x="22.3140%" y="196" width="12.3967%" height="15" fill="rgb(228,99,48)"/><text x="22.5640%" y="206.50">GEOSGeomFromWKB_buf..</text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (63 samples, 13.02%)</title><rect x="21.9008%" y="164" width="13.0165%" height="15" fill="rgb(253,11,6)"/><text x="22.1508%" y="174.50">OGRGeometry::exportT..</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (62 samples, 12.81%)</title><rect x="22.1074%" y="180" width="12.8099%" height="15" fill="rgb(247,143,39)"/><text x="22.3574%" y="190.50">convertToGEOSGeom (..</text></g><g><title>geos::geom::GeometryFactory::getDefaultInstance (libgeos-3.8.0.so) (6 samples, 1.24%)</title><rect x="35.7438%" y="196" width="1.2397%" height="15" fill="rgb(236,97,10)"/><text x="35.9938%" y="206.50"></text></g><g><title>initGEOS_r (libgeos_c.so.1.13.1) (15 samples, 3.10%)</title><rect x="35.1240%" y="164" width="3.0992%" height="15" fill="rgb(233,208,19)"/><text x="35.3740%" y="174.50">ini..</text></g><g><title>GEOS_init_r (libgeos_c.so.1.13.1) (13 samples, 2.69%)</title><rect x="35.5372%" y="180" width="2.6860%" height="15" fill="rgb(216,164,2)"/><text x="35.7872%" y="190.50">GE..</text></g><g><title>operator new (new_op.cc:50) (5 samples, 1.03%)</title><rect x="37.1901%" y="196" width="1.0331%" height="15" fill="rgb(220,129,5)"/><text x="37.4401%" y="206.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (5 samples, 1.03%)</title><rect x="37.1901%" y="212" width="1.0331%" height="15" fill="rgb(242,17,10)"/><text x="37.4401%" y="222.50"></text></g><g><title>OGRGeometry::ConvexHull (libgdal.so.26.0.4) (149 samples, 30.79%)</title><rect x="8.0579%" y="148" width="30.7851%" height="15" fill="rgb(242,107,0)"/><text x="8.3079%" y="158.50">OGRGeometry::ConvexHull (libgdal.so.26.0.4)</text></g><g><title>OGRGeometry::importPreambleFromWkt (libgdal.so.26.0.4) (9 samples, 1.86%)</title><rect x="39.6694%" y="196" width="1.8595%" height="15" fill="rgb(251,28,31)"/><text x="39.9194%" y="206.50">O..</text></g><g><title>0x7f63b959c2a5 (libc-2.27.so) (5 samples, 1.03%)</title><rect x="46.0744%" y="228" width="1.0331%" height="15" fill="rgb(233,223,10)"/><text x="46.3244%" y="238.50"></text></g><g><title>0x7f63b959c2fa (libc-2.27.so) (9 samples, 1.86%)</title><rect x="47.1074%" y="228" width="1.8595%" height="15" fill="rgb(215,21,27)"/><text x="47.3574%" y="238.50">0..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (38 samples, 7.85%)</title><rect x="42.1488%" y="212" width="7.8512%" height="15" fill="rgb(232,23,21)"/><text x="42.3988%" y="222.50">CPLStrtodDe..</text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (43 samples, 8.88%)</title><rect x="41.5289%" y="196" width="8.8843%" height="15" fill="rgb(244,5,23)"/><text x="41.7789%" y="206.50">OGRWktReadPoi..</text></g><g><title>OGRPoint::importFromWkt (libgdal.so.26.0.4) (54 samples, 11.16%)</title><rect x="39.4628%" y="180" width="11.1570%" height="15" fill="rgb(226,81,46)"/><text x="39.7128%" y="190.50">OGRPoint::import..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (59 samples, 12.19%)</title><rect x="38.8430%" y="148" width="12.1901%" height="15" fill="rgb(247,70,30)"/><text x="39.0930%" y="158.50">OGRGeometryFactory..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (59 samples, 12.19%)</title><rect x="38.8430%" y="164" width="12.1901%" height="15" fill="rgb(212,68,19)"/><text x="39.0930%" y="174.50">OGRGeometryFactory..</text></g><g><title>CPLMutexHolder::CPLMutexHolder (libgdal.so.26.0.4) (5 samples, 1.03%)</title><rect x="54.7521%" y="212" width="1.0331%" height="15" fill="rgb(240,187,13)"/><text x="55.0021%" y="222.50"></text></g><g><title>CPLGetConfigOption (libgdal.so.26.0.4) (14 samples, 2.89%)</title><rect x="54.1322%" y="196" width="2.8926%" height="15" fill="rgb(223,113,26)"/><text x="54.3822%" y="206.50">CP..</text></g><g><title>getenv (libc-2.27.so) (5 samples, 1.03%)</title><rect x="55.9917%" y="212" width="1.0331%" height="15" fill="rgb(206,192,2)"/><text x="56.2417%" y="222.50"></text></g><g><title>CPLTestBool (libgdal.so.26.0.4) (6 samples, 1.24%)</title><rect x="57.0248%" y="196" width="1.2397%" height="15" fill="rgb(241,108,4)"/><text x="57.2748%" y="206.50"></text></g><g><title>0x7f63b95b096c (libc-2.27.so) (31 samples, 6.40%)</title><rect x="68.5950%" y="292" width="6.4050%" height="15" fill="rgb(247,173,49)"/><text x="68.8450%" y="302.50">0x7f63b9..</text></g><g><title>0x7f63b95a3faf (libc-2.27.so) (27 samples, 5.58%)</title><rect x="69.4215%" y="308" width="5.5785%" height="15" fill="rgb(224,114,35)"/><text x="69.6715%" y="318.50">0x7f63b..</text></g><g><title>0x7f63b95b0a8f (libc-2.27.so) (6 samples, 1.24%)</title><rect x="76.4463%" y="292" width="1.2397%" height="15" fill="rgb(245,159,27)"/><text x="76.6963%" y="302.50"></text></g><g><title>0x7f63b95ab098 (libc-2.27.so) (83 samples, 17.15%)</title><rect x="65.4959%" y="276" width="17.1488%" height="15" fill="rgb(245,172,44)"/><text x="65.7459%" y="286.50">0x7f63b95ab098 (libc-2.27.s..</text></g><g><title>CPLsnprintf (libgdal.so.26.0.4) (119 samples, 24.59%)</title><rect x="58.2645%" y="196" width="24.5868%" height="15" fill="rgb(236,23,11)"/><text x="58.5145%" y="206.50">CPLsnprintf (libgdal.so.26.0.4)</text></g><g><title>CPLvsnprintf (libgdal.so.26.0.4) (115 samples, 23.76%)</title><rect x="59.0909%" y="212" width="23.7603%" height="15" fill="rgb(205,117,38)"/><text x="59.3409%" y="222.50">CPLvsnprintf (libgdal.so.26.0.4)</text></g><g><title>__snprintf_chk (libc-2.27.so) (112 samples, 23.14%)</title><rect x="59.7107%" y="228" width="23.1405%" height="15" fill="rgb(237,72,25)"/><text x="59.9607%" y="238.50">__snprintf_chk (libc-2.27.so)</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (107 samples, 22.11%)</title><rect x="60.7438%" y="244" width="22.1074%" height="15" fill="rgb(244,70,9)"/><text x="60.9938%" y="254.50">__vsnprintf_chk (libc-2.27.so)</text></g><g><title>_IO_vfprintf (libc-2.27.so) (102 samples, 21.07%)</title><rect x="61.7769%" y="260" width="21.0744%" height="15" fill="rgb(217,125,39)"/><text x="62.0269%" y="270.50">_IO_vfprintf (libc-2.27.so)</text></g><g><title>0x7f63b95a9fa9 (libc-2.27.so) (9 samples, 1.86%)</title><rect x="82.8512%" y="244" width="1.8595%" height="15" fill="rgb(235,36,10)"/><text x="83.1012%" y="254.50">0..</text></g><g><title>OGRMakeWktCoordinateM (libgdal.so.26.0.4) (171 samples, 35.33%)</title><rect x="51.6529%" y="164" width="35.3306%" height="15" fill="rgb(251,123,47)"/><text x="51.9029%" y="174.50">OGRMakeWktCoordinateM (libgdal.so.26.0.4)</text></g><g><title>OGRFormatDouble (libgdal.so.26.0.4) (161 samples, 33.26%)</title><rect x="53.7190%" y="180" width="33.2645%" height="15" fill="rgb(221,13,13)"/><text x="53.9690%" y="190.50">OGRFormatDouble (libgdal.so.26.0.4)</text></g><g><title>__snprintf_chk (libc-2.27.so) (20 samples, 4.13%)</title><rect x="82.8512%" y="196" width="4.1322%" height="15" fill="rgb(238,131,9)"/><text x="83.1012%" y="206.50">__snp..</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (20 samples, 4.13%)</title><rect x="82.8512%" y="212" width="4.1322%" height="15" fill="rgb(211,50,8)"/><text x="83.1012%" y="222.50">__vsn..</text></g><g><title>_IO_vfprintf (libc-2.27.so) (20 samples, 4.13%)</title><rect x="82.8512%" y="228" width="4.1322%" height="15" fill="rgb(245,182,24)"/><text x="83.1012%" y="238.50">_IO_v..</text></g><g><title>OGRPoint::exportToWkt (libgdal.so.26.0.4) (182 samples, 37.60%)</title><rect x="51.2397%" y="148" width="37.6033%" height="15" fill="rgb(242,14,37)"/><text x="51.4897%" y="158.50">OGRPoint::exportToWkt (libgdal.so.26.0.4)</text></g><g><title>__snprintf_chk (libc-2.27.so) (9 samples, 1.86%)</title><rect x="86.9835%" y="164" width="1.8595%" height="15" fill="rgb(246,228,12)"/><text x="87.2335%" y="174.50">_..</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (9 samples, 1.86%)</title><rect x="86.9835%" y="180" width="1.8595%" height="15" fill="rgb(213,55,15)"/><text x="87.2335%" y="190.50">_..</text></g><g><title>_IO_vfprintf (libc-2.27.so) (7 samples, 1.45%)</title><rect x="87.3967%" y="196" width="1.4463%" height="15" fill="rgb(209,9,3)"/><text x="87.6467%" y="206.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.h:255) (8 samples, 1.65%)</title><rect x="89.8760%" y="212" width="1.6529%" height="15" fill="rgb(230,59,30)"/><text x="90.1260%" y="222.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (basic_string.h:236) (7 samples, 1.45%)</title><rect x="90.0826%" y="228" width="1.4463%" height="15" fill="rgb(209,121,21)"/><text x="90.3326%" y="238.50"></text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::to_string&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:917) (11 samples, 2.27%)</title><rect x="89.4628%" y="180" width="2.2727%" height="15" fill="rgb(220,109,13)"/><text x="89.7128%" y="190.50">n..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*, void&gt; (basic_string.h:607) (11 samples, 2.27%)</title><rect x="89.4628%" y="196" width="2.2727%" height="15" fill="rgb(232,18,1)"/><text x="89.7128%" y="206.50">s..</text></g><g><title>arrow::BaseBinaryArray&lt;arrow::BinaryType&gt;::GetString[abi:cxx11] (array.h:831) (13 samples, 2.69%)</title><rect x="89.2562%" y="148" width="2.6860%" height="15" fill="rgb(215,41,42)"/><text x="89.5062%" y="158.50">ar..</text></g><g><title>nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::operator std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&lt;std::allocator&lt;char&gt; &gt; (string_view.hpp:905) (12 samples, 2.48%)</title><rect x="89.4628%" y="164" width="2.4793%" height="15" fill="rgb(224,123,36)"/><text x="89.7128%" y="174.50">no..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:56) (7 samples, 1.45%)</title><rect x="92.1488%" y="180" width="1.4463%" height="15" fill="rgb(240,125,3)"/><text x="92.3988%" y="190.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::AppendNextOffset (builder_binary.h:327) (9 samples, 1.86%)</title><rect x="94.0083%" y="196" width="1.8595%" height="15" fill="rgb(205,98,50)"/><text x="94.2583%" y="206.50">a..</text></g><g><title>arrow::TypedBufferBuilder&lt;int, void&gt;::Append (buffer_builder.h:192) (5 samples, 1.03%)</title><rect x="94.8347%" y="212" width="1.0331%" height="15" fill="rgb(205,185,37)"/><text x="95.0847%" y="222.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:57) (13 samples, 2.69%)</title><rect x="93.5950%" y="180" width="2.6860%" height="15" fill="rgb(238,207,15)"/><text x="93.8450%" y="190.50">ar..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:60) (5 samples, 1.03%)</title><rect x="96.4876%" y="180" width="1.0331%" height="15" fill="rgb(213,199,42)"/><text x="96.7376%" y="190.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:73) (28 samples, 5.79%)</title><rect x="92.1488%" y="148" width="5.7851%" height="15" fill="rgb(235,201,11)"/><text x="92.3988%" y="158.50">arrow::..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (builder_binary.h:69) (28 samples, 5.79%)</title><rect x="92.1488%" y="164" width="5.7851%" height="15" fill="rgb(207,46,11)"/><text x="92.3988%" y="174.50">arrow::..</text></g><g><title>all (484 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (459 samples, 94.83%)</title><rect x="5.1653%" y="52" width="94.8347%" height="15" fill="rgb(243,32,47)"/><text x="5.4153%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_ConvexHull (profile_geo.py:183) (449 samples, 92.77%)</title><rect x="7.2314%" y="68" width="92.7686%" height="15" fill="rgb(247,202,23)"/><text x="7.4814%" y="78.50">test_ST_ConvexHull (profile_geo.py:183)</text></g><g><title>ST_ConvexHull (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6244) (448 samples, 92.56%)</title><rect x="7.4380%" y="84" width="92.5620%" height="15" fill="rgb(219,102,11)"/><text x="7.6880%" y="94.50">ST_ConvexHull (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6244)</text></g><g><title>ST_ConvexHull (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6265) (448 samples, 92.56%)</title><rect x="7.4380%" y="100" width="92.5620%" height="15" fill="rgb(243,110,44)"/><text x="7.6880%" y="110.50">ST_ConvexHull (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:6265)</text></g><g><title>arctern::gis::ST_ConvexHull (gis_functions.cpp:137) (448 samples, 92.56%)</title><rect x="7.4380%" y="116" width="92.5620%" height="15" fill="rgb(222,74,54)"/><text x="7.6880%" y="126.50">arctern::gis::ST_ConvexHull (gis_functions.cpp:137)</text></g><g><title>arctern::gis::gdal::ST_ConvexHull (gis_functions.cpp:534) (448 samples, 92.56%)</title><rect x="7.4380%" y="132" width="92.5620%" height="15" fill="rgb(216,99,12)"/><text x="7.6880%" y="142.50">arctern::gis::gdal::ST_ConvexHull (gis_functions.cpp:534)</text></g></svg></svg>