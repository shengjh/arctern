<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180"><g><title>geos::geomgraph::PlanarGraph::~PlanarGraph (libgeos-3.8.0.so) (122 samples, 1.02%)</title><rect x="1.1913%" y="260" width="1.0235%" height="15" fill="rgb(227,0,7)"/><text x="1.4413%" y="270.50"></text></g><g><title>geos::operation::GeometryGraphOperation::~GeometryGraphOperation (libgeos-3.8.0.so) (142 samples, 1.19%)</title><rect x="1.0738%" y="244" width="1.1913%" height="15" fill="rgb(217,0,24)"/><text x="1.3238%" y="254.50"></text></g><g><title>geos::geomgraph::GeometryGraph::insertPoint (libgeos-3.8.0.so) (134 samples, 1.12%)</title><rect x="6.0319%" y="340" width="1.1242%" height="15" fill="rgb(221,193,54)"/><text x="6.2819%" y="350.50"></text></g><g><title>geos::geomgraph::NodeMap::addNode (libgeos-3.8.0.so) (133 samples, 1.12%)</title><rect x="6.0403%" y="356" width="1.1158%" height="15" fill="rgb(248,212,6)"/><text x="6.2903%" y="366.50"></text></g><g><title>geos::geomgraph::GeometryGraph::addCollection (libgeos-3.8.0.so) (377 samples, 3.16%)</title><rect x="4.0436%" y="308" width="3.1628%" height="15" fill="rgb(208,68,35)"/><text x="4.2936%" y="318.50">geo..</text></g><g><title>geos::geomgraph::GeometryGraph::add (libgeos-3.8.0.so) (371 samples, 3.11%)</title><rect x="4.0940%" y="324" width="3.1124%" height="15" fill="rgb(232,128,0)"/><text x="4.3440%" y="334.50">geo..</text></g><g><title>geos::geomgraph::GeometryGraph::add (libgeos-3.8.0.so) (476 samples, 3.99%)</title><rect x="3.4480%" y="292" width="3.9933%" height="15" fill="rgb(207,160,47)"/><text x="3.6980%" y="302.50">geos..</text></g><g><title>geos::geomgraph::GeometryGraph::GeometryGraph (libgeos-3.8.0.so) (494 samples, 4.14%)</title><rect x="3.4228%" y="276" width="4.1443%" height="15" fill="rgb(228,23,34)"/><text x="3.6728%" y="286.50">geos:..</text></g><g><title>geos::operation::GeometryGraphOperation::GeometryGraphOperation (libgeos-3.8.0.so) (517 samples, 4.34%)</title><rect x="3.2886%" y="260" width="4.3372%" height="15" fill="rgb(218,30,26)"/><text x="3.5386%" y="270.50">geos:..</text></g><g><title>geos::operation::overlay::OverlayOp::OverlayOp (libgeos-3.8.0.so) (657 samples, 5.51%)</title><rect x="2.2651%" y="244" width="5.5117%" height="15" fill="rgb(220,122,19)"/><text x="2.5151%" y="254.50">geos::o..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::processOverlaps (libgeos-3.8.0.so) (445 samples, 3.73%)</title><rect x="10.1342%" y="308" width="3.7332%" height="15" fill="rgb(250,228,42)"/><text x="10.3842%" y="318.50">geos..</text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (419 samples, 3.52%)</title><rect x="10.3523%" y="324" width="3.5151%" height="15" fill="rgb(240,193,28)"/><text x="10.6023%" y="334.50">geo..</text></g><g><title>geos::geomgraph::index::SegmentIntersector::addIntersections (libgeos-3.8.0.so) (340 samples, 2.85%)</title><rect x="11.0151%" y="340" width="2.8523%" height="15" fill="rgb(216,20,37)"/><text x="11.2651%" y="350.50">ge..</text></g><g><title>geos::geomgraph::Edge::addIntersections (libgeos-3.8.0.so) (204 samples, 1.71%)</title><rect x="12.1560%" y="356" width="1.7114%" height="15" fill="rgb(206,188,39)"/><text x="12.4060%" y="366.50"></text></g><g><title>geos::geomgraph::EdgeIntersectionList::add (libgeos-3.8.0.so) (141 samples, 1.18%)</title><rect x="12.6846%" y="372" width="1.1829%" height="15" fill="rgb(217,207,13)"/><text x="12.9346%" y="382.50"></text></g><g><title>std::vector&lt;geos::geomgraph::EdgeIntersection, std::allocator&lt;geos::geomgraph::EdgeIntersection&gt; &gt;::emplace_back&lt;geos::geom::Coordinate const&amp;, unsigned long&amp;, double&amp;&gt; (libgeos-3.8.0.so) (130 samples, 1.09%)</title><rect x="12.7768%" y="388" width="1.0906%" height="15" fill="rgb(231,73,38)"/><text x="13.0268%" y="398.50"></text></g><g><title>std::vector&lt;geos::geomgraph::EdgeIntersection, std::allocator&lt;geos::geomgraph::EdgeIntersection&gt; &gt;::_M_realloc_insert&lt;geos::geom::Coordinate const&amp;, unsigned long&amp;, double&amp;&gt; (libgeos-3.8.0.so) (121 samples, 1.02%)</title><rect x="12.8523%" y="404" width="1.0151%" height="15" fill="rgb(225,20,46)"/><text x="13.1023%" y="414.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (510 samples, 4.28%)</title><rect x="9.6225%" y="292" width="4.2785%" height="15" fill="rgb(210,31,41)"/><text x="9.8725%" y="302.50">geos:..</text></g><g><title>geos::geomgraph::GeometryGraph::computeEdgeIntersections (libgeos-3.8.0.so) (583 samples, 4.89%)</title><rect x="9.1527%" y="276" width="4.8909%" height="15" fill="rgb(221,200,47)"/><text x="9.4027%" y="286.50">geos::..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::processOverlaps (libgeos-3.8.0.so) (190 samples, 1.59%)</title><rect x="16.0654%" y="324" width="1.5940%" height="15" fill="rgb(226,26,5)"/><text x="16.3154%" y="334.50"></text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (181 samples, 1.52%)</title><rect x="16.1409%" y="340" width="1.5185%" height="15" fill="rgb(249,33,26)"/><text x="16.3909%" y="350.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (308 samples, 2.58%)</title><rect x="15.0839%" y="308" width="2.5839%" height="15" fill="rgb(235,183,28)"/><text x="15.3339%" y="318.50">ge..</text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (470 samples, 3.94%)</title><rect x="14.0436%" y="276" width="3.9430%" height="15" fill="rgb(221,5,38)"/><text x="14.2936%" y="286.50">geos..</text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (470 samples, 3.94%)</title><rect x="14.0436%" y="292" width="3.9430%" height="15" fill="rgb(247,18,42)"/><text x="14.2936%" y="302.50">geos..</text></g><g><title>geos::geomgraph::EdgeIntersectionList::createSplitEdge (libgeos-3.8.0.so) (145 samples, 1.22%)</title><rect x="18.2215%" y="308" width="1.2164%" height="15" fill="rgb(241,131,45)"/><text x="18.4715%" y="318.50"></text></g><g><title>geos::geomgraph::GeometryGraph::computeSplitEdges (libgeos-3.8.0.so) (281 samples, 2.36%)</title><rect x="17.9866%" y="276" width="2.3574%" height="15" fill="rgb(249,31,29)"/><text x="18.2366%" y="286.50">g..</text></g><g><title>geos::geomgraph::EdgeIntersectionList::addSplitEdges (libgeos-3.8.0.so) (275 samples, 2.31%)</title><rect x="18.0369%" y="292" width="2.3070%" height="15" fill="rgb(225,111,53)"/><text x="18.2869%" y="302.50">g..</text></g><g><title>geos::geomgraph::PlanarGraph::add (libgeos-3.8.0.so) (143 samples, 1.20%)</title><rect x="20.6711%" y="292" width="1.1997%" height="15" fill="rgb(238,160,17)"/><text x="20.9211%" y="302.50"></text></g><g><title>geos::geomgraph::PlanarGraph::addEdges (libgeos-3.8.0.so) (216 samples, 1.81%)</title><rect x="20.3440%" y="276" width="1.8121%" height="15" fill="rgb(214,148,48)"/><text x="20.5940%" y="286.50">g..</text></g><g><title>geos::index::strtree::AbstractSTRtree::query (libgeos-3.8.0.so) (130 samples, 1.09%)</title><rect x="23.8255%" y="324" width="1.0906%" height="15" fill="rgb(232,36,49)"/><text x="24.0755%" y="334.50"></text></g><g><title>geos::noding::MCIndexNoder::intersectChains (libgeos-3.8.0.so) (222 samples, 1.86%)</title><rect x="23.1292%" y="308" width="1.8624%" height="15" fill="rgb(209,103,24)"/><text x="23.3792%" y="318.50">g..</text></g><g><title>geos::noding::FastNodingValidator::checkValid (libgeos-3.8.0.so) (367 samples, 3.08%)</title><rect x="22.1560%" y="276" width="3.0789%" height="15" fill="rgb(229,88,8)"/><text x="22.4060%" y="286.50">geo..</text></g><g><title>geos::noding::FastNodingValidator::checkInteriorIntersections (libgeos-3.8.0.so) (364 samples, 3.05%)</title><rect x="22.1812%" y="292" width="3.0537%" height="15" fill="rgb(213,181,19)"/><text x="22.4312%" y="302.50">geo..</text></g><g><title>geos::operation::overlay::OverlayOp::computeLabelling (libgeos-3.8.0.so) (136 samples, 1.14%)</title><rect x="26.3507%" y="276" width="1.1409%" height="15" fill="rgb(254,191,54)"/><text x="26.6007%" y="286.50"></text></g><g><title>geos::geomgraph::NodeMap::addNode (libgeos-3.8.0.so) (145 samples, 1.22%)</title><rect x="27.7685%" y="292" width="1.2164%" height="15" fill="rgb(241,83,37)"/><text x="28.0185%" y="302.50"></text></g><g><title>geos::operation::overlay::OverlayOp::copyPoints (libgeos-3.8.0.so) (178 samples, 1.49%)</title><rect x="27.5336%" y="276" width="1.4933%" height="15" fill="rgb(233,36,39)"/><text x="27.7836%" y="286.50"></text></g><g><title>geos::operation::overlay::OverlayOp::insertUniqueEdges (libgeos-3.8.0.so) (264 samples, 2.21%)</title><rect x="29.0856%" y="276" width="2.2148%" height="15" fill="rgb(226,3,54)"/><text x="29.3356%" y="286.50">g..</text></g><g><title>geos::operation::overlay::OverlayOp::insertUniqueEdge (libgeos-3.8.0.so) (248 samples, 2.08%)</title><rect x="29.2198%" y="292" width="2.0805%" height="15" fill="rgb(245,192,40)"/><text x="29.4698%" y="302.50">g..</text></g><g><title>geos::operation::overlay::OverlayOp::getResultGeometry (libgeos-3.8.0.so) (2,980 samples, 25.00%)</title><rect x="7.7768%" y="244" width="25.0000%" height="15" fill="rgb(238,167,29)"/><text x="8.0268%" y="254.50">geos::operation::overlay::OverlayOp::get..</text></g><g><title>geos::operation::overlay::OverlayOp::computeOverlay (libgeos-3.8.0.so) (2,979 samples, 24.99%)</title><rect x="7.7852%" y="260" width="24.9916%" height="15" fill="rgb(232,182,51)"/><text x="8.0352%" y="270.50">geos::operation::overlay::OverlayOp::com..</text></g><g><title>geos::geomgraph::PlanarGraph::~PlanarGraph (libgeos-3.8.0.so) (142 samples, 1.19%)</title><rect x="33.2215%" y="260" width="1.1913%" height="15" fill="rgb(231,60,39)"/><text x="33.4715%" y="270.50"></text></g><g><title>geos::operation::overlay::OverlayOp::overlayOp (libgeos-3.8.0.so) (3,987 samples, 33.45%)</title><rect x="1.0403%" y="228" width="33.4480%" height="15" fill="rgb(208,69,12)"/><text x="1.2903%" y="238.50">geos::operation::overlay::OverlayOp::overlayOp (libgeo..</text></g><g><title>geos::operation::overlay::OverlayOp::~OverlayOp (libgeos-3.8.0.so) (204 samples, 1.71%)</title><rect x="32.7768%" y="244" width="1.7114%" height="15" fill="rgb(235,93,37)"/><text x="33.0268%" y="254.50"></text></g><g><title>geos::geom::BinaryOp&lt;geos::operation::overlay::overlayOp&gt; (libgeos-3.8.0.so) (4,059 samples, 34.05%)</title><rect x="0.9648%" y="212" width="34.0520%" height="15" fill="rgb(213,116,39)"/><text x="1.2148%" y="222.50">geos::geom::BinaryOp&lt;geos::operation::overlay::overlayO..</text></g><g><title>geos::geom::Geometry::difference (libgeos-3.8.0.so) (4,072 samples, 34.16%)</title><rect x="0.9144%" y="196" width="34.1611%" height="15" fill="rgb(222,207,29)"/><text x="1.1644%" y="206.50">geos::geom::Geometry::difference (libgeos-3.8.0.so)</text></g><g><title>geos::operation::polygonize::PolygonizeGraph::addEdge (libgeos-3.8.0.so) (236 samples, 1.98%)</title><rect x="37.0805%" y="228" width="1.9799%" height="15" fill="rgb(206,96,30)"/><text x="37.3305%" y="238.50">g..</text></g><g><title>geos::geom::GeometryCollection::apply_ro (libgeos-3.8.0.so) (264 samples, 2.21%)</title><rect x="37.0218%" y="212" width="2.2148%" height="15" fill="rgb(218,138,4)"/><text x="37.2718%" y="222.50">g..</text></g><g><title>geos::operation::polygonize::PolygonizeGraph::~PolygonizeGraph (libgeos-3.8.0.so) (131 samples, 1.10%)</title><rect x="40.1091%" y="212" width="1.0990%" height="15" fill="rgb(250,191,14)"/><text x="40.3591%" y="222.50"></text></g><g><title>geos::operation::polygonize::PolygonizeGraph::~PolygonizeGraph (libgeos-3.8.0.so) (126 samples, 1.06%)</title><rect x="40.1510%" y="228" width="1.0570%" height="15" fill="rgb(239,60,40)"/><text x="40.4010%" y="238.50"></text></g><g><title>geos::operation::polygonize::HoleAssigner::assignHolesToShells (libgeos-3.8.0.so) (153 samples, 1.28%)</title><rect x="41.4597%" y="244" width="1.2836%" height="15" fill="rgb(206,27,48)"/><text x="41.7097%" y="254.50"></text></g><g><title>geos::operation::polygonize::PolygonizeGraph::deleteDangles (libgeos-3.8.0.so) (139 samples, 1.17%)</title><rect x="43.7416%" y="244" width="1.1661%" height="15" fill="rgb(225,35,8)"/><text x="43.9916%" y="254.50"></text></g><g><title>geos::operation::polygonize::PolygonizeGraph::getEdgeRings (libgeos-3.8.0.so) (170 samples, 1.43%)</title><rect x="44.9077%" y="244" width="1.4262%" height="15" fill="rgb(250,213,24)"/><text x="45.1577%" y="254.50"></text></g><g><title>geos::geomgraph::GeometryGraph::GeometryGraph (libgeos-3.8.0.so) (126 samples, 1.06%)</title><rect x="47.1057%" y="324" width="1.0570%" height="15" fill="rgb(247,123,22)"/><text x="47.3557%" y="334.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (278 samples, 2.33%)</title><rect x="48.5151%" y="340" width="2.3322%" height="15" fill="rgb(231,138,38)"/><text x="48.7651%" y="350.50">g..</text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::processOverlaps (libgeos-3.8.0.so) (151 samples, 1.27%)</title><rect x="49.5805%" y="356" width="1.2668%" height="15" fill="rgb(231,145,46)"/><text x="49.8305%" y="366.50"></text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (140 samples, 1.17%)</title><rect x="49.6728%" y="372" width="1.1745%" height="15" fill="rgb(251,118,11)"/><text x="49.9228%" y="382.50"></text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (330 samples, 2.77%)</title><rect x="48.1628%" y="324" width="2.7685%" height="15" fill="rgb(217,147,25)"/><text x="48.4128%" y="334.50">ge..</text></g><g><title>geos::geom::Geometry::isValid (libgeos-3.8.0.so) (554 samples, 4.65%)</title><rect x="46.7953%" y="260" width="4.6477%" height="15" fill="rgb(247,81,37)"/><text x="47.0453%" y="270.50">geos:..</text></g><g><title>geos::operation::valid::IsValidOp::isValid (libgeos-3.8.0.so) (552 samples, 4.63%)</title><rect x="46.8121%" y="276" width="4.6309%" height="15" fill="rgb(209,12,38)"/><text x="47.0621%" y="286.50">geos:..</text></g><g><title>geos::operation::valid::IsValidOp::checkValid (libgeos-3.8.0.so) (551 samples, 4.62%)</title><rect x="46.8205%" y="292" width="4.6225%" height="15" fill="rgb(227,1,9)"/><text x="47.0705%" y="302.50">geos:..</text></g><g><title>geos::operation::valid::IsValidOp::checkValid (libgeos-3.8.0.so) (551 samples, 4.62%)</title><rect x="46.8205%" y="308" width="4.6225%" height="15" fill="rgb(248,47,43)"/><text x="47.0705%" y="318.50">geos:..</text></g><g><title>geos::operation::polygonize::Polygonizer::getPolygons (libgeos-3.8.0.so) (1,302 samples, 10.92%)</title><rect x="41.3507%" y="212" width="10.9228%" height="15" fill="rgb(221,10,30)"/><text x="41.6007%" y="222.50">geos::operation:..</text></g><g><title>geos::operation::polygonize::Polygonizer::polygonize (libgeos-3.8.0.so) (1,299 samples, 10.90%)</title><rect x="41.3758%" y="228" width="10.8977%" height="15" fill="rgb(210,229,1)"/><text x="41.6258%" y="238.50">geos::operation:..</text></g><g><title>geos::operation::polygonize::Polygonizer::findValidRings (libgeos-3.8.0.so) (654 samples, 5.49%)</title><rect x="46.7869%" y="244" width="5.4866%" height="15" fill="rgb(222,148,37)"/><text x="47.0369%" y="254.50">geos::o..</text></g><g><title>geos::operation::polygonize::BuildArea::build (libgeos-3.8.0.so) (1,841 samples, 15.44%)</title><rect x="36.8456%" y="196" width="15.4446%" height="15" fill="rgb(234,67,33)"/><text x="37.0956%" y="206.50">geos::operation::polygon..</text></g><g><title>geos::geomgraph::GeometryGraph::add (libgeos-3.8.0.so) (121 samples, 1.02%)</title><rect x="52.6174%" y="260" width="1.0151%" height="15" fill="rgb(247,98,35)"/><text x="52.8674%" y="270.50"></text></g><g><title>geos::geomgraph::GeometryGraph::GeometryGraph (libgeos-3.8.0.so) (146 samples, 1.22%)</title><rect x="52.5252%" y="244" width="1.2248%" height="15" fill="rgb(247,138,52)"/><text x="52.7752%" y="254.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::processOverlaps (libgeos-3.8.0.so) (172 samples, 1.44%)</title><rect x="56.0906%" y="308" width="1.4430%" height="15" fill="rgb(213,79,30)"/><text x="56.3406%" y="318.50"></text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (164 samples, 1.38%)</title><rect x="56.1577%" y="324" width="1.3758%" height="15" fill="rgb(246,177,23)"/><text x="56.4077%" y="334.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (254 samples, 2.13%)</title><rect x="55.4782%" y="292" width="2.1309%" height="15" fill="rgb(230,62,27)"/><text x="55.7282%" y="302.50">g..</text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (353 samples, 2.96%)</title><rect x="54.7903%" y="276" width="2.9614%" height="15" fill="rgb(216,154,8)"/><text x="55.0403%" y="286.50">geo..</text></g><g><title>geos::geomgraph::Node::add (libgeos-3.8.0.so) (128 samples, 1.07%)</title><rect x="59.2534%" y="308" width="1.0738%" height="15" fill="rgb(244,35,45)"/><text x="59.5034%" y="318.50"></text></g><g><title>geos::operation::relate::RelateNodeGraph::insertEdgeEnds (libgeos-3.8.0.so) (148 samples, 1.24%)</title><rect x="59.2534%" y="292" width="1.2416%" height="15" fill="rgb(251,115,12)"/><text x="59.5034%" y="302.50"></text></g><g><title>geos::operation::relate::RelateNodeGraph::build (libgeos-3.8.0.so) (329 samples, 2.76%)</title><rect x="57.7517%" y="276" width="2.7601%" height="15" fill="rgb(240,54,50)"/><text x="58.0017%" y="286.50">ge..</text></g><g><title>geos::operation::valid::ConsistentAreaTester::isNodeConsistentArea (libgeos-3.8.0.so) (740 samples, 6.21%)</title><rect x="54.7567%" y="260" width="6.2081%" height="15" fill="rgb(233,84,52)"/><text x="55.0067%" y="270.50">geos::op..</text></g><g><title>geos::operation::valid::IsValidOp::checkConsistentArea (libgeos-3.8.0.so) (821 samples, 6.89%)</title><rect x="54.0940%" y="244" width="6.8876%" height="15" fill="rgb(207,117,47)"/><text x="54.3440%" y="254.50">geos::ope..</text></g><g><title>geos::operation::valid::IsValidOp::getValidationError (libgeos-3.8.0.so) (1,057 samples, 8.87%)</title><rect x="52.2903%" y="196" width="8.8674%" height="15" fill="rgb(249,43,39)"/><text x="52.5403%" y="206.50">geos::operati..</text></g><g><title>geos::operation::valid::IsValidOp::checkValid (libgeos-3.8.0.so) (1,055 samples, 8.85%)</title><rect x="52.3070%" y="212" width="8.8507%" height="15" fill="rgb(209,38,44)"/><text x="52.5570%" y="222.50">geos::operati..</text></g><g><title>geos::operation::valid::IsValidOp::checkValid (libgeos-3.8.0.so) (1,055 samples, 8.85%)</title><rect x="52.3070%" y="228" width="8.8507%" height="15" fill="rgb(236,212,23)"/><text x="52.5570%" y="238.50">geos::operati..</text></g><g><title>geos::operation::valid::extractUniquePoints (libgeos-3.8.0.so) (165 samples, 1.38%)</title><rect x="61.1577%" y="196" width="1.3842%" height="15" fill="rgb(242,79,21)"/><text x="61.4077%" y="206.50"></text></g><g><title>geos::operation::overlay::OverlayOp::OverlayOp (libgeos-3.8.0.so) (134 samples, 1.12%)</title><rect x="63.2550%" y="260" width="1.1242%" height="15" fill="rgb(211,96,35)"/><text x="63.5050%" y="270.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::processOverlaps (libgeos-3.8.0.so) (125 samples, 1.05%)</title><rect x="67.0470%" y="340" width="1.0487%" height="15" fill="rgb(253,215,40)"/><text x="67.2970%" y="350.50"></text></g><g><title>geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain (libgeos-3.8.0.so) (122 samples, 1.02%)</title><rect x="67.0721%" y="356" width="1.0235%" height="15" fill="rgb(211,81,21)"/><text x="67.3221%" y="366.50"></text></g><g><title>geos::geomgraph::index::SimpleMCSweepLineIntersector::computeIntersections (libgeos-3.8.0.so) (194 samples, 1.63%)</title><rect x="66.4765%" y="324" width="1.6275%" height="15" fill="rgb(208,190,38)"/><text x="66.7265%" y="334.50"></text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (280 samples, 2.35%)</title><rect x="65.8138%" y="292" width="2.3490%" height="15" fill="rgb(235,213,38)"/><text x="66.0638%" y="302.50">g..</text></g><g><title>geos::geomgraph::GeometryGraph::computeSelfNodes (libgeos-3.8.0.so) (277 samples, 2.32%)</title><rect x="65.8389%" y="308" width="2.3238%" height="15" fill="rgb(237,122,38)"/><text x="66.0889%" y="318.50">g..</text></g><g><title>geos::geomgraph::PlanarGraph::addEdges (libgeos-3.8.0.so) (141 samples, 1.18%)</title><rect x="69.1611%" y="292" width="1.1829%" height="15" fill="rgb(244,218,35)"/><text x="69.4111%" y="302.50"></text></g><g><title>geos::noding::MCIndexNoder::computeNodes (libgeos-3.8.0.so) (137 samples, 1.15%)</title><rect x="70.5034%" y="324" width="1.1493%" height="15" fill="rgb(240,68,47)"/><text x="70.7534%" y="334.50"></text></g><g><title>geos::noding::MCIndexNoder::add (libgeos-3.8.0.so) (136 samples, 1.14%)</title><rect x="70.5117%" y="340" width="1.1409%" height="15" fill="rgb(210,16,53)"/><text x="70.7617%" y="350.50"></text></g><g><title>geos::index::chain::MonotoneChain::computeOverlaps (libgeos-3.8.0.so) (138 samples, 1.16%)</title><rect x="71.8037%" y="340" width="1.1577%" height="15" fill="rgb(235,124,12)"/><text x="72.0537%" y="350.50"></text></g><g><title>geos::index::strtree::AbstractSTRtree::build (libgeos-3.8.0.so) (151 samples, 1.27%)</title><rect x="73.1208%" y="356" width="1.2668%" height="15" fill="rgb(224,169,11)"/><text x="73.3708%" y="366.50"></text></g><g><title>geos::index::strtree::AbstractSTRtree::createHigherLevels (libgeos-3.8.0.so) (150 samples, 1.26%)</title><rect x="73.1292%" y="372" width="1.2584%" height="15" fill="rgb(250,166,2)"/><text x="73.3792%" y="382.50"></text></g><g><title>geos::index::strtree::STRtree::createParentBoundables (libgeos-3.8.0.so) (150 samples, 1.26%)</title><rect x="73.1292%" y="388" width="1.2584%" height="15" fill="rgb(242,216,29)"/><text x="73.3792%" y="398.50"></text></g><g><title>geos::index::strtree::AbstractSTRtree::query (libgeos-3.8.0.so) (200 samples, 1.68%)</title><rect x="72.9698%" y="340" width="1.6779%" height="15" fill="rgb(230,116,27)"/><text x="73.2198%" y="350.50"></text></g><g><title>geos::noding::MCIndexNoder::intersectChains (libgeos-3.8.0.so) (362 samples, 3.04%)</title><rect x="71.6527%" y="324" width="3.0369%" height="15" fill="rgb(228,99,48)"/><text x="71.9027%" y="334.50">geo..</text></g><g><title>geos::noding::FastNodingValidator::checkValid (libgeos-3.8.0.so) (550 samples, 4.61%)</title><rect x="70.3440%" y="292" width="4.6141%" height="15" fill="rgb(253,11,6)"/><text x="70.5940%" y="302.50">geos:..</text></g><g><title>geos::noding::FastNodingValidator::checkInteriorIntersections (libgeos-3.8.0.so) (544 samples, 4.56%)</title><rect x="70.3943%" y="308" width="4.5638%" height="15" fill="rgb(247,143,39)"/><text x="70.6443%" y="318.50">geos:..</text></g><g><title>geos::operation::overlay::LineBuilder::build (libgeos-3.8.0.so) (136 samples, 1.14%)</title><rect x="75.1426%" y="292" width="1.1409%" height="15" fill="rgb(236,97,10)"/><text x="75.3926%" y="302.50"></text></g><g><title>geos::operation::overlay::OverlayOp::insertUniqueEdges (libgeos-3.8.0.so) (172 samples, 1.44%)</title><rect x="77.8775%" y="292" width="1.4430%" height="15" fill="rgb(233,208,19)"/><text x="78.1275%" y="302.50"></text></g><g><title>geos::operation::overlay::OverlayOp::insertUniqueEdge (libgeos-3.8.0.so) (165 samples, 1.38%)</title><rect x="77.9362%" y="308" width="1.3842%" height="15" fill="rgb(216,164,2)"/><text x="78.1862%" y="318.50"></text></g><g><title>geos::operation::overlay::OverlayOp::getResultGeometry (libgeos-3.8.0.so) (1,922 samples, 16.12%)</title><rect x="64.3792%" y="260" width="16.1242%" height="15" fill="rgb(220,129,5)"/><text x="64.6292%" y="270.50">geos::operation::overlay:..</text></g><g><title>geos::operation::overlay::OverlayOp::computeOverlay (libgeos-3.8.0.so) (1,922 samples, 16.12%)</title><rect x="64.3792%" y="276" width="16.1242%" height="15" fill="rgb(242,17,10)"/><text x="64.6292%" y="286.50">geos::operation::overlay:..</text></g><g><title>geos::operation::overlay::OverlayOp::overlayOp (libgeos-3.8.0.so) (2,234 samples, 18.74%)</title><rect x="62.7265%" y="244" width="18.7416%" height="15" fill="rgb(242,107,0)"/><text x="62.9765%" y="254.50">geos::operation::overlay::Ove..</text></g><g><title>geos::geom::BinaryOp&lt;geos::operation::overlay::overlayOp&gt; (libgeos-3.8.0.so) (2,299 samples, 19.29%)</title><rect x="62.6678%" y="228" width="19.2869%" height="15" fill="rgb(251,28,31)"/><text x="62.9178%" y="238.50">geos::geom::BinaryOp&lt;geos::ope..</text></g><g><title>geos::geom::Geometry::Union (libgeos-3.8.0.so) (2,322 samples, 19.48%)</title><rect x="62.5923%" y="212" width="19.4799%" height="15" fill="rgb(233,223,10)"/><text x="62.8423%" y="222.50">geos::geom::Geometry::Union (li..</text></g><g><title>geos::operation::valid::nodeLineWithFirstCoordinate (libgeos-3.8.0.so) (2,344 samples, 19.66%)</title><rect x="62.5419%" y="196" width="19.6644%" height="15" fill="rgb(215,21,27)"/><text x="62.7919%" y="206.50">geos::operation::valid::nodeLin..</text></g><g><title>GEOSMakeValid_r (libgeos_c.so.1.13.1) (9,739 samples, 81.70%)</title><rect x="0.5285%" y="164" width="81.7030%" height="15" fill="rgb(232,23,21)"/><text x="0.7785%" y="174.50">GEOSMakeValid_r (libgeos_c.so.1.13.1)</text></g><g><title>geos::operation::valid::MakeValid::build (libgeos-3.8.0.so) (9,732 samples, 81.64%)</title><rect x="0.5872%" y="180" width="81.6443%" height="15" fill="rgb(244,5,23)"/><text x="0.8372%" y="190.50">geos::operation::valid::MakeValid::build (libgeos-3.8.0.so)</text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.0.so) (153 samples, 1.28%)</title><rect x="82.3909%" y="212" width="1.2836%" height="15" fill="rgb(226,81,46)"/><text x="82.6409%" y="222.50"></text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.0.so) (151 samples, 1.27%)</title><rect x="82.4077%" y="228" width="1.2668%" height="15" fill="rgb(247,70,30)"/><text x="82.6577%" y="238.50"></text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.1) (268 samples, 2.25%)</title><rect x="82.2987%" y="196" width="2.2483%" height="15" fill="rgb(212,68,19)"/><text x="82.5487%" y="206.50">G..</text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (282 samples, 2.37%)</title><rect x="82.2651%" y="164" width="2.3658%" height="15" fill="rgb(240,187,13)"/><text x="82.5151%" y="174.50">OG..</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (281 samples, 2.36%)</title><rect x="82.2735%" y="180" width="2.3574%" height="15" fill="rgb(223,113,26)"/><text x="82.5235%" y="190.50">c..</text></g><g><title>geos::io::WKBWriter::writeGeometryCollection (libgeos-3.8.0.so) (165 samples, 1.38%)</title><rect x="85.3188%" y="196" width="1.3842%" height="15" fill="rgb(206,192,2)"/><text x="85.5688%" y="206.50"></text></g><g><title>GEOSWKBWriter_write_r (libgeos_c.so.1.13.1) (302 samples, 2.53%)</title><rect x="84.9245%" y="180" width="2.5336%" height="15" fill="rgb(241,108,4)"/><text x="85.1745%" y="190.50">GE..</text></g><g><title>OGRGeometryCollection::importFromWkbInternal (libgdal.so.26.0.4) (155 samples, 1.30%)</title><rect x="87.6258%" y="212" width="1.3003%" height="15" fill="rgb(247,173,49)"/><text x="87.8758%" y="222.50"></text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (198 samples, 1.66%)</title><rect x="87.4581%" y="180" width="1.6611%" height="15" fill="rgb(224,114,35)"/><text x="87.7081%" y="190.50"></text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (195 samples, 1.64%)</title><rect x="87.4832%" y="196" width="1.6359%" height="15" fill="rgb(245,159,27)"/><text x="87.7332%" y="206.50"></text></g><g><title>OGRGeometryFactory::createFromGEOS (libgdal.so.26.0.4) (537 samples, 4.51%)</title><rect x="84.6393%" y="164" width="4.5050%" height="15" fill="rgb(245,172,44)"/><text x="84.8893%" y="174.50">OGRGe..</text></g><g><title>0x7fdae8e157d8 (libc-2.27.so) (148 samples, 1.24%)</title><rect x="90.0503%" y="228" width="1.2416%" height="15" fill="rgb(236,23,11)"/><text x="90.3003%" y="238.50"></text></g><g><title>initGEOS_r (libgeos_c.so.1.13.1) (208 samples, 1.74%)</title><rect x="89.6393%" y="164" width="1.7450%" height="15" fill="rgb(205,117,38)"/><text x="89.8893%" y="174.50"></text></g><g><title>GEOS_init_r (libgeos_c.so.1.13.1) (204 samples, 1.71%)</title><rect x="89.6728%" y="180" width="1.7114%" height="15" fill="rgb(237,72,25)"/><text x="89.9228%" y="190.50"></text></g><g><title>operator new (new_op.cc:50) (191 samples, 1.60%)</title><rect x="89.7819%" y="196" width="1.6023%" height="15" fill="rgb(244,70,9)"/><text x="90.0319%" y="206.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (191 samples, 1.60%)</title><rect x="89.7819%" y="212" width="1.6023%" height="15" fill="rgb(217,125,39)"/><text x="90.0319%" y="222.50"></text></g><g><title>OGRGeometry::MakeValid (libgdal.so.26.0.4) (10,841 samples, 90.95%)</title><rect x="0.4530%" y="148" width="90.9480%" height="15" fill="rgb(235,36,10)"/><text x="0.7030%" y="158.50">OGRGeometry::MakeValid (libgdal.so.26.0.4)</text></g><g><title>OGRMakeWktCoordinateM (libgdal.so.26.0.4) (160 samples, 1.34%)</title><rect x="92.3070%" y="196" width="1.3423%" height="15" fill="rgb(251,123,47)"/><text x="92.5570%" y="206.50"></text></g><g><title>__snprintf_chk (libc-2.27.so) (123 samples, 1.03%)</title><rect x="92.6174%" y="212" width="1.0319%" height="15" fill="rgb(221,13,13)"/><text x="92.8674%" y="222.50"></text></g><g><title>OGRSimpleCurve::exportToWkt (libgdal.so.26.0.4) (259 samples, 2.17%)</title><rect x="92.0973%" y="180" width="2.1728%" height="15" fill="rgb(238,131,9)"/><text x="92.3473%" y="190.50">O..</text></g><g><title>OGRPolygon::exportToWkt (libgdal.so.26.0.4) (333 samples, 2.79%)</title><rect x="91.7030%" y="164" width="2.7936%" height="15" fill="rgb(211,50,8)"/><text x="91.9530%" y="174.50">OG..</text></g><g><title>OGRGeometryCollection::exportToWktInternal (libgdal.so.26.0.4) (444 samples, 3.72%)</title><rect x="91.4094%" y="148" width="3.7248%" height="15" fill="rgb(245,182,24)"/><text x="91.6594%" y="158.50">OGRG..</text></g><g><title>CPLStrtodDelim (libgdal.so.26.0.4) (124 samples, 1.04%)</title><rect x="96.2164%" y="228" width="1.0403%" height="15" fill="rgb(242,14,37)"/><text x="96.4664%" y="238.50"></text></g><g><title>OGRWktReadPointsM (libgdal.so.26.0.4) (152 samples, 1.28%)</title><rect x="96.0654%" y="212" width="1.2752%" height="15" fill="rgb(246,228,12)"/><text x="96.3154%" y="222.50"></text></g><g><title>OGRPolygon::importFromWKTListOnly (libgdal.so.26.0.4) (179 samples, 1.50%)</title><rect x="95.8809%" y="196" width="1.5017%" height="15" fill="rgb(213,55,15)"/><text x="96.1309%" y="206.50"></text></g><g><title>OGRPolygon::importFromWkt (libgdal.so.26.0.4) (219 samples, 1.84%)</title><rect x="95.5705%" y="180" width="1.8372%" height="15" fill="rgb(209,9,3)"/><text x="95.8205%" y="190.50">O..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (259 samples, 2.17%)</title><rect x="95.3356%" y="148" width="2.1728%" height="15" fill="rgb(230,59,30)"/><text x="95.5856%" y="158.50">O..</text></g><g><title>OGRGeometryFactory::createFromWkt (libgdal.so.26.0.4) (257 samples, 2.16%)</title><rect x="95.3523%" y="164" width="2.1560%" height="15" fill="rgb(209,121,21)"/><text x="95.6023%" y="174.50">O..</text></g><g><title>all (11,920 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:324) (11,885 samples, 99.71%)</title><rect x="0.2936%" y="52" width="99.7064%" height="15" fill="rgb(232,18,1)"/><text x="0.5436%" y="62.50">&lt;module&gt; (profile_geo.py:324)</text></g><g><title>test_ST_MakeValid (profile_geo.py:73) (11,879 samples, 99.66%)</title><rect x="0.3440%" y="68" width="99.6560%" height="15" fill="rgb(215,41,42)"/><text x="0.5940%" y="78.50">test_ST_MakeValid (profile_geo.py:73)</text></g><g><title>ST_MakeValid (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5106) (11,878 samples, 99.65%)</title><rect x="0.3523%" y="84" width="99.6477%" height="15" fill="rgb(224,123,36)"/><text x="0.6023%" y="94.50">ST_MakeValid (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5106)</text></g><g><title>ST_MakeValid (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5127) (11,878 samples, 99.65%)</title><rect x="0.3523%" y="100" width="99.6477%" height="15" fill="rgb(240,125,3)"/><text x="0.6023%" y="110.50">ST_MakeValid (arctern_gis/arctern_gis_core_.cpython-37m-x86_64-linux-gnu.so:5127)</text></g><g><title>arctern::gis::ST_MakeValid (gis_functions.cpp:122) (11,878 samples, 99.65%)</title><rect x="0.3523%" y="116" width="99.6477%" height="15" fill="rgb(205,98,50)"/><text x="0.6023%" y="126.50">arctern::gis::ST_MakeValid (gis_functions.cpp:122)</text></g><g><title>arctern::gis::gdal::ST_MakeValid (gis_functions.cpp:522) (11,878 samples, 99.65%)</title><rect x="0.3523%" y="132" width="99.6477%" height="15" fill="rgb(205,185,37)"/><text x="0.6023%" y="142.50">arctern::gis::gdal::ST_MakeValid (gis_functions.cpp:522)</text></g></svg></svg>